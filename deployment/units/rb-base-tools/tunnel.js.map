{"version":3,"sources":["../../../units/rb-base-tools/tunnel.js"],"names":["spawn","require","http","httpProxy","createDevHostProxy","headers","proxyPort","serverPort","proxy","createProxyServer","on","proxyReq","req","res","options","headerName","setHeader","server","createServer","web","target","console","log","JSON","stringify","listen","establishTunnel","domainName","applicationPort","child","stdout","data","stderr","error","code","setTimeout","startProxiesAndTunnels","tunnels","applications","application","local","instance","port","subdomain","process","err"],"mappings":"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","sourcesContent":["const { spawn } = require('child_process')\nconst http = require('http')\n\nconst httpProxy = require('http-proxy')\n\nfunction createDevHostProxy(headers, proxyPort, serverPort) {\n  var proxy = httpProxy.createProxyServer({})\n\n  // Add headers\n  proxy.on('proxyReq', function(proxyReq, req, res, options) {\n    for (let headerName in headers)\n      proxyReq.setHeader(headerName, headers[headerName])\n  })\n\n  var server = http.createServer(function(req, res) {\n    // Forward to server port\n    proxy.web(req, res, {\n      target: 'http://127.0.0.1:' + serverPort,\n    })\n  })\n\n  // Listen at proxy port\n  console.log(proxyPort + ' -> ' + serverPort + ' + ' + JSON.stringify(headers))\n  server.listen(proxyPort)\n}\n\nfunction establishTunnel(domainName, proxyPort, applicationPort) {\n  console.log(\n    'Establishing ' +\n      domainName +\n      '.localtunnel.me - > :' +\n      proxyPort +\n      ' (bound to :' +\n      applicationPort +\n      ')',\n  )\n\n  const child = spawn('./node_modules/.bin/lt', [\n    '--port',\n    '' + proxyPort,\n    '--subdomain',\n    domainName,\n  ])\n\n  child.stdout.on('data', (data) => {\n    console.log('' + data)\n  })\n\n  child.stderr.on('data', (data) => {\n    console.error('' + data)\n  })\n\n  child.on('exit', (code) => {\n    if (code !== 0) {\n      console.error(\n        'lighttunnel for port ' +\n          proxyPort +\n          ' exited with ' +\n          code +\n          ', restarting ...',\n      )\n      setTimeout(() => establishTunnel(domainName, proxyPort))\n    }\n  })\n}\n\nfunction startProxiesAndTunnels(tunnels) {\n  const { applications } = tunnels\n\n  for (let application of applications) {\n    const { applicationPort } = application.local\n\n    for (let instance of application.instance) {\n      createDevHostProxy(instance.headers, instance.port, applicationPort)\n\n      if (instance.subdomain) {\n        establishTunnel(instance.subdomain, instance.port, applicationPort)\n      }\n    }\n  }\n}\n\nconst tunnels = require('../_configuration/rb-base-tools/tunnels.json')\n\nprocess.on('uncaughtException', function(err) {\n  console.log('uncaughtException:')\n  console.log(err)\n})\n\nstartProxiesAndTunnels(tunnels)\n"],"file":"tunnel.js"}