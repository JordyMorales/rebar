{"version":3,"sources":["../../../units/rb-base-tools/tunnel.js"],"names":["http","require","process","localtunnel","httpProxy","tunnels","createDevHostProxy","headers","proxyPort","serverPort","proxy","createProxyServer","on","proxyReq","req","res","options","headerName","setHeader","server","createServer","web","target","console","log","JSON","stringify","listen","establishTunnel_async","subdomain","applicationPort","port","tunnel","info","err","error","startProxiesAndTunnels","applications","application","local","instance"],"mappings":"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","sourcesContent":["//const { spawn } = require('child_process')\nconst http = require('http')\nconst process = require('process')\n\nconst localtunnel = require('localtunnel')\nconst httpProxy = require('http-proxy')\n\n//\n\nconst tunnels = require('../_configuration/rb-base-tools/tunnels.json')\n\n//\n\nfunction createDevHostProxy(headers, proxyPort, serverPort) {\n  var proxy = httpProxy.createProxyServer({})\n\n  // Add headers\n  proxy.on('proxyReq', function(proxyReq, req, res, options) {\n    for (let headerName in headers) proxyReq.setHeader(headerName, headers[headerName])\n  })\n\n  var server = http.createServer(function(req, res) {\n    // Forward to server port\n    proxy.web(req, res, {\n      target: 'http://127.0.0.1:' + serverPort,\n    })\n  })\n\n  // Listen at proxy port\n  console.log(proxyPort + ' -> ' + serverPort + ' + ' + JSON.stringify(headers))\n  server.listen(proxyPort)\n}\n\n/*\nfunction establishTunnel(domainName, proxyPort, applicationPort) {\n  console.log(\n    'Establishing ' +\n      domainName +\n      '.localtunnel.me - > :' +\n      proxyPort +\n      ' (bound to :' +\n      applicationPort +\n      ')',\n  )\n\n  const child = spawn('./node_modules/.bin/lt', [\n    '--port',\n    '' + proxyPort,\n    '--subdomain',\n    domainName,\n  ])\n\n  child.stdout.on('data', (data) => {\n    console.log('' + data)\n  })\n\n  child.stderr.on('data', (data) => {\n    console.error('' + data)\n  })\n\n  child.on('exit', (code) => {\n    if (code !== 0) {\n      console.error(\n        'lighttunnel for port ' +\n          proxyPort +\n          ' exited with ' +\n          code +\n          ', restarting ...',\n      )\n      setTimeout(() => establishTunnel(domainName, proxyPort))\n    }\n  })\n}\n*/\n\nasync function establishTunnel_async(subdomain, proxyPort, applicationPort) {\n  console.log(\n    'Establishing ' +\n      subdomain +\n      '.localtunnel.me - > :' +\n      proxyPort +\n      ' (bound to :' +\n      applicationPort +\n      ')',\n  )\n\n  console.log({ port: proxyPort, subdomain })\n\n  const tunnel = await localtunnel({ port: proxyPort, subdomain })\n  tunnel.on('close', () => {\n    console.log('Closing tunnel for ' + subdomain + ' on proxy port ' + proxyPort)\n  })\n  tunnel.on('request', (info) => {\n    console.log(info)\n  })\n  tunnel.on('error', (err) => {\n    console.error(err)\n  })\n}\n\nasync function startProxiesAndTunnels(tunnels) {\n  const { applications } = tunnels\n\n  for (let application of applications) {\n    const { applicationPort } = application.local\n\n    for (let instance of application.instance) {\n      createDevHostProxy(instance.headers, instance.port, applicationPort)\n\n      if (instance.subdomain) {\n        await establishTunnel_async(instance.subdomain, instance.port, applicationPort)\n      }\n    }\n  }\n}\n\nprocess.on('uncaughtException', function(err) {\n  console.log('uncaughtException:')\n  console.log(err)\n})\n//\n// Start the proxies\n//\n;(async () => {\n  await startProxiesAndTunnels(tunnels)\n})()\n"],"file":"tunnel.js"}