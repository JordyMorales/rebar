{"version":3,"sources":["../../../../units/rb-persister-cassandra/graphql/WinstonTransportCassandra.js"],"names":["WinstonTransportCassandra","transport","constructor","options","keyspace","Error","client","cql","Client","log","info","callback","setImmediate","emit","level","message","details","self","_insertLog","err","execute","Date","toISOString","slice","util","inspect","prepare","consistency","types","consistencies","quorum"],"mappings":";;AAEA;;AAEA;AACA,2E;;AAEe,MAAMA,yBAAN,SAAwCC,yBAAxC,CAAkD;;;;AAI/DC,EAAAA,WAAW,CAAEC,OAAF,EAAoB;AAC7B,UAAOA,OAAP;;AAEA,QAAK,CAACA,OAAO,CAACC,QAAd,EAAyB;AACvB,YAAM,IAAIC,KAAJ,CAAW,uCAAX,CAAN;AACD;;AAED,SAAKC,MAAL,GAAc,IAAIC,yBAAIC,MAAR,CAAgBL,OAAhB,CAAd;AACD;;AAEDM,EAAAA,GAAG,CAAEC,IAAF,EAAgBC,QAAhB,EAAqC;AACtCC,IAAAA,YAAY,CAAE,MAAM;AAClB,WAAKC,IAAL,CAAW,QAAX,EAAqBH,IAArB;AACD,KAFW,CAAZ;;AAIA,UAAM,EAAEI,KAAF,EAASC,OAAT,EAAkBC,OAAlB,KAA8BN,IAApC;;AAEA,UAAMO,IAAI,GAAG,IAAb;AACA,WAAOA,IAAI,CAACC,UAAL,CAAiBJ,KAAjB,EAAwBC,OAAxB,EAAiCC,OAAjC,EAA0C,UAAUG,GAAV,EAAgB;AAC/DR,MAAAA,QAAQ,CAAEQ,GAAF,EAAO,CAACA,GAAR,CAAR;AACD,KAFM,CAAP;AAGD;;AAEDD,EAAAA,UAAU,CAAEJ,KAAF,EAASC,OAAT,EAAkBC,OAAlB,EAA2BL,QAA3B,EAAsC;AAC9C;AACA,WAAO,KAAKL,MAAL,CAAYc,OAAZ;AACL,+EADK;AAEL,KAAE,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAAgC,CAAhC,EAAmC,EAAnC,CAAF,EAA2C,IAAIF,IAAJ,EAA3C,EAAuDP,KAAvD,EAA8DC,OAA9D,EAAuES,cAAKC,OAAL,CAAcT,OAAd,CAAvE,CAFK;AAGL,MAAEU,OAAO,EAAE,IAAX,EAAiBC,WAAW,EAAEpB,yBAAIqB,KAAJ,CAAUC,aAAV,CAAwBC,MAAtD,EAHK;AAILnB,IAAAA,QAJK,CAAP;;AAMD,GAnC8D,C","sourcesContent":["// @flow\n\nimport util from 'util'\n\nimport transport from 'winston-transport'\nimport cql from 'cassandra-driver'\n\nexport default class WinstonTransportCassandra extends transport {\n  client: Object\n  options: Object\n\n  constructor( options: Object ) {\n    super( options )\n\n    if ( !options.keyspace ) {\n      throw new Error( 'You must specify the options.keyspace' )\n    }\n\n    this.client = new cql.Client( options )\n  }\n\n  log( info: Object, callback: Function ) {\n    setImmediate( () => {\n      this.emit( 'logged', info )\n    })\n\n    const { level, message, details } = info\n\n    const self = this\n    return self._insertLog( level, message, details, function( err ) {\n      callback( err, !err )\n    })\n  }\n\n  _insertLog( level, message, details, callback ) {\n    // Execute as a prepared query as it would be executed multiple times\n    return this.client.execute(\n      'INSERT INTO logs (key, date, level, message, meta) VALUES (?, ?, ?, ?, ?)',\n      [ new Date().toISOString().slice( 0, 10 ), new Date(), level, message, util.inspect( details ) ],\n      { prepare: true, consistency: cql.types.consistencies.quorum },\n      callback,\n    )\n  }\n}\n"],"file":"WinstonTransportCassandra.js"}