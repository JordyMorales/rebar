{"version":3,"sources":["../../../../units/rb-persister-cassandra/graphql/PersisterCassandra.js"],"names":["Uuid","CassandraDriver","types","Uuid_Null_String","Uuid_Null","fromString","ExpressCassandraClient","ExpressCassandra","createClient","clientOptions","CassandraOptions","ormOptions","defaultReplicationStrategy","class","replication_factor","migration","disableTTYConfirmation","createKeyspace","PersisterCassandra","constructor","tableSchemas","Map","getOneObject","entityName","ObjectType","filters","resultPromises","filter","options","raw","allow_filtering","hasOwnProperty","materialized_view","_materialized_view","Object","assign","push","Promise","resolve","reject","updateUuidsInFields","instance","findOne","err","entity","JSON","stringify","message","stack","all","getObjectList","find","arrEntities","arrRetObj","fields","schemaFields","_properties","schema","fieldName","fieldValue","$in","fieldType","add","ttl","_ttl","save","update","remove","delete","createLogger","WinstonTransportCassandra","uuidFromString","str","uuidRandom","random","uuidNull","uuidNullAsString","uuidToString","id","toString","uuidEquals","id1","id2","equals","addTableSchema","tableName","tableSchema","set","console","error","process","exit","confirmHealth","modelInstance","User","get_cql_client","client","execute","result","initialize","runAsPartOfSetupDatabase","cb","enrolledTables","arrSchemas","keys","get","loadOneTableSchemaFromArray","length","splice","log","loadSchema","syncDB","startsWith","name"],"mappings":"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","sourcesContent":["// @flow\n\nimport CassandraDriver from 'cassandra-driver'\nimport ExpressCassandra from 'express-cassandra'\n\nimport CassandraOptions from './CassandraOptions'\nimport WinstonTransportCassandra from './WinstonTransportCassandra'\n\nconst Uuid = CassandraDriver.types.Uuid\nconst Uuid_Null_String = '00000000-0000-0000-0000-000000000000'\nconst Uuid_Null = Uuid.fromString(Uuid_Null_String)\n\nconst ExpressCassandraClient = ExpressCassandra.createClient({\n  clientOptions: CassandraOptions, // Options are pre-set in a separate part of the application, they are correct\n  ormOptions: {\n    defaultReplicationStrategy: {\n      class: 'SimpleStrategy',\n      replication_factor: 1\n    },\n    migration: 'alter',\n    disableTTYConfirmation: true,\n    createKeyspace: true\n  }\n})\n\nexport default class PersisterCassandra {\n  tableSchemas: ?Map<string, Object>\n\n  constructor() {\n    this.tableSchemas = new Map()\n  }\n\n  getOneObject(\n    entityName: string,\n    ObjectType: any,\n    filters: Array<any>\n  ): Promise<any> {\n    const resultPromises = []\n\n    for (let filter of filters) {\n      // Configure our default options\n      let options: Object = {\n        raw: true,\n        allow_filtering: true\n      }\n\n      // In order to use materialized view, we need to pass it to the opions\n      if (filter.hasOwnProperty('_materialized_view')) {\n        // Set option to use materialized view\n        options.materialized_view = filter._materialized_view\n\n        // Remove _materialized_view from filter\n        filter = Object.assign({}, filter)\n        delete filter._materialized_view\n      }\n\n      resultPromises.push(\n        new Promise((resolve, reject) => {\n          try {\n            this.updateUuidsInFields(entityName, filter)\n\n            ExpressCassandraClient.instance[entityName].findOne(\n              filter,\n              options,\n              (err, entity) => {\n                if (err) {\n                  reject(\n                    'getOneObject findOne failed: ' +\n                      JSON.stringify({\n                        entityName,\n                        filter,\n                        message: err.message\n                      })\n                  )\n                } else {\n                  if (entity != null) resolve(new ObjectType(entity))\n                  else resolve(null)\n                }\n              }\n            )\n          } catch (err) {\n            reject(\n              'getOneObject failed: ' +\n                JSON.stringify({\n                  entityName,\n                  filter,\n                  message: err.message,\n                  stack: err.stack\n                })\n            )\n          }\n        })\n      )\n    }\n\n    return Promise.all(resultPromises)\n  }\n\n  getObjectList(\n    entityName: string,\n    ObjectType: any,\n    filters: Array<any>\n  ): Promise<Array<any>> {\n    const resultPromises = []\n\n    for (let filter of filters) {\n      // Configure our default options\n      let options: Object = {\n        raw: true,\n        allow_filtering: true\n      }\n\n      // In order to use materialized view, we need to pass it to the opions\n      if (filter.hasOwnProperty('_materialized_view')) {\n        // Set option to use materialized view\n        options.materialized_view = filter._materialized_view\n\n        // Remove _materialized_view from filter\n        filter = Object.assign({}, filter)\n        delete filter._materialized_view\n      }\n\n      resultPromises.push(\n        new Promise((resolve, reject) => {\n          try {\n            this.updateUuidsInFields(entityName, filter)\n\n            ExpressCassandraClient.instance[entityName].find(\n              filter,\n              options,\n              (err, arrEntities) => {\n                if (err) {\n                  reject(\n                    'getObjectList find failed: ' +\n                      JSON.stringify({\n                        entityName,\n                        filter,\n                        message: err.message\n                      })\n                  )\n                } else {\n                  const arrRetObj = []\n                  for (let entity of arrEntities)\n                    arrRetObj.push(new ObjectType(entity))\n                  resolve(arrRetObj)\n                }\n              }\n            )\n          } catch (err) {\n            reject(\n              'getObjectList failed: ' +\n                JSON.stringify({\n                  entityName,\n                  filter,\n                  message: err.message,\n                  stack: err.stack\n                })\n            )\n          }\n        })\n      )\n    }\n\n    return Promise.all(resultPromises)\n  }\n\n  updateUuidsInFields(entityName: string, fields: any) {\n    const schemaFields =\n      ExpressCassandraClient.instance[entityName]._properties.schema.fields\n\n    for (let fieldName in fields) {\n      const fieldValue = fields[fieldName]\n\n      // $in should only be used with UUID, no strings will be allowed\n      if (fieldValue && fieldValue.$in) continue\n\n      const fieldType = schemaFields[fieldName]\n\n      if (fieldType === 'uuid') {\n        if (!(fieldValue instanceof Uuid)) {\n          fields[fieldName] = Uuid.fromString(fieldValue)\n        }\n      }\n    }\n  }\n\n  add(entityName: string, fields: any): Promise<any> {\n    this.updateUuidsInFields(entityName, fields)\n\n    const options = {}\n\n    // In order to set TTL, we need to pass it to the opions\n    if (fields.hasOwnProperty('_ttl')) {\n      // Set option to use ttl\n      options.ttl = fields._ttl\n\n      // Remove ttl from filter\n      fields = Object.assign({}, fields)\n      delete fields._ttl\n    }\n\n    return new Promise((resolve, reject) => {\n      const entity = new ExpressCassandraClient.instance[entityName](fields)\n      entity.save(options, err => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve()\n        }\n      })\n    })\n  }\n\n  update(entityName: string, fields: any): Promise<null> {\n    // [2 Crossroads][Server] Optimize this with update, possibly. Maybe it's not so bad to read first after all\n    return this.add(entityName, fields)\n  }\n\n  remove(entityName: string, fields: any): Promise<any> {\n    this.updateUuidsInFields(entityName, fields)\n\n    return new Promise((resolve, reject) => {\n      ExpressCassandraClient.instance[entityName].delete(fields, err => {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }\n\n  createLogger() {\n    return new WinstonTransportCassandra(CassandraOptions)\n  }\n\n  uuidFromString(str: string) {\n    return Uuid.fromString(str)\n  }\n\n  uuidRandom() {\n    return Uuid.random()\n  }\n\n  uuidNull() {\n    return Uuid_Null\n  }\n\n  uuidNullAsString() {\n    return Uuid_Null_String\n  }\n\n  uuidToString(id: any): string {\n    if (id instanceof Uuid) id = id.toString()\n\n    return id\n  }\n\n  uuidEquals(id1: any, id2: any): boolean {\n    return id1.equals(id2)\n  }\n\n  addTableSchema(tableName: string, tableSchema: Object): void {\n    if (this.tableSchemas) this.tableSchemas.set(tableName, tableSchema)\n    else {\n      console.error(\n        'Error: Attempting to add table schemas after express-cassandra client connect.'\n      )\n      process.exit(1)\n    }\n  }\n\n  confirmHealth(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      ExpressCassandraClient.modelInstance.User.get_cql_client(\n        (err, client) => {\n          if (err) reject(err)\n          else\n            client.execute(\n              'select release_version from system.local;',\n              (err, result) => {\n                if (err) reject(err)\n                else resolve()\n              }\n            )\n        }\n      )\n    })\n  }\n\n  initialize(runAsPartOfSetupDatabase: boolean, cb: Function): void {\n    // All table schemas should have been added by now.\n    const enrolledTables = this.tableSchemas\n    this.tableSchemas = null // Free up the memory that is not needed any more and indicate that we can not add any more\n\n    const arrSchemas = []\n    // $AssureFlow enrolledTables should be populated here\n    for (let tableName of enrolledTables.keys()) {\n      // $AssureFlow enrolledTables should be populated here\n      arrSchemas.push([tableName, enrolledTables.get(tableName)])\n    }\n    this.loadOneTableSchemaFromArray(arrSchemas, runAsPartOfSetupDatabase, cb)\n  }\n\n  loadOneTableSchemaFromArray(\n    arrSchemas: Array<any>,\n    runAsPartOfSetupDatabase: boolean,\n    cb: Function\n  ): void {\n    if (arrSchemas.length > 0) {\n      const tableName = arrSchemas[0][0]\n      const tableSchema = arrSchemas[0][1]\n      arrSchemas.splice(0, 1)\n\n      if (runAsPartOfSetupDatabase) {\n        console.log(' Prepare table ' + tableName + '.')\n      }\n      ExpressCassandraClient.loadSchema(tableName, tableSchema).syncDB(err => {\n        // When used with scylla, this always happens. Just ignore the message\n        if (\n          err &&\n          err.message.startsWith(\n            'Given Schema does not match existing DB Table'\n          )\n        ) {\n          err = null\n        }\n\n        if (err) {\n          console.log(\n            'Error:  Initializing Cassandra persister - error while creating ' +\n              tableName +\n              '!'\n          )\n          console.error(err.message)\n          process.exit(1)\n        } else {\n          if (runAsPartOfSetupDatabase)\n            console.log(\n              ' Table ' +\n                ExpressCassandraClient.modelInstance[tableName]._properties\n                  .name +\n                ' ready.'\n            )\n          this.loadOneTableSchemaFromArray(\n            arrSchemas,\n            runAsPartOfSetupDatabase,\n            cb\n          )\n          // Load the next table\n          return\n        }\n      })\n    } else {\n      cb()\n    }\n  }\n}\n"],"file":"PersisterCassandra.js"}