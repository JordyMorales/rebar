{"version":3,"sources":["../../../../../units/rb-example-todo-server/graphql/mutation/ToDoUpdateStatus.js"],"names":["name","inputFields","id","type","GraphQLNonNull","GraphQLID","ToDo_Complete","GraphQLBoolean","outputFields","ToDo","ToDoType","resolve","local_id","args","context","rootValue","objectManager","getOneObject_async","Viewer","ViewerType","parent","getViewerUserId","mutateAndGetPayload","update"],"mappings":";;AAEA;AACA;;AAEA;AACA,iH,8FANA;;AAQe,gDAA6B;AAC1CA,EAAAA,IAAI,EAAE,kBADoC;;AAG1CC,EAAAA,WAAW,EAAE;AACXC,IAAAA,EAAE,EAAE,EAAEC,IAAI,EAAE,IAAIC,uBAAJ,CAAoBC,kBAApB,CAAR,EADO;AAEXC,IAAAA,aAAa,EAAE,EAAEH,IAAI,EAAE,IAAIC,uBAAJ,CAAoBG,uBAApB,CAAR,EAFJ,EAH6B;;;AAQ1CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE;AACJN,MAAAA,IAAI,EAAEO,iBADF;AAEJC,MAAAA,OAAO,EAAE,CAAC,EAAEC,QAAF,EAAD,EAAe,EAAE,GAAGC,IAAL,EAAf,EAA4BC,OAA5B,EAAqC,EAAEC,SAAS,EAAEC,aAAb,EAArC;AACPA,MAAAA,aAAa,CAACC,kBAAd,CAAkC,MAAlC,EAA0C,EAAEf,EAAE,EAAEU,QAAN,EAA1C,CAHE,EADM;;;AAOZM,IAAAA,MAAM,EAAE;AACNf,MAAAA,IAAI,EAAEgB,mBADA;AAENR,MAAAA,OAAO,EAAE,CAAES,MAAF,EAAUP,IAAV,EAAgBC,OAAhB,EAAyB,EAAEC,SAAS,EAAEC,aAAb,EAAzB;AACPA,MAAAA,aAAa,CAACC,kBAAd,CAAkC,MAAlC,EAA0C;AACxCf,QAAAA,EAAE,EAAEc,aAAa,CAACK,eAAd,EADoC,EAA1C,CAHI,EAPI,EAR4B;;;;;AAwB1CC,EAAAA,mBAAmB,EAAE,OAAM,EAAEpB,EAAF,EAAMI,aAAN,EAAN,EAA6BQ,OAA7B,EAAsC,EAAEC,SAAS,EAAEC,aAAb,EAAtC,KAAuE;AAC1F,UAAMJ,QAAQ,GAAG,gCAAcV,EAAd,EAAmBA,EAApC;;AAEA,UAAMc,aAAa,CAACO,MAAd,CAAsB,MAAtB,EAA8B;AAClCrB,MAAAA,EAAE,EAAEU,QAD8B;AAElCN,MAAAA,aAFkC,EAA9B,CAAN;;;AAKA,WAAO,EAAEM,QAAF,EAAP;AACD,GAjCyC,EAA7B,C","sourcesContent":["// @flow weak\n\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLBoolean, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport ToDoType from '../type/ToDoType'\nimport ViewerType from '../../../../units/rb-appbase-server/graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'ToDoUpdateStatus',\n\n  inputFields: {\n    id: { type: new GraphQLNonNull( GraphQLID ) },\n    ToDo_Complete: { type: new GraphQLNonNull( GraphQLBoolean ) },\n  },\n\n  outputFields: {\n    ToDo: {\n      type: ToDoType,\n      resolve: ({ local_id }, { ...args }, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject_async( 'ToDo', { id: local_id }),\n    },\n\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject_async( 'User', {\n          id: objectManager.getViewerUserId(),\n        }),\n    },\n  },\n\n  mutateAndGetPayload: async({ id, ToDo_Complete }, context, { rootValue: objectManager }) => {\n    const local_id = fromGlobalId( id ).id\n\n    await objectManager.update( 'ToDo', {\n      id: local_id,\n      ToDo_Complete,\n    })\n\n    return { local_id }\n  },\n})\n"],"file":"ToDoUpdateStatus.js"}