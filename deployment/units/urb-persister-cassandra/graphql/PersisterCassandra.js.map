{"version":3,"sources":["../../../../units/urb-persister-cassandra/graphql/PersisterCassandra.js"],"names":["Uuid","CassandraDriver","types","Uuid_Null_String","Uuid_Null","fromString","ExpressCassandraClient","ExpressCassandra","createClient","clientOptions","CassandraOptions","ormOptions","defaultReplicationStrategy","class","replication_factor","migration","disableTTYConfirmation","createKeyspace","PersisterCassandra","constructor","tableSchemas","Map","getOneObject","entityName","ObjectType","filters","resultPromises","filter","options","raw","allow_filtering","hasOwnProperty","materialized_view","_materialized_view","Object","assign","push","Promise","resolve","reject","updateUuidsInFields","instance","findOne","err","entity","JSON","stringify","message","stack","all","getObjectList","find","arrEntities","arrRetObj","fields","schemaFields","_properties","schema","fieldName","fieldType","fieldValue","add","save","update","remove","delete","createLogger","WinstonCassandra","uuidFromString","str","uuidRandom","random","uuidNull","uuidNullAsString","uuidToString","id","toString","uuidEquals","id1","id2","equals","addTableSchema","tableName","tableSchema","set","console","error","process","exit","confirmHealth","modelInstance","User","get_cql_client","client","execute","result","initialize","runAsPartOfSetupDatabase","cb","enrolledTables","arrSchemas","keys","get","loadOneTableSchemaFromArray","length","splice","log","loadSchema","syncDB","name"],"mappings":"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","file":"PersisterCassandra.js","sourcesContent":["// @flow\n\nimport CassandraDriver from 'cassandra-driver'\nimport ExpressCassandra from 'express-cassandra'\n\nimport CassandraOptions from './CassandraOptions'\nimport WinstonCassandra from './WinstonCassandra'\n\nconst Uuid = CassandraDriver.types.Uuid\nconst Uuid_Null_String = '00000000-0000-0000-0000-000000000000'\nconst Uuid_Null = Uuid.fromString( Uuid_Null_String )\n\nconst ExpressCassandraClient = ExpressCassandra.createClient({\n  clientOptions: CassandraOptions, // Options are pre-set in a separate part of the application, they are correct\n  ormOptions: {\n    defaultReplicationStrategy: {\n      class: 'SimpleStrategy',\n      replication_factor: 1,\n    },\n    migration: 'alter',\n    disableTTYConfirmation: true,\n    createKeyspace: true,\n  },\n})\n\nexport default class PersisterCassandra {\n  tableSchemas: ?Map<string, Object>\n\n  constructor() {\n    this.tableSchemas = new Map()\n  }\n\n  getOneObject( entityName: string, ObjectType: any, filters: Array<any> ): Promise<any> {\n    const resultPromises = []\n\n    for ( let filter of filters ) {\n      // Configure our default options\n      let options: Object = {\n        raw: true,\n        allow_filtering: true,\n      }\n\n      // In order to use materialized view, we need to pass it to the opions\n      if ( filter.hasOwnProperty( '_materialized_view' ) ) {\n        // Set option to use materialized view\n        options.materialized_view = filter._materialized_view\n\n        // Remove _materialized_view from filter\n        filter = Object.assign({}, filter )\n        delete filter._materialized_view\n      }\n\n      resultPromises.push(\n        new Promise( ( resolve, reject ) => {\n          try {\n            this.updateUuidsInFields( entityName, filter )\n\n            ExpressCassandraClient.instance[entityName].findOne( filter, options, ( err, entity ) => {\n              if ( err )\n                reject(\n                  'getOneObject findOne failed: ' +\n                    JSON.stringify({ entityName, filters, message: err.message }),\n                )\n              else {\n                if ( entity != null ) resolve( new ObjectType( entity ) )\n                else resolve( null )\n              }\n            })\n          } catch ( err ) {\n            reject(\n              'getOneObject failed: ' +\n                JSON.stringify({ entityName, filters, message: err.message, stack: err.stack }),\n            )\n          }\n        }),\n      )\n    }\n\n    return Promise.all( resultPromises )\n  }\n\n  getObjectList( entityName: string, ObjectType: any, filters: Array<any> ): Promise<Array<any>> {\n    const resultPromises = []\n\n    for ( let filter of filters ) {\n      // Configure our default options\n      let options: Object = {\n        raw: true,\n        allow_filtering: true,\n      }\n\n      // In order to use materialized view, we need to pass it to the opions\n      if ( filter.hasOwnProperty( '_materialized_view' ) ) {\n        // Set option to use materialized view\n        options.materialized_view = filter._materialized_view\n\n        // Remove _materialized_view from filter\n        filter = Object.assign({}, filter )\n        delete filter._materialized_view\n      }\n\n      resultPromises.push(\n        new Promise( ( resolve, reject ) => {\n          try {\n            this.updateUuidsInFields( entityName, filter )\n\n            ExpressCassandraClient.instance[entityName].find(\n              filter,\n              options,\n              ( err, arrEntities ) => {\n                if ( err )\n                  reject(\n                    'getObjectList find failed: ' +\n                      JSON.stringify({ entityName, filters, message: err.message }),\n                  )\n                else {\n                  const arrRetObj = []\n                  for ( let entity of arrEntities ) arrRetObj.push( new ObjectType( entity ) )\n                  resolve( arrRetObj )\n                }\n              },\n            )\n          } catch ( err ) {\n            reject(\n              'getObjectList failed: ' +\n                JSON.stringify({ entityName, filters, message: err.message, stack: err.stack }),\n            )\n          }\n        }),\n      )\n    }\n\n    return Promise.all( resultPromises )\n  }\n\n  updateUuidsInFields( entityName: string, fields: any ) {\n    const schemaFields = ExpressCassandraClient.instance[entityName]._properties.schema.fields\n\n    for ( let fieldName in fields ) {\n      const fieldType = schemaFields[fieldName]\n\n      if ( fieldType === 'uuid' ) {\n        const fieldValue = fields[fieldName]\n        if ( !( fieldValue instanceof Uuid ) ) {\n          fields[fieldName] = Uuid.fromString( fieldValue )\n        }\n      }\n    }\n  }\n\n  add( entityName: string, fields: any ): Promise<any> {\n    this.updateUuidsInFields( entityName, fields )\n\n    return new Promise( ( resolve, reject ) => {\n      const entity = new ExpressCassandraClient.instance[entityName]( fields )\n      entity.save( err => {\n        if ( err ) reject( err )\n        else resolve()\n      })\n    })\n  }\n\n  update( entityName: string, fields: any ): Promise<null> {\n    // TODO x2000 Optimize this with update, possibly. Maybe it's not so bad to read first after all\n    return this.add( entityName, fields )\n  }\n\n  remove( entityName: string, fields: any ): Promise<any> {\n    this.updateUuidsInFields( entityName, fields )\n\n    return new Promise( ( resolve, reject ) => {\n      ExpressCassandraClient.instance[entityName].delete( fields, err => {\n        if ( err ) reject( err )\n        else resolve()\n      })\n    })\n  }\n\n  createLogger() {\n    return new WinstonCassandra( CassandraOptions )\n  }\n\n  uuidFromString( str: string ) {\n    return Uuid.fromString( str )\n  }\n\n  uuidRandom() {\n    return Uuid.random()\n  }\n\n  uuidNull() {\n    return Uuid_Null\n  }\n\n  uuidNullAsString() {\n    return Uuid_Null_String\n  }\n\n  uuidToString( id: any ): string {\n    if ( id instanceof Uuid ) id = id.toString()\n\n    return id\n  }\n\n  uuidEquals( id1: any, id2: any ): boolean {\n    return id1.equals( id2 )\n  }\n\n  addTableSchema( tableName: string, tableSchema: Object ): void {\n    if ( this.tableSchemas ) this.tableSchemas.set( tableName, tableSchema )\n    else {\n      console.error(\n        'Error: Attempting to add table schemas after express-cassandra client connect.',\n      )\n      process.exit( 1 )\n    }\n  }\n\n  confirmHealth(): Promise<any> {\n    return new Promise( ( resolve, reject ) => {\n      ExpressCassandraClient.modelInstance.User.get_cql_client( ( err, client ) => {\n        if ( err ) reject( err )\n        else\n          client.execute( 'select release_version from system.local;', ( err, result ) => {\n            if ( err ) reject( err )\n            else resolve()\n          })\n      })\n    })\n  }\n\n  initialize( runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n    // All table schemas should have been added by now.\n    const enrolledTables = this.tableSchemas\n    this.tableSchemas = null // Free up the memory that is not needed any more and indicate that we can not add any more\n\n    const arrSchemas = []\n    // $AssureFlow enrolledTables should be populated here\n    for ( let tableName of enrolledTables.keys() ) {\n      // $AssureFlow enrolledTables should be populated here\n      arrSchemas.push([ tableName, enrolledTables.get( tableName ) ])\n    }\n    this.loadOneTableSchemaFromArray( arrSchemas, runAsPartOfSetupDatabase, cb )\n  }\n\n  loadOneTableSchemaFromArray(\n    arrSchemas: Array<any>,\n    runAsPartOfSetupDatabase: boolean,\n    cb: Function,\n  ): void {\n    if ( arrSchemas.length > 0 ) {\n      const tableName = arrSchemas[0][0]\n      const tableSchema = arrSchemas[0][1]\n      arrSchemas.splice( 0, 1 )\n\n      if ( runAsPartOfSetupDatabase ) {\n        console.log( ' Prepare table ' + tableName + '.' )\n      }\n      ExpressCassandraClient.loadSchema( tableName, tableSchema ).syncDB( err => {\n        if ( err ) {\n          console.log(\n            'Error:  Initializing Cassandra persister - error while creating ' + tableName + '!',\n          )\n          console.error( err.message )\n          process.exit( 1 )\n        } else {\n          if ( runAsPartOfSetupDatabase )\n            console.log(\n              ' Table ' +\n                ExpressCassandraClient.modelInstance[tableName]._properties.name +\n                ' ready.',\n            )\n          this.loadOneTableSchemaFromArray( arrSchemas, runAsPartOfSetupDatabase, cb )\n          // Load the next table\n          return\n        }\n      })\n    } else {\n      cb()\n    }\n  }\n}\n"]}