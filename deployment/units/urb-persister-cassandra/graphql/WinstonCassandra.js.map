{"version":3,"sources":["../../../../units/urb-persister-cassandra/graphql/WinstonCassandra.js"],"names":["defaultOptions","table","partitionBy","consistency","cql","types","consistencies","quorum","level","name","Cassandra","options","Error","keyspace","Object","assign","schemaStatus","events","EventEmitter","setMaxListeners","client","Client","util","inherits","winston","Transport","prototype","log","msg","meta","callback","self","_insertLog","err","getKey","Date","toISOString","slice","key","execute","inspect","prepare","transports","module","exports"],"mappings":";;AAEA,4B;AACA,gC;;AAEA,kC;AACA,mD;;AAEA,IAAIA,iBAAiB;AACnB;AACAC,SAAO,MAFY;AAGnB;AACAC,eAAa,KAJM;AAKnBC,eAAaC,0BAAIC,KAAJ,CAAUC,aAAV,CAAwBC,MALlB;AAMnBC,SAAO,MANY;AAOnBC,QAAM,WAPa,EAArB;;;AAUA,SAASC,SAAT,CAAoBC,OAApB,EAAsC;AACpC,MAAK,CAACA,OAAN,EAAgB;AACd,UAAM,IAAIC,KAAJ,CAAW,+BAAX,CAAN;AACD;;AAED,MAAK,CAACD,QAAQE,QAAd,EAAyB;AACvB,UAAM,IAAID,KAAJ,CAAW,uCAAX,CAAN;AACD;;AAED,OAAKD,OAAL,GAAeG,OAAOC,MAAP,CAAc,EAAd,EAAkBf,cAAlB,EAAkCW,OAAlC,CAAf;;AAEA;AACA,OAAKF,IAAL,GAAY,KAAKE,OAAL,CAAaF,IAAzB;AACA,OAAKD,KAAL,GAAa,KAAKG,OAAL,CAAaH,KAA1B;;AAEA;AACA,OAAKQ,YAAL,GAAoB,IAAIC,iBAAOC,YAAX,EAApB;AACA,OAAKF,YAAL,CAAkBG,eAAlB,CAAmC,CAAnC;AACA,OAAKC,MAAL,GAAc,IAAIhB,0BAAIiB,MAAR,CAAgB,KAAKV,OAArB,CAAd;AACD;;AAEDW,eAAKC,QAAL,CAAeb,SAAf,EAA0Bc,kBAAQC,SAAlC;;AAEAf,UAAUgB,SAAV,CAAoBC,GAApB,GAA0B,UAAUnB,KAAV,EAAiBoB,GAAjB,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAuC;AAC/D,MAAIC,OAAO,IAAX;AACA,SAAOA,KAAKC,UAAL,CAAiBxB,KAAjB,EAAwBoB,GAAxB,EAA6BC,IAA7B,EAAmC,UAAUI,GAAV,EAAgB;AACxDH,aAAUG,GAAV,EAAe,CAACA,GAAhB;AACD,GAFM,CAAP;AAGD,CALD;;AAOA;;;AAGAvB,UAAUgB,SAAV,CAAoBQ,MAApB,GAA6B,YAAW;AACtC,MAAK,KAAKvB,OAAL,CAAaT,WAAb,KAA6B,KAAlC,EAA0C;AACxC,WAAO,IAAIiC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAAgC,CAAhC,EAAmC,EAAnC,CAAP;AACD,GAFD,MAEO,IAAK,KAAK1B,OAAL,CAAaT,WAAb,KAA6B,MAAlC,EAA2C;AAChD,WAAO,IAAIiC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAAgC,CAAhC,EAAmC,EAAnC,CAAP;AACD;AACD,SAAO,IAAP;AACD,CAPD;;AASA;;;AAGA3B,UAAUgB,SAAV,CAAoBM,UAApB,GAAiC,UAAUxB,KAAV,EAAiBoB,GAAjB,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAuC;AACtE,MAAIQ,MAAM,KAAKJ,MAAL,EAAV;AACA,MAAK,CAACI,GAAN,EAAY;AACV,WAAOR,SAAU,IAAIlB,KAAJ,CAAW,eAAe,KAAKD,OAAL,CAAaT,WAA5B,GAA0C,gBAArD,CAAV,EAAmF,KAAnF,CAAP;AACD;AACD;AACA,SAAO,KAAKkB,MAAL,CAAYmB,OAAZ;AACL;AACE,OAAK5B,OAAL,CAAaV,KADf;AAEE,6DAHG;AAIL,GAAEqC,GAAF,EAAO,IAAIH,IAAJ,EAAP,EAAmB3B,KAAnB,EAA0BoB,GAA1B,EAA+BN,eAAKkB,OAAL,CAAcX,IAAd,CAA/B,CAJK;AAKL,IAAEY,SAAS,IAAX,EAAiBtC,aAAa,KAAKQ,OAAL,CAAaR,WAA3C,EALK;AAML2B,UANK,CAAP;;AAQD,CAdD;;AAgBA;AACAN,kBAAQkB,UAAR,CAAmBhC,SAAnB,GAA+BA,SAA/B;AACAiC,OAAOC,OAAP,GAAiBlC,SAAjB;AACA;AACA;AACAiC,OAAOC,OAAP,CAAelC,SAAf,GAA2BA,SAA3B;AACAiC,OAAOC,OAAP,CAAevC,KAAf,GAAuBD,0BAAIC,KAA3B","file":"WinstonCassandra.js","sourcesContent":["// @flow\n\nimport util from 'util'\nimport events from 'events'\n\nimport winston from 'winston'\nimport cql from 'cassandra-driver'\n\nvar defaultOptions = {\n  //column family to store the logs\n  table: 'logs',\n  //determines if the partition key is changed per day or hour\n  partitionBy: 'day',\n  consistency: cql.types.consistencies.quorum,\n  level: 'info',\n  name: 'cassandra',\n}\n\nfunction Cassandra( options: Object ) {\n  if ( !options ) {\n    throw new Error( 'Transport options is required' )\n  }\n\n  if ( !options.keyspace ) {\n    throw new Error( 'You must specify the options.keyspace' )\n  }\n\n  this.options = Object.assign({}, defaultOptions, options )\n\n  //winston options\n  this.name = this.options.name\n  this.level = this.options.level\n\n  //create a queue object that will emit the event 'prepared'\n  this.schemaStatus = new events.EventEmitter()\n  this.schemaStatus.setMaxListeners( 0 )\n  this.client = new cql.Client( this.options )\n}\n\nutil.inherits( Cassandra, winston.Transport )\n\nCassandra.prototype.log = function( level, msg, meta, callback ) {\n  var self = this\n  return self._insertLog( level, msg, meta, function( err ) {\n    callback( err, !err )\n  })\n}\n\n/**\n * Gets the log partition key\n */\nCassandra.prototype.getKey = function() {\n  if ( this.options.partitionBy === 'day' ) {\n    return new Date().toISOString().slice( 0, 10 )\n  } else if ( this.options.partitionBy === 'hour' ) {\n    return new Date().toISOString().slice( 0, 13 )\n  }\n  return null\n}\n\n/**\n * Inserts the log in the db\n */\nCassandra.prototype._insertLog = function( level, msg, meta, callback ) {\n  var key = this.getKey()\n  if ( !key ) {\n    return callback( new Error( 'Partition ' + this.options.partitionBy + ' not supported' ), false )\n  }\n  //execute as a prepared query as it would be executed multiple times\n  return this.client.execute(\n    'INSERT INTO ' +\n      this.options.table +\n      ' (key, date, level, message, meta) VALUES (?, ?, ?, ?, ?)',\n    [ key, new Date(), level, msg, util.inspect( meta ) ],\n    { prepare: true, consistency: this.options.consistency },\n    callback,\n  )\n}\n\n//Define as a property of winston transports for backward compatibility\nwinston.transports.Cassandra = Cassandra\nmodule.exports = Cassandra\n//The rest of winston transports uses (module).name convention\n//Create a field to allow consumers to interact in the same way\nmodule.exports.Cassandra = Cassandra\nmodule.exports.types = cql.types\n"]}