{"version":3,"sources":["../../../units/rb-base-server/logServerRequest.js"],"names":["logServerRequest","req","res","next","loggingFunction","oldWriteRes","write","oldEndRes","end","chunksRes","chunk","push","Buffer","from","apply","arguments","responseBody","concat","toString","clientIP","headers","connection","remoteAddress","user","injectedByRebarFrameworks","requestAndResponse","cookies","query","body","response"],"mappings":"+GAAA;;AAEA;AACe,SAASA,gBAAT,CAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,eAA3C,EAA6D;AAC1E,QAAMC,WAAW,GAAGH,GAAG,CAACI,KAAxB;AACA,QAAMC,SAAS,GAAGL,GAAG,CAACM,GAAtB;;AAEA,QAAMC,SAAS,GAAG,EAAlB;;AAEAP,EAAAA,GAAG,CAACI,KAAJ,GAAY,UAAUI,KAAV,EAAkB;AAC5BD,IAAAA,SAAS,CAACE,IAAV,CAAgBC,MAAM,CAACC,IAAP,CAAaH,KAAb,CAAhB;AACAL,IAAAA,WAAW,CAACS,KAAZ,CAAmBZ,GAAnB,EAAwBa,SAAxB;AACD,GAHD;;AAKAb,EAAAA,GAAG,CAACM,GAAJ,GAAU,UAAUE,KAAV,EAAkB;AAC1B,QAAKA,KAAL,EAAaD,SAAS,CAACE,IAAV,CAAgBC,MAAM,CAACC,IAAP,CAAaH,KAAb,CAAhB;;AAEb,QAAIM,YAAY,GAAGJ,MAAM,CAACK,MAAP,CAAeR,SAAf,EAA2BS,QAA3B,CAAqC,MAArC,CAAnB;;AAEA;AACA,UAAMC,QAAQ,GAAGlB,GAAG,CAACmB,OAAJ,CAAY,WAAZ,KAA4BnB,GAAG,CAACoB,UAAJ,CAAeC,aAA5D;;AAEA,QAAIC,IAAJ;AACA,QAAKrB,GAAG,CAACsB,yBAAJ,IAAiCtB,GAAG,CAACsB,yBAAJ,CAA8BD,IAApE;AACEA,IAAAA,IAAI,GAAGrB,GAAG,CAACsB,yBAAJ,CAA8BD,IAArC,CADF;AAEKA,IAAAA,IAAI,GAAG,gBAAP;;AAEL,UAAME,kBAAkB,GAAG;AACzBL,MAAAA,OAAO,EAAEnB,GAAG,CAACmB,OADY;AAEzBM,MAAAA,OAAO,EAAEzB,GAAG,CAACyB,OAFY;AAGzBH,MAAAA,IAAI,EAAEA,IAHmB;AAIzBI,MAAAA,KAAK,EAAE1B,GAAG,CAAC2B,IAJc;AAKzBC,MAAAA,QAAQ,EAAEb,YALe;AAMzBG,MAAAA,QANyB,EAA3B;;;AASAf,IAAAA,eAAe,CAAEqB,kBAAF,CAAf;;AAEAlB,IAAAA,SAAS,CAACO,KAAV,CAAiBZ,GAAjB,EAAsBa,SAAtB;AACD,GAzBD;;AA2BAZ,EAAAA,IAAI;AACL","sourcesContent":["// @flow weak\n\n// Function to log requests\nexport default function logServerRequest( req, res, next, loggingFunction ) {\n  const oldWriteRes = res.write\n  const oldEndRes = res.end\n\n  const chunksRes = []\n\n  res.write = function( chunk ) {\n    chunksRes.push( Buffer.from( chunk ) )\n    oldWriteRes.apply( res, arguments )\n  }\n\n  res.end = function( chunk ) {\n    if ( chunk ) chunksRes.push( Buffer.from( chunk ) )\n\n    var responseBody = Buffer.concat( chunksRes ).toString( 'utf8' )\n\n    // Determine client ID - either placed in the headers by Nginx, or the IP the request is coming from\n    const clientIP = req.headers['x-real-ip'] || req.connection.remoteAddress\n\n    let user\n    if ( res.injectedByRebarFrameworks && res.injectedByRebarFrameworks.user )\n      user = res.injectedByRebarFrameworks.user\n    else user = 'not determined'\n\n    const requestAndResponse = {\n      headers: req.headers,\n      cookies: req.cookies,\n      user: user,\n      query: req.body,\n      response: responseBody,\n      clientIP,\n    }\n\n    loggingFunction( requestAndResponse )\n\n    oldEndRes.apply( res, arguments )\n  }\n\n  next()\n}\n"],"file":"logServerRequest.js"}