{"version":3,"sources":["../../../units/rb-base-server/logServerRequest.js"],"names":["logServerRequest","req","res","next","loggingFunction","oldWriteRes","write","oldEndRes","end","chunksRes","chunk","push","Buffer","from","apply","arguments","clientIP","headers","connection","remoteAddress","userSession","injectedByRebarFrameworks"],"mappings":"+GAAA;;AAEA;AACe,SAASA,gBAAT,CAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,eAA3C,EAA6D;AAC1E,QAAMC,WAAW,GAAGH,GAAG,CAACI,KAAxB;AACA,QAAMC,SAAS,GAAGL,GAAG,CAACM,GAAtB;;AAEA,QAAMC,SAAS,GAAG,EAAlB;;AAEAP,EAAAA,GAAG,CAACI,KAAJ,GAAY,UAAUI,KAAV,EAAkB;AAC5BD,IAAAA,SAAS,CAACE,IAAV,CAAgBC,MAAM,CAACC,IAAP,CAAaH,KAAb,CAAhB;AACAL,IAAAA,WAAW,CAACS,KAAZ,CAAmBZ,GAAnB,EAAwBa,SAAxB;AACD,GAHD;;AAKAb,EAAAA,GAAG,CAACM,GAAJ,GAAU,UAAUE,KAAV,EAAkB;AAC1B,QAAKA,KAAL,EAAaD,SAAS,CAACE,IAAV,CAAgBC,MAAM,CAACC,IAAP,CAAaH,KAAb,CAAhB;;AAEb;AACA,UAAMM,QAAQ,GAAGf,GAAG,CAACgB,OAAJ,CAAY,WAAZ,KAA4BhB,GAAG,CAACiB,UAAJ,CAAeC,aAA5D;;AAEA,QAAIC,WAAJ;AACA,QAAKlB,GAAG,CAACmB,yBAAJ,IAAiCnB,GAAG,CAACmB,yBAAJ,CAA8BD,WAApE;AACEA,IAAAA,WAAW,GAAGlB,GAAG,CAACmB,yBAAJ,CAA8BD,WAA5C,CADF;AAEKA,IAAAA,WAAW,GAAG,gBAAd;;AAELhB,IAAAA,eAAe,CAAC,EAAEH,GAAF,EAAOe,QAAP,EAAiBI,WAAjB,EAAD,CAAf;;AAEAb,IAAAA,SAAS,CAACO,KAAV,CAAiBZ,GAAjB,EAAsBa,SAAtB;AACD,GAdD;;AAgBAZ,EAAAA,IAAI;AACL","sourcesContent":["// @flow weak\n\n// Function to log requests\nexport default function logServerRequest( req, res, next, loggingFunction ) {\n  const oldWriteRes = res.write\n  const oldEndRes = res.end\n\n  const chunksRes = []\n\n  res.write = function( chunk ) {\n    chunksRes.push( Buffer.from( chunk ) )\n    oldWriteRes.apply( res, arguments )\n  }\n\n  res.end = function( chunk ) {\n    if ( chunk ) chunksRes.push( Buffer.from( chunk ) )\n\n    // Determine client ID - either placed in the headers by Nginx, or the IP the request is coming from\n    const clientIP = req.headers['x-real-ip'] || req.connection.remoteAddress\n\n    let userSession\n    if ( res.injectedByRebarFrameworks && res.injectedByRebarFrameworks.userSession )\n      userSession = res.injectedByRebarFrameworks.userSession\n    else userSession = 'not determined'\n\n    loggingFunction({ req, clientIP, userSession })\n\n    oldEndRes.apply( res, arguments )\n  }\n\n  next()\n}\n"],"file":"logServerRequest.js"}