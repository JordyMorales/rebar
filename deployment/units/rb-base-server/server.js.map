{"version":3,"sources":["../../../units/rb-base-server/server.js"],"names":["require","load","port","process","env","PORT","Error","host","HOST","log","level","message","details","name","version","NODE_ENV","PUBLIC_URL","process_title","title","process_pid","pid","local_ip","server","use","req","res","next","setHeader","set","serverHealthz","express","static","path","resolve","__dirname","maxAge","ObjectManager","initializePersisters","listen","startDevelopmentServer","localIPDevelopmentServer"],"mappings":"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","sourcesContent":["// @flow\n\n// In order to use ES7 async/await\n//import 'babel-polyfill'\n\nimport path from 'path'\n\nimport express from 'express'\nimport compression from 'compression'\nimport cookieParser from 'cookie-parser'\n\nimport { name, version } from '../../package.json'\nimport servers from '../_configuration/rb-base-server/servers'\n\nimport getLocalIP from './getLocalIP'\nimport log from './log'\nimport { initializeObjectCache } from './ObjectCache'\nimport ObjectManager from './ObjectManager'\nimport serverHealthz from './serverHealthz' // Health check endpoint server\n\n//\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst port = process.env.PORT\nif ( port == null || typeof port !== 'string' )\n  throw new Error( 'rb-base-server/server.js requires the environment variable PORT to be set' )\n\nconst host = process.env.HOST\nif ( host == null || typeof host !== 'string' )\n  throw new Error( 'rb-base-server/server.js requires the environment variable HOST to be set' ) // Log startup information\n\nlog.log({\n  level: 'info',\n  message: 'Starting application',\n  details: {\n    name: name,\n    version: version,\n    NODE_ENV: process.env.NODE_ENV,\n    HOST: process.env.HOST,\n    PORT: process.env.PORT,\n    PUBLIC_URL: process.env.PUBLIC_URL,\n    process_title: process.title,\n    process_pid: process.pid,\n    local_ip: getLocalIP(),\n  },\n})\n\n// Get object cache ready\ninitializeObjectCache()\n\n// Main router\nconst server = express()\n\n// Add headers\nserver.use( function( req, res, next ) {\n  // Website you wish to allow to connect\n  res.setHeader( 'Access-Control-Allow-Origin', process.env.PUBLIC_URL )\n\n  // Request methods you wish to allow\n  res.setHeader( 'Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE' )\n\n  // Request headers you wish to allow\n  res.setHeader( 'Access-Control-Allow-Headers', 'X-Requested-With,content-type' )\n\n  // Set to true if you need the website to include cookies in the requests sent\n  // to the API (e.g. in case you use sessions)\n  res.setHeader( 'Access-Control-Allow-Credentials', true )\n\n  // Pass to next layer of middleware\n  next()\n}) // Configure main router\n\nserver.set( 'trust proxy', 'loopback' )\nserver.set( 'x-powered-by', false )\nserver.use( compression() )\nserver.use( cookieParser() ) // GraphQL server requires this\n\nserver.use( '/healthz', serverHealthz ) // Static public files server\nserver.use(\n  express.static( path.resolve( __dirname + '/../_configuration/rb-base-server/public_files/' ), {\n    maxAge: 365 * 86400, // one year\n  }),\n)\n\n// Initialize server extenders\nservers( server )\n\nObjectManager.initializePersisters( false, () => {\n  // Serve - work differently in development and production. In production only the\n  // specified host serves\n  if ( process.env.NODE_ENV === 'production' ) {\n    // Production - serve as told\n    server.listen( port, host )\n  } else {\n    // Development server - localhost. Always run on localhost\n    startDevelopmentServer( port, '127.0.0.1' )\n    // Development server - on a specific IP, if different from localhost\n    if ( host !== '127.0.0.1' ) startDevelopmentServer( port, host )\n  }\n})\n\nfunction startDevelopmentServer( port, host ) {\n  const localIPDevelopmentServer = express()\n  localIPDevelopmentServer.use( server )\n  localIPDevelopmentServer.listen( port, host )\n}\n"],"file":"server.js"}