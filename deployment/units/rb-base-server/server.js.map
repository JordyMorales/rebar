{"version":3,"sources":["../../../units/rb-base-server/server.js"],"names":["require","load","port","process","env","PORT","Error","host","HOST","accessControlAllowedOriginsAsString","ACCESS_CONTROL_ALLOWED_ORIGINS","accessControlAllowedOrigins","JSON","parse","Array","isArray","ex","on","err","console","error","message","stack","ignoreErr","globalErr","name","version","NODE_ENV","server","use","req","res","next","origin","get","indexOf","setHeader","set","firstPathElement","firstPathElementIsArtifactName","serverHealthz","staticServer","express","static","path","resolve","__dirname","maxAge","ObjectManager","initializePersisters","listen","startDevelopmentServer","localIPDevelopmentServer"],"mappings":"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","sourcesContent":["// @flow\n\nimport path from 'path'\n\nimport express from 'express'\nimport compression from 'compression'\nimport cookieParser from 'cookie-parser'\n\nimport { firstPathElementIsArtifactName } from '../_configuration/rb-base-server/artifactSettings'\nimport { name, version } from '../../package.json'\nimport servers from '../_configuration/rb-base-server/servers'\n\nimport log from './log'\nimport { initializeObjectCache } from './ObjectCache'\nimport ObjectManager from './ObjectManager'\nimport serverHealthz from './serverHealthz' // Health check endpoint server\n\n//\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst port = process.env.PORT\nif ( port == null || typeof port !== 'string' )\n  throw new Error( 'rb-base-server/server.js requires the environment variable PORT to be set' )\n\nconst host = process.env.HOST\nif ( host == null || typeof host !== 'string' )\n  throw new Error( 'rb-base-server/server.js requires the environment variable HOST to be set' )\n\nconst accessControlAllowedOriginsAsString = process.env.ACCESS_CONTROL_ALLOWED_ORIGINS\nif (\n  accessControlAllowedOriginsAsString == null ||\n  typeof accessControlAllowedOriginsAsString !== 'string'\n)\n  throw new Error(\n    'rb-base-server/server.js requires the environment variable ACCESS_CONTROL_ALLOWED_ORIGINS to be set',\n  )\nlet accessControlAllowedOrigins = []\ntry {\n  accessControlAllowedOrigins = JSON.parse( accessControlAllowedOriginsAsString )\n  if ( !Array.isArray( accessControlAllowedOrigins ) ) throw new Error()\n} catch ( ex ) {\n  throw new Error(\n    'rb-base-server/server.js requires the environment variable ACCESS_CONTROL_ALLOWED_ORIGINS to be array of strings',\n  )\n}\n\n//\n\n// Global eror handling\nprocess.on( 'uncaughtException', function( err ) {\n  try {\n    try {\n      console.error( err.message )\n      console.error( err.stack )\n    } catch ( ignoreErr ) {}\n\n    log( 'error', 'rb-base-server server: uncaughtException', { err })\n  } catch ( globalErr ) {\n    try {\n      console.error( globalErr.message )\n      console.error( globalErr.stack )\n    } catch ( ignoreErr ) {}\n  }\n  // Handle your errors here\n\n  // global.__current__ is added via middleware\n  // Be aware that this is a bad practice,\n  // global.__current__ being a global, can change\n  // without advice, so you might end responding with\n  // serverError() to a different request than the one\n  // that originated the error if this one happened async\n  //  global.__current__.res.serverError()\n})\n\n// Log startup information\nlog( 'info', 'rb-base-server start', {\n  name,\n  version,\n  NODE_ENV: process.env.NODE_ENV,\n  accessControlAllowedOrigins,\n})\n\n// Get object cache ready\ninitializeObjectCache()\n\n// Main router\nconst server = express()\n\n// Set up access control\nserver.use( function( req, res, next ) {\n  // Find out what the origin is, could be string or undefined\n  const origin = req.get( 'origin' )\n\n  // Allow requests with no origin (like mobile apps or curl requests)\n  // For requests with origin, verify that is is allowed\n  if ( origin && accessControlAllowedOrigins.indexOf( origin ) > -1 ) {\n    res.setHeader( 'Access-Control-Allow-Origin', origin )\n\n    // Request methods you wish to allow\n    res.setHeader( 'Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE' )\n\n    // Request headers you wish to allow\n    res.setHeader( 'Access-Control-Allow-Headers', 'X-Requested-With,content-type' )\n\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader( 'Access-Control-Allow-Credentials', true )\n  }\n\n  // Pass to next layer of middleware\n  next()\n}) // Configure main router\n\nserver.set( 'trust proxy', 'loopback' )\nserver.set( 'x-powered-by', false )\nserver.use( compression() )\nserver.use( cookieParser() ) // GraphQL server requires this\n\nconst firstPathElement = firstPathElementIsArtifactName ? '/:artifact_name' : ''\n\n// Health server\nserver.use( firstPathElement + '/healthz', serverHealthz )\n\n// Static public files server. Serve both using first path elements, and as in root. The reason\n// is that between gantry, and actual deployment, assets requested by client.js and loaded by\n// webpack, both paths could be used\nconst staticServer = express.static(\n  path.resolve( __dirname + '/../_configuration/rb-base-server/public_files/' ),\n  {\n    maxAge:\n      1 *\n      // day\n      86400,\n  },\n)\nserver.use( '/', staticServer )\nif ( firstPathElement !== '' ) {\n  server.use( firstPathElement + '/', staticServer )\n}\n\n// Initialize server extenders\nservers( server, firstPathElementIsArtifactName )\n\nObjectManager.initializePersisters( false, () => {\n  // Serve - work differently in development and production. In production only the\n  // specified host serves\n  if ( process.env.NODE_ENV === 'production' ) {\n    // Production - serve as told\n    server.listen( port, host )\n  } else {\n    // Development server - localhost. Always run on localhost\n    startDevelopmentServer( port, '127.0.0.1' )\n    // Development server - on a specific IP, if different from localhost\n    if ( host !== '127.0.0.1' ) startDevelopmentServer( port, host )\n  }\n})\n\nfunction startDevelopmentServer( port, host ) {\n  const localIPDevelopmentServer = express()\n  localIPDevelopmentServer.use( server )\n  localIPDevelopmentServer.listen( port, host )\n}\n"],"file":"server.js"}