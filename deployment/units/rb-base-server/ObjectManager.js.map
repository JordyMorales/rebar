{"version":3,"sources":["../../../units/rb-base-server/ObjectManager.js"],"names":["User_0","User","Object","assign","defaultPersister","uuidNull","id","UserToken2","UserToken2Anonymous","User_DisplayName","entityDefinitions","setPersisters","Set","deletedRecord","deleted","ObjectManager","constructor","loadersSingle","loadersMultiple","changes","Viewer_User_id","request","response","siteInformation","artifact_id","siteConfiguration","registerEntity","entityName","EntityType","options","Error","persister","add","entityDefinition","EntityName","fieldsWithSuffix","Persister","TriggersForAdd","TriggersForUpdate","TriggersForRemove","TriggersForUpdateShouldRetrieveCurrentRecord","UserPermissionsForObject","use","example","suffix","fieldName","hasOwnProperty","RegisterTriggerForAdd","handler","push","RegisterTriggerForUpdate","shouldRetrieveCurrentRecord","RegisterTriggerForAddAndUpdate","RegisterTriggerForRemove","addUserIdAndOrSiteIdToFilterOrFields","filterOrFields","updatedCreatedAndModifiedFields","fields","isCreating","dtNow","Date","setViewerUserId","setRequest","req","res","setSiteInformation","getLoadersSingle","foundLoaders","getLoadersMultiple","clearLoadersMultiple","recordChange","isDeletion","records","getViewerUserId","getRequest","getLoader","multipleResults","entityType","loadersList","loader","DataLoader","filter","getObjectList","err","log","level","message","details","stack","getOneObject","getOneObject_async","query","uuidEquals","permission","UserPermissionForObject_ObjectType","UserPermissionForObject_object_id","UserPermissionForObject_PermitRead","loaderIdentifier","keys","sort","join","result","load","change","getObjectList_async","arrPermissions","arrIDValues","length","$in","arrResults","ix","splice","invalidateLoaderCache","loaderFieldName","clear","executeTriggers","arrTriggers","oldFields","arrPromises","trigger","Promise","all","assignPrimaryKey","uuidRandom","toString","permissions","defaultOnAdd","read","update","delete","miscAsJSON","a_UserPermissionForObject","UserPermissionForObject_PermitUpdate","UserPermissionForObject_PermitDelete","UserPermissionForObject_PermitMiscAsJSON","remove","uuidFromString","uuidToString","cursorForObjectInConnection","arr","obj","obj_id","arr_element_id","cursor","initializePersisters","runAsPartOfSetupDatabase","cb","initialize","getObjectManager","objectManager"],"mappings":"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","sourcesContent":["// @flow\n\nimport DataLoader from 'dataloader'\nimport { cursorForObjectInConnection } from 'graphql-relay'\n\nimport UserToken2Anonymous from '../_configuration/rb-base-server/UserToken2Anonymous'\nimport defaultPersister from '../_configuration/rb-base-server/graphql/defaultPersister'\nimport getNewUser from '../_configuration/rb-base-server/graphql/model/getNewUser'\nimport { getSiteInformation } from '../_configuration/rb-base-server/siteSettings'\nimport User from '../_configuration/rb-base-server/graphql/model/User'\n\nimport log from './log'\n\n// Anonymous user\nconst User_0 = new User(\n  Object.assign( getNewUser( defaultPersister.uuidNull() ), {\n    id: defaultPersister.uuidNull(),\n    UserToken2: UserToken2Anonymous,\n    User_DisplayName: 'Anonymous',\n  }),\n)\n\nexport { User_0 }\n\n// Type of entity definition\ntype EntityDefinition = {\n  EntityName: string,\n  EntityType: Function,\n  fieldsWithSuffix: { [string]: boolean },\n  Persister: Object,\n  TriggersForAdd: Array<Function>,\n  TriggersForUpdate: Array<Function>,\n  TriggersForRemove: Array<Function>,\n  TriggersForUpdateShouldRetrieveCurrentRecord: boolean,\n  UserPermissionsForObject: {\n    use: boolean,\n    defaultOnAdd?: {\n      read: boolean,\n      update: boolean,\n      delete: boolean,\n      miscAsJSON: string,\n    },\n  },\n}\n\n// Static set of entity definitions\nconst entityDefinitions: {\n  [string]: EntityDefinition,\n} = {}\n\n// Static array of object managers\nconst setPersisters = new Set()\n\n// Value for a change indicating that the record is deleted\nconst deletedRecord = {\n  deleted: true,\n}\n\nexport default class ObjectManager {\n  loadersSingle: Object\n  loadersMultiple: Object\n  Viewer_User_id: string\n  changes: Object\n  request: ?Object\n  response: ?Object\n  siteInformation: { artifact_id: string, siteConfiguration: Object }\n\n  constructor() {\n    // Loaders for a single record, by entity name\n    this.loadersSingle = {}\n\n    // Loaders for a multiple record lists, by entity name\n    this.loadersMultiple = {}\n\n    // Changes made to records, by entity name\n    this.changes = {}\n\n    // UserID for the viewer. Could be unset if ObjectManager is used by system\n    this.Viewer_User_id = 'Object Manager: viewer user id has not been set'\n\n    // Request and response objects, if available\n    this.request = null\n    this.response = null\n\n    // Setting site information mostly to satify flow;\n    // also, in order to be able to better detect errors when not set\n    this.siteInformation = {\n      artifact_id: 'Object Manager: artifact_id has not been set',\n      siteConfiguration: {},\n    }\n  }\n\n  static registerEntity(\n    entityName: string,\n    EntityType: Function,\n    options: {\n      persister?: Object,\n      UserPermissionsForObject?: {\n        use: boolean,\n        defaultOnAdd?: {\n          read: boolean,\n          update: boolean,\n          delete: boolean,\n          miscAsJSON: string,\n        },\n      },\n    },\n  ): void {\n    if ( entityName in entityDefinitions ) throw new Error( 'Entity already registered: ' + entityName )\n\n    // In order to be able to access the name as a static property of the type\n    EntityType.entityName = entityName\n\n    // Determine persister - default, or otherwise\n    let { persister } = options\n    if ( persister == null ) persister = defaultPersister\n\n    // A set would retain only one copy of a persister\n    setPersisters.add( persister )\n\n    const entityDefinition = {\n      EntityName: entityName,\n      EntityType,\n      fieldsWithSuffix: {},\n      Persister: persister,\n      TriggersForAdd: [],\n      TriggersForUpdate: [],\n      TriggersForRemove: [],\n      TriggersForUpdateShouldRetrieveCurrentRecord: false,\n      UserPermissionsForObject:\n        options.UserPermissionsForObject != null\n          ? options.UserPermissionsForObject\n          : { use: false },\n    }\n\n    // Determine fields by fields with suffix\n    // For the User-related tables, there is no automatic support:\n    // User_id and artifact_id have to be explicitly specified\n    if ( entityName !== 'User' && entityName !== 'UserAccount' && entityName !== 'UserSession' ) {\n      const example = new EntityType({})\n      for ( let suffix of [\n        '_artifact_id',\n        '_user_id',\n        '_created_by',\n        '_created_on',\n        '_modified_on',\n        '_modified_by',\n      ]) {\n        const fieldName = entityDefinition.EntityName + suffix\n\n        // Does the object type have it?\n        if ( example.hasOwnProperty( fieldName ) ) {\n          entityDefinition.fieldsWithSuffix[suffix] = true\n        }\n      }\n    }\n\n    entityDefinitions[entityName] = entityDefinition\n  }\n\n  static RegisterTriggerForAdd( entityName: string, handler: Function ): void {\n    entityDefinitions[entityName].TriggersForAdd.push( handler )\n  }\n\n  static RegisterTriggerForUpdate(\n    entityName: string,\n    handler: Function,\n    shouldRetrieveCurrentRecord: boolean,\n  ): void {\n    entityDefinitions[entityName].TriggersForUpdate.push( handler )\n\n    if ( shouldRetrieveCurrentRecord )\n      entityDefinitions[entityName].TriggersForUpdateShouldRetrieveCurrentRecord = true\n  }\n\n  static RegisterTriggerForAddAndUpdate( entityName: string, handler: Function ): void {\n    ObjectManager.RegisterTriggerForAdd( entityName, handler )\n    ObjectManager.RegisterTriggerForUpdate( entityName, handler, false )\n  }\n\n  static RegisterTriggerForRemove( entityName: string, handler: any ) {\n    entityDefinitions[entityName].TriggersForRemove.push( handler )\n  }\n\n  // Apply artifact_id, User_id security\n  addUserIdAndOrSiteIdToFilterOrFields( entityDefinition: EntityDefinition, filterOrFields: Object ) {\n    for ( let suffix of [ '_artifact_id', '_user_id' ]) {\n      // Does the object type have it?\n      if ( entityDefinition.fieldsWithSuffix[suffix]) {\n        const fieldName = entityDefinition.EntityName + suffix\n\n        // Is the filter/fields collection missing it?\n        if ( !filterOrFields.hasOwnProperty( fieldName ) )\n          filterOrFields[fieldName] =\n            suffix === '_artifact_id' ? this.siteInformation.artifact_id : this.Viewer_User_id\n      }\n    }\n  }\n\n  // Update created and modified fields\n  updatedCreatedAndModifiedFields(\n    entityDefinition: EntityDefinition,\n    fields: Object,\n    isCreating: boolean,\n  ) {\n    const dtNow = new Date()\n\n    for ( let suffix of isCreating\n      ? [ '_created_by', '_created_on', '_modified_on', '_modified_by' ]\n      : [ '_modified_on', '_modified_by' ]) {\n      // Does the object type have it?\n      if ( entityDefinition.fieldsWithSuffix[suffix]) {\n        const fieldName = entityDefinition.EntityName + suffix\n\n        // Is the filter/fields collection missing it?\n        if ( !fields.hasOwnProperty( fieldName ) )\n          fields[fieldName] =\n            suffix === '_modified_by' || suffix === '_created_by' ? this.Viewer_User_id : dtNow\n      }\n    }\n  }\n\n  setViewerUserId( Viewer_User_id: string ): void {\n    this.Viewer_User_id = Viewer_User_id\n  }\n\n  setRequest( req: any, res: any ): void {\n    this.request = req\n    this.response = res\n  }\n\n  setSiteInformation( siteInformation: Object ): void {\n    this.siteInformation = siteInformation\n  }\n\n  getLoadersSingle( entityName: string ) {\n    const foundLoaders = this.loadersSingle[entityName]\n\n    if ( foundLoaders != null ) {\n      return foundLoaders\n    } else {\n      this.loadersSingle[entityName] = {}\n      return this.loadersSingle[entityName]\n    }\n  }\n\n  getLoadersMultiple( entityName: string ) {\n    const foundLoaders = this.loadersMultiple[entityName]\n\n    if ( foundLoaders != null ) {\n      return foundLoaders\n    } else {\n      this.loadersMultiple[entityName] = {}\n      return this.loadersMultiple[entityName]\n    }\n  }\n\n  clearLoadersMultiple( entityName: string ) {\n    this.loadersMultiple[entityName] = {}\n  }\n\n  recordChange( entityName: string, fields: Object, isDeletion: boolean ) {\n    let records = this.changes[entityName]\n    if ( records == null ) records = this.changes[entityName] = {}\n\n    const id = fields.id\n\n    records[id] = isDeletion ? deletedRecord : fields\n  }\n\n  getViewerUserId(): string {\n    if ( this.Viewer_User_id === 'Object Manager: viewer user id has not been set' )\n      throw new Error( 'Object Manager: viewer user id has not been set' )\n\n    return this.Viewer_User_id\n  }\n\n  getRequest(): any {\n    if ( this.request == null ) throw new Error( 'Object Manager: request has not been set' )\n\n    return this.request\n  }\n\n  getLoader( entityName: string, fieldName: string, multipleResults: boolean ) {\n    if ( !( entityName in entityDefinitions ) )\n      throw new Error( 'Can not find entity type named ' + entityName )\n\n    const entityDefinition = entityDefinitions[entityName]\n    const entityType = entityDefinition.EntityType\n\n    let loadersList = multipleResults\n      ? this.getLoadersMultiple( entityName )\n      : this.getLoadersSingle( entityName )\n\n    let loader = loadersList[fieldName]\n    if ( loader == null ) {\n      if ( multipleResults )\n        loader = new DataLoader( filter => {\n          try {\n            return entityDefinition.Persister.getObjectList( entityName, entityType, filter )\n          } catch ( err ) {\n            log.log({\n              level: 'error',\n              message: 'Object Manager: Could not load multiple results',\n              details: {\n                fieldName,\n                entityName,\n                err,\n                stack: err.stack,\n              },\n            })\n            throw err\n          }\n        })\n      else\n        loader = new DataLoader( filter => {\n          try {\n            return entityDefinition.Persister.getOneObject( entityName, entityType, filter )\n          } catch ( err ) {\n            log.log({\n              level: 'error',\n              message: 'Object Manager: Could not load single result',\n              details: {\n                fieldName,\n                entityName,\n                err,\n                stack: err.stack,\n              },\n            })\n            throw err\n          }\n        })\n\n      loadersList[fieldName] = loader\n    }\n\n    return loader\n  }\n\n  async getOneObject_async( entityName: string, query: Object ): Object | null {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Special hack for anonymous users\n    if ( entityName === 'User' )\n      if ( defaultPersister.uuidEquals( defaultPersister.uuidNull(), query.id ) ) return User_0\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, query )\n\n    // Verify user object permission, if applies\n    if ( entityDefinition.UserPermissionsForObject.use ) {\n      const permission = await this.getOneObject_async( 'UserPermissionForObject', {\n        UserPermissionForObject_ObjectType: entityName,\n        UserPermissionForObject_object_id: query.id,\n      })\n\n      // If object is not found, or read permission not found, bail out\n      if ( permission == null || !permission.UserPermissionForObject_PermitRead ) return null\n    }\n\n    // For all non-user, non 0 ids, load from data loader per protocol\n    const loaderIdentifier = Object.keys( query )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, false )\n\n    let result = await loader.load( query )\n\n    const changes = this.changes[entityName]\n    if ( changes ) {\n      const change = changes[result.id]\n\n      if ( change != null ) {\n        // Object is not found, return null if deleted\n        if ( change === deletedRecord ) {\n          result = null\n        } else {\n          // Add or update\n          Object.assign( result, change )\n        }\n      }\n    }\n\n    return result\n  }\n\n  async getObjectList_async( entityName: string, query: Object ) {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, query )\n\n    // Add user object permissions to query, if they apply\n    if ( entityDefinition.UserPermissionsForObject.use ) {\n      const arrPermissions = await this.getObjectList_async( 'UserPermissionForObject', {\n        UserPermissionForObject_ObjectType: entityName,\n      })\n\n      // Determine ID values that are permitted for user\n      const arrIDValues = []\n      for ( let permission of arrPermissions )\n        if ( permission.UserPermissionForObject_PermitRead ) {\n          arrIDValues.push( permission.UserPermissionForObject_object_id )\n        }\n\n      // If there are no permissions, there is no reason to query further\n      if ( arrIDValues.length === 0 ) return []\n\n      // Set an in condition - detrimental to performance yet quick and dirty way to ensure\n      // that only permitted IDs can be accessed\n      query.id = { $in: arrIDValues }\n    }\n\n    const loaderIdentifier = Object.keys( query )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, true )\n\n    const arrResults = await loader.load( query )\n\n    const changes = this.changes[entityName]\n\n    if ( changes ) {\n      for ( let ix = 0; ix < arrResults.length; ix++ ) {\n        const change = changes[arrResults[ix].id]\n        if ( change != null ) {\n          if ( change === deletedRecord )\n            // Reduce ix in order not to skip over a record\n            arrResults.splice( ix--, 1 )\n          // Add or update\n          else Object.assign( arrResults[ix], change )\n        }\n      }\n    }\n\n    return arrResults\n  }\n\n  invalidateLoaderCache( entityName: string, fields: any ) {\n    // At this moment there is no obvious way of knowing what to clear from lists, so delete them all\n    this.clearLoadersMultiple( entityName )\n\n    const loadersSingle = this.getLoadersSingle( entityName )\n    for ( let loaderFieldName in loadersSingle ) {\n      if ( loaderFieldName === 'id' ) loadersSingle[loaderFieldName].clear( fields.id )\n      else delete loadersSingle[loaderFieldName]\n    }\n  }\n\n  executeTriggers( arrTriggers: Array<Function>, fields: Object, oldFields: ?Object ) {\n    const arrPromises = []\n    for ( let trigger of arrTriggers ) {\n      arrPromises.push( trigger( this, fields, oldFields ) )\n    }\n\n    return Promise.all( arrPromises )\n  }\n\n  assignPrimaryKey( entityName: string, fields: any ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Generate primary key, overwrite if already present\n    fields.id = entityDefinition.Persister.uuidRandom()\n  }\n\n  async add( entityName: string, fields: Object ): any {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fields )\n\n    // Update created and modified fields\n    this.updatedCreatedAndModifiedFields( entityDefinition, fields, true )\n\n    // Generate primary key, if not already present\n    if ( !fields.id ) fields.id = entityDefinition.Persister.uuidRandom()\n\n    // If this is a user ID\n    if ( entityName === 'User' ) this.setViewerUserId( fields.id.toString() )\n\n    this.recordChange( entityName, fields, false )\n\n    try {\n      await this.executeTriggers( entityDefinition.TriggersForAdd, fields )\n\n      await entityDefinition.Persister.add( entityName, fields, entityDefinition.EntityType )\n\n      if ( entityDefinition.UserPermissionsForObject.use ) {\n        const permissions = entityDefinition.UserPermissionsForObject.defaultOnAdd\n          ? entityDefinition.UserPermissionsForObject.defaultOnAdd\n          : {\n              read: true,\n              update: true,\n              delete: true,\n              miscAsJSON: '{}',\n            }\n\n        const a_UserPermissionForObject = {\n          UserPermissionForObject_ObjectType: entityName,\n          UserPermissionForObject_object_id: fields.id,\n          UserPermissionForObject_PermitRead: permissions.read,\n          UserPermissionForObject_PermitUpdate: permissions.update,\n          UserPermissionForObject_PermitDelete: permissions.delete,\n          UserPermissionForObject_PermitMiscAsJSON: permissions.miscAsJSON,\n        }\n\n        await this.add( 'UserPermissionForObject', a_UserPermissionForObject )\n      }\n    } catch ( err ) {\n      log.log({\n        level: 'error',\n        message: 'Object Manager: Could not add',\n        details: {\n          fields,\n          entityName,\n          err,\n          stack: err.stack,\n        },\n      })\n      throw err\n    }\n\n    this.invalidateLoaderCache( entityName, fields )\n\n    return fields.id\n  }\n\n  async update( entityName: string, fields: Object ): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    try {\n      // Apply artifact_id, User_id security\n      this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fields )\n\n      // Verify user object permission, if applies\n      if ( entityDefinition.UserPermissionsForObject.use ) {\n        const permission = await this.getOneObject_async( 'UserPermissionForObject', {\n          UserPermissionForObject_ObjectType: entityName,\n          UserPermissionForObject_object_id: fields.id,\n        })\n\n        // If object is not found, or read permission not found, bail out\n        if ( permission == null || !permission.UserPermissionForObject_PermitUpdate ) return\n      }\n\n      // Update created and modified fields\n      this.updatedCreatedAndModifiedFields( entityDefinition, fields, false )\n\n      // Retrieve the current values, if triggers will be used\n      let oldFields = null\n      if ( entityDefinition.TriggersForUpdateShouldRetrieveCurrentRecord ) {\n        oldFields = await this.getOneObject_async( entityName, {\n          id: fields.id,\n        })\n      }\n\n      this.recordChange( entityName, fields, false )\n\n      await this.executeTriggers( entityDefinition.TriggersForUpdate, fields, oldFields )\n\n      await entityDefinition.Persister.update( entityName, fields )\n    } catch ( err ) {\n      log.log({\n        level: 'error',\n        message: 'Object Manager: Could not update',\n        details: {\n          fields,\n          entityName,\n          err,\n          stack: err.stack,\n        },\n      })\n      throw err\n    }\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  async remove( entityName: string, fields: Object ) {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    try {\n      // Apply artifact_id, User_id security\n      this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fields )\n\n      // Verify user object permission, if applies\n      if ( entityDefinition.UserPermissionsForObject.use ) {\n        const permission = await this.getOneObject_async( 'UserPermissionForObject', {\n          UserPermissionForObject_ObjectType: entityName,\n          UserPermissionForObject_object_id: fields.id,\n        })\n\n        // If object is not found, or read permission not found, bail out\n        if ( permission == null || !permission.UserPermissionForObject_PermitDelete ) return\n      }\n\n      this.recordChange( entityName, fields, true )\n\n      await this.executeTriggers( entityDefinition.TriggersForRemove, fields )\n\n      await entityDefinition.Persister.remove( entityName, fields )\n    } catch ( err ) {\n      log.log({\n        level: 'error',\n        message: 'Object Manager: Could not remove',\n        details: {\n          fields,\n          entityName,\n          err,\n          stack: err.stack,\n        },\n      })\n      throw err\n    }\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  uuidFromString( entityName: string, id: string ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    return entityDefinition.Persister.uuidFromString( id )\n  }\n\n  uuidToString( entityName: string, id: Object ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    return entityDefinition.Persister.uuidToString( id )\n  }\n\n  cursorForObjectInConnection( entityName: string, arr: Array<Object>, obj: Object ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    // IDs can be both strings and Uuid. Check that first, and convert to String\n    const obj_id = entityDefinition.Persister.uuidToString( obj.id )\n\n    // Make sure that the object and its instance can be compared with ===\n    // assumed that the object has id field which is unique\n    for ( let ix = 0; ix < arr.length; ix++ ) {\n      const arr_element_id = entityDefinition.Persister.uuidToString( arr[ix].id )\n      if ( arr_element_id === obj_id ) {\n        arr[ix] = obj\n        break\n      }\n    }\n    let cursor = cursorForObjectInConnection( arr, obj )\n    if ( cursor == null )\n      log.log({\n        level: 'error',\n        message: 'Object Manager: Could not create cursor for object in connection',\n        details: {\n          arr,\n          entityName,\n          obj,\n        },\n      })\n    return cursor\n  }\n\n  static initializePersisters( runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n    for ( let persister of setPersisters )\n      persister.initialize( runAsPartOfSetupDatabase, () => {\n        cb()\n      })\n  }\n}\n\n// Register the user\nObjectManager.registerEntity( 'User', User, {})\n\n// Get an Object Manager with site information\nexport async function getObjectManager( req: Object, res: Object ): Promise<ObjectManager> {\n  // Set site information\n  const siteInformation = await getSiteInformation( req, res ) // Create individual object manager for each request\n  const objectManager = new ObjectManager() // Set request and response\n\n  objectManager.setRequest( req, res ) // Place designer configuration into object manager\n  objectManager.setSiteInformation( siteInformation )\n  return objectManager\n}\n"],"file":"ObjectManager.js"}