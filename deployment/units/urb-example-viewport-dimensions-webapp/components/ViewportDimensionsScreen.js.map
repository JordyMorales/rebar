{"version":3,"sources":["../../../../units/urb-example-viewport-dimensions-webapp/components/ViewportDimensionsScreen.jsx"],"names":["styles","card","minWidth","ViewportDimensionsScreen","React","Component","render","classes","totalHeight","totalWidth","props","data","name","value","map","n"],"mappings":";;AAEA,wC;AACA;AACA,0C;;;;;;AAMA,8B;AACA;;AAEA,+F;AACA,8F;;AAEA,MAAMA,SAAS;AACbC,QAAM;AACJC,cAAU,GADN,EADO,EAAf;;;;AAMA,MAAMC,wBAAN,SAAuCC,gBAAMC;;;;;AAK1C;AACDC,WAAS;AACP,UAAM,EAAEC,OAAF,EAAWC,WAAX,EAAwBC,UAAxB,KAAuC,KAAKC,KAAlD;;AAEA,UAAMC,OAAO;AACX,MAAEC,MAAM,YAAR,EAAsBC,OAAOJ,UAA7B,EADW;AAEX,MAAEG,MAAM,aAAR,EAAuBC,OAAOL,WAA9B,EAFW,CAAb;;;AAKA;AACE,oCAAC,+BAAD;AACE,sCAAC,cAAD,IAAM,WAAWD,QAAQN,IAAzB;AACE,wCAAC,gBAAD,IAAY,OAAM,qBAAlB,GADF;AAEE,wCAAC,eAAD;AACE,0CAAC,gBAAD;AACE,4CAAC,eAAD;AACE,8CAAC,gBAAD,mBADF;AAEE,8CAAC,gBAAD,IAAW,aAAX,YAFF,CADF,CADF;;;AAOE,0CAAC,gBAAD;AACGU,mBAAKG,GAAL,CAAUC,KAAK;AACd;AACE,gDAAC,eAAD,IAAU,KAAKA,EAAEH,IAAjB;AACE,kDAAC,gBAAD,QAAYG,EAAEH,IAAd,CADF;AAEE,kDAAC,gBAAD,IAAW,aAAX,IAAoBG,EAAEF,KAAtB,CAFF,CADF;;;AAMD,eAPA,CADH,CAPF,CAFF;;;AAoBE,wCAAC,iBAAD,OApBF,CADF,CADF;;;;AA0BD,GAnCA,C;;;AAsCY;AACb,wBAAYb,MAAZ;AACE,sCAAwBG,wBAAxB,EAAkD;AAChD,aADgD;AAEhD,YAFgD,CAAlD,CADF,CADa,uG","file":"ViewportDimensionsScreen.js","sourcesContent":["// @flow\n\nimport Card, { CardContent, CardHeader } from 'material-ui/Card'\nimport { withStyles } from 'material-ui/styles'\nimport Table, {\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from 'material-ui/Table'\nimport React from 'react'\nimport { createFragmentContainer, graphql } from 'react-relay'\n\nimport ResponsiveContentArea from '../../urb-base-webapp/components/ResponsiveContentArea'\nimport withViewportDimensions from '../../urb-base-webapp/scripts/withViewportDimensions'\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n}\n\nclass ViewportDimensionsScreen extends React.Component<{\n  classes: Object,\n  totalWidth: number,\n  totalHeight: number,\n  Viewer: Object\n}> {\n  render() {\n    const { classes, totalHeight, totalWidth } = this.props\n\n    const data = [\n      { name: 'totalWidth', value: totalWidth },\n      { name: 'totalHeight', value: totalHeight },\n    ]\n\n    return (\n      <ResponsiveContentArea>\n        <Card className={classes.card}>\n          <CardHeader title=\"Viewport Dimensions\" />\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Property</TableCell>\n                <TableCell numeric>Value</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.map( n => {\n                return (\n                  <TableRow key={n.name}>\n                    <TableCell>{n.name}</TableCell>\n                    <TableCell numeric>{n.value}</TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n          <CardContent />\n        </Card>\n      </ResponsiveContentArea>\n    )\n  }\n}\n\nexport default createFragmentContainer(\n  withStyles( styles )(\n    withViewportDimensions( ViewportDimensionsScreen, [\n      'totalHeight',\n      'totalWidth',\n    ])\n  ),\n  graphql`\n    fragment ViewportDimensionsScreen_Viewer on Viewer {\n      id\n    }\n  `\n)\n"]}