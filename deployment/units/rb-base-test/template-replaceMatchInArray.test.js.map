{"version":3,"sources":["../../../units/rb-base-test/template-replaceMatchInArray.test.js"],"names":["arrPayload","word","text","matchInfo","float","template","templTag_arrVar","name","items","test","expect","templTag_replArr","variable","toEqual"],"mappings":"aAAA;AACA;;;;;AAKA;AACE,QAAMA,UAAU,GAAG;AACjB,IAAEC,IAAI,EAAE,EAAEC,IAAI,EAAE,SAAR,EAAR,EADiB;AAEjB,IAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,SAAR,EAAR,EAFiB;AAGjB,IAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,QAAR,EAAR,EAHiB;AAIjB,IAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,QAAR,EAAR,EAJiB;AAKjB,IAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,WAAR,EAAR,EALiB;AAMjB,IAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,UAAR,EAAR,EANiB;AAOjB,IAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,OAAR,EAAR,EAPiB;AAQjB,IAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,MAAR,EAAR,EARiB,CAAnB;;;AAWA,QAAMC,SAAS,GAAG,0BAAWH,UAAX,EAAuB;AACvCI,IAAAA,KAAK,EAAE,IADgC;AAEvCC,IAAAA,QAAQ,EAAE;AACR,MAAEJ,IAAI,EAAE,EAAEC,IAAI,EAAE,QAAR,EAAR,EADQ;AAER,MAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,QAAR,EAAR,EAFQ;AAGR;AACE,OAACI,6BAAD,GAAmB;AACjBC,QAAAA,IAAI,EAAE,OADW;AAEjBC,QAAAA,KAAK,EAAE,CAAE,EAAEP,IAAI,EAAE,EAAR,EAAF,EAAgB,EAAEA,IAAI,EAAE,EAAR,EAAhB,CAFU,EADrB,EAHQ,CAF6B,EAAvB,CAAlB;;;;;;AAcAQ,EAAAA,IAAI,CAAC,YAAD,EAAe,MAAM;AACvBC,IAAAA,MAAM;AACJ;AACEV,IAAAA,UADF;AAEE;AACE,MAAEC,IAAI,EAAE,EAAEC,IAAI,EAAE,QAAR,EAAR,EADF;AAEE,MAAE,CAACS,8BAAD,GAAoB,EAAEC,QAAQ,EAAE,OAAZ,EAAtB,EAFF;AAGE,MAAEX,IAAI,EAAE,EAAEQ,IAAI,EAAE,OAAR,EAAR,EAHF,CAFF;;AAOEN,IAAAA,SAPF,CADI,CAAN;;AAUEU,IAAAA,OAVF,CAUU;AACR,MAAEZ,IAAI,EAAE,EAAEC,IAAI,EAAE,SAAR,EAAR,EADQ;AAER,MAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,SAAR,EAAR,EAFQ;AAGR,MAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,QAAR,EAAR,EAHQ;AAIR,MAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,WAAR,EAAR,EAJQ;AAKR,MAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,UAAR,EAAR,EALQ;AAMR,MAAED,IAAI,EAAE,EAAEQ,IAAI,EAAE,OAAR,EAAR,EANQ;AAOR,MAAER,IAAI,EAAE,EAAEC,IAAI,EAAE,OAAR,EAAR,EAPQ;AAQR,MAAED,IAAI,EAAE,EAAEC,IAAI,EAAE,MAAR,EAAR,EARQ,CAVV;;AAoBD,GArBG,CAAJ;AAsBD","sourcesContent":["import { matchArray, replaceMatchInArray } from '../rb-base-universal/template'\nimport {\n  templTag_arrVar,\n  templTag_replArr,\n} from '../rb-base-universal/templateTags'\n\n{\n  const arrPayload = [\n    { word: { text: 'prequel' } },\n    { word: { text: 'sedated' } },\n    { word: { text: 'father' } },\n    { word: { text: 'mother' } },\n    { word: { text: 'beautiful' } },\n    { word: { text: 'daughter' } },\n    { word: { text: 'knive' } },\n    { word: { text: 'sign' } },\n  ]\n\n  const matchInfo = matchArray(arrPayload, {\n    float: true,\n    template: [\n      { word: { text: 'father' } },\n      { word: { text: 'mother' } },\n      {\n        [templTag_arrVar]: {\n          name: 'myVar',\n          items: [ { word: {} }, { word: {} } ],\n        },\n      },\n    ],\n  })\n\n  test('only words', () => {\n    expect(\n      replaceMatchInArray(\n        arrPayload,\n        [\n          { word: { text: 'before' } },\n          { [templTag_replArr]: { variable: 'myVar' } },\n          { word: { test: 'after' } },\n        ],\n        matchInfo,\n      ),\n    ).toEqual([\n      { word: { text: 'prequel' } },\n      { word: { text: 'sedated' } },\n      { word: { text: 'before' } },\n      { word: { text: 'beautiful' } },\n      { word: { text: 'daughter' } },\n      { word: { test: 'after' } },\n      { word: { text: 'knive' } },\n      { word: { text: 'sign' } },\n    ])\n  })\n}\n"],"file":"template-replaceMatchInArray.test.js"}