{"version":3,"sources":["../../../units/rb-base-test/template-stringToToken.test.js"],"names":["test","expect","toEqual","word","text","symbol"],"mappings":"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","sourcesContent":["import { stringToTokenArray } from '../rb-base-universal/template'\n\ntest('only words', () => {\n  expect(stringToTokenArray('hello Wonderful world')).toEqual([\n    { word: { text: 'hello' } },\n    { word: { text: 'wonderful' } },\n    { word: { text: 'world' } },\n  ])\n})\n\ntest('only words, extra white space', () => {\n  expect(stringToTokenArray('hello Wonderful      world')).toEqual([\n    { word: { text: 'hello' } },\n    { word: { text: 'wonderful' } },\n    { word: { text: 'world' } },\n  ])\n})\n\ntest('words and coma next to word, space after coma', () => {\n  expect(\n    stringToTokenArray('no better place than here, no better time than now'),\n  ).toEqual([\n    { word: { text: 'no' } },\n    { word: { text: 'better' } },\n    { word: { text: 'place' } },\n    { word: { text: 'than' } },\n    { word: { text: 'here' } },\n    { symbol: { text: ',' } },\n    { word: { text: 'no' } },\n    { word: { text: 'better' } },\n    { word: { text: 'time' } },\n    { word: { text: 'than' } },\n    { word: { text: 'now' } },\n  ])\n})\n\ntest('words and coma next to word, space before and after coma', () => {\n  expect(\n    stringToTokenArray('no better place than here , no better time than now'),\n  ).toEqual([\n    { word: { text: 'no' } },\n    { word: { text: 'better' } },\n    { word: { text: 'place' } },\n    { word: { text: 'than' } },\n    { word: { text: 'here' } },\n    { symbol: { text: ',' } },\n    { word: { text: 'no' } },\n    { word: { text: 'better' } },\n    { word: { text: 'time' } },\n    { word: { text: 'than' } },\n    { word: { text: 'now' } },\n  ])\n})\n\ntest('words and coma next to word, space before coma', () => {\n  expect(\n    stringToTokenArray('no better place than here ,no better time than now'),\n  ).toEqual([\n    { word: { text: 'no' } },\n    { word: { text: 'better' } },\n    { word: { text: 'place' } },\n    { word: { text: 'than' } },\n    { word: { text: 'here' } },\n    { symbol: { text: ',' } },\n    { word: { text: 'no' } },\n    { word: { text: 'better' } },\n    { word: { text: 'time' } },\n    { word: { text: 'than' } },\n    { word: { text: 'now' } },\n  ])\n})\n\ntest('words and coma next to word, no space before or after', () => {\n  expect(\n    stringToTokenArray('no better place than here,no better time than now'),\n  ).toEqual([\n    { word: { text: 'no' } },\n    { word: { text: 'better' } },\n    { word: { text: 'place' } },\n    { word: { text: 'than' } },\n    { word: { text: 'here' } },\n    { symbol: { text: ',' } },\n    { word: { text: 'no' } },\n    { word: { text: 'better' } },\n    { word: { text: 'time' } },\n    { word: { text: 'than' } },\n    { word: { text: 'now' } },\n  ])\n})\n"],"file":"template-stringToToken.test.js"}