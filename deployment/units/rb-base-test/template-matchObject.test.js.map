{"version":3,"sources":["../../../units/rb-base-test/template-matchObject.test.js"],"names":["test","expect","word","text","toBe","templTag_in"],"mappings":"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","sourcesContent":["import { matchObject } from '../rb-base-universal/template'\nimport { templTag_in } from '../rb-base-universal/templateTags'\n\ntest('word father === word father', () => {\n  expect(\n    matchObject({ word: { text: 'father' } }, { word: { text: 'father' } }),\n  ).toBe(true)\n})\n\ntest('word father !== constant alex', () => {\n  expect(matchObject({ word: { text: 'father' } }, 'alex')).toBe(false)\n})\n\ntest('word father !== word mother', () => {\n  expect(\n    matchObject({ word: { text: 'father' } }, { word: { text: 'mother' } }),\n  ).toBe(false)\n})\n\ntest('string A is A or B', () => {\n  expect(matchObject('A', { [templTag_in]: [ 'A', 'B' ] })).toBe(true)\n})\n\ntest('string C is A or B', () => {\n  expect(matchObject('C', { [templTag_in]: [ 'A', 'B' ] })).toBe(false)\n})\n\ntest('word father in word mother, word father', () => {\n  expect(\n    matchObject(\n      { word: { text: 'father' } },\n      {\n        [templTag_in]: [\n          { word: { text: 'father' } },\n          { word: { text: 'mother' } },\n        ],\n      },\n    ),\n  ).toBe(true)\n})\n\ntest('word child not in word mother, word father', () => {\n  expect(\n    matchObject(\n      { word: { text: 'child' } },\n      {\n        [templTag_in]: [\n          { word: { text: 'father' } },\n          { word: { text: 'mother' } },\n        ],\n      },\n    ),\n  ).toBe(false)\n})\n\ntest('equal arrays', () => {\n  expect(\n    matchObject(\n      [ { word: { text: 'father' } }, { word: { text: 'mother' } } ],\n      [ { word: { text: 'father' } }, { word: { text: 'mother' } } ],\n    ),\n  ).toBe(true)\n})\n\ntest('unequal arrays, criterion is shorter', () => {\n  expect(\n    matchObject(\n      [ { word: { text: 'father' } }, { word: { text: 'mother' } } ],\n      [ { word: { text: 'father' } } ],\n    ),\n  ).toBe(false)\n})\n\ntest('unequal arrays, criterion is longer', () => {\n  expect(\n    matchObject(\n      [ { word: { text: 'father' } }, { word: { text: 'mother' } } ],\n      [\n        { word: { text: 'father' } },\n        { word: { text: 'mother' } },\n        { word: { text: 'child' } },\n      ],\n    ),\n  ).toBe(false)\n})\n\ntest('unequal arrays, same length, different values', () => {\n  expect(\n    matchObject(\n      [ { word: { text: 'father' } }, { word: { text: 'mother' } } ],\n      [ { word: { text: 'father' } }, { word: { text: 'child' } } ],\n    ),\n  ).toBe(false)\n})\n"],"file":"template-matchObject.test.js"}