{"version":3,"sources":["../../../units/rb-base-test/template-matchAndReplace.test.js"],"names":["test","expect","word","text","float","template","templTag_arrVar","name","items","partial","toWhom","templTag_replObj","variable","path","toEqual","templTag_arrOr"],"mappings":"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","sourcesContent":["import { matchAndReplace } from '../rb-base-universal/template'\nimport {\n  templTag_arrOr,\n  templTag_arrVar,\n  templTag_replObj,\n} from '../rb-base-universal/templateTags'\n\ntest('simple replacement', () => {\n  expect(\n    matchAndReplace(\n      [\n        { word: { text: 'will' } },\n        { word: { text: 'you' } },\n        { word: { text: 'bring' } },\n        { word: { text: 'me' } },\n        { word: { text: 'cheese' } },\n        { word: { text: 'now' } },\n      ],\n      {\n        float: true,\n        template: [\n          { word: { text: 'bring' } },\n          {\n            [templTag_arrVar]: {\n              name: 'to_whom',\n              items: [ { word: {} } ],\n            },\n          },\n          { word: { text: 'cheese' } },\n        ],\n      },\n      [\n        { word: { text: 'prolog' } },\n        {\n          partial: 'bring',\n          toWhom: {\n            [templTag_replObj]: {\n              variable: 'to_whom',\n              path: [ 'word', 'text' ],\n            },\n          },\n        },\n        { word: { test: 'epilog' } },\n      ],\n    ),\n  ).toEqual([\n    { word: { text: 'will' } },\n    { word: { text: 'you' } },\n    { word: { text: 'prolog' } },\n    { partial: 'bring', toWhom: [ 'me' ] },\n    { word: { test: 'epilog' } },\n    { word: { text: 'now' } },\n  ])\n})\n\ntest('simple replacement', () => {\n  expect(\n    matchAndReplace(\n      [\n        { word: { text: 'can' } },\n        { word: { text: 'i' } },\n        { word: { text: 'bring' } },\n        { word: { text: 'an empty' } },\n        { word: { text: 'water' } },\n        { word: { text: 'bottle' } },\n      ],\n      {\n        float: true,\n        template: [\n          {\n            [templTag_arrOr]: [\n              [ { word: { text: 'can' } }, { word: { text: 'i' } } ],\n              [ { word: { text: 'can' } }, { word: { text: 'we' } } ],\n              [ { word: { text: 'can' } }, { word: { text: 'you' } } ],\n              [\n                { word: { text: 'is' } },\n                { word: { text: 'it' } },\n                { word: { text: 'ok' } },\n                { word: { text: 'to' } },\n              ],\n              [\n                { word: { text: 'are' } },\n                { word: { text: 'we' } },\n                { word: { text: 'allowed' } },\n                { word: { text: 'to' } },\n              ],\n            ],\n          },\n        ],\n      },\n      [\n        {\n          partial: 'query_if_action_is_allowed',\n        },\n      ],\n    ),\n  ).toEqual([\n    { partial: 'query_if_action_is_allowed' },\n    { word: { text: 'bring' } },\n    { word: { text: 'an empty' } },\n    { word: { text: 'water' } },\n    { word: { text: 'bottle' } },\n  ])\n})\n"],"file":"template-matchAndReplace.test.js"}