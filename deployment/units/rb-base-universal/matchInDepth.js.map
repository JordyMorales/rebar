{"version":3,"sources":["../../../units/rb-base-universal/matchInDepth.js"],"names":["matchInDepth","payload","condition","inCondition","midMarker_in","inConditionOption","ix","payloadValue","conditionValue","midMarker_notNull","midMarker_isNull","typeOfValue","typeOfCondition"],"mappings":";;AAEA;;;;;;AAMe,SAASA,YAAT,CAAsBC,OAAtB,EAAoCC,SAApC,EAAoD;AACjE;AACE,SAAOA,SAAP,KAAqB,QAArB;AACA,SAAOA,SAAP,KAAqB,QADrB;AAEA,SAAOA,SAAP,KAAqB,SAHvB;AAIE;AACA,WAAOD,OAAO,KAAKC,SAAnB;AACD;;AAED;AACA,MAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,UAAMC,WAAW,GAAGD,SAAS,CAACE,iCAAD,CAA7B;;AAEA,QAAID,WAAJ,EAAiB;AACf;AACA,WAAK,IAAIE,iBAAT,IAA8BF,WAA9B,EAA2C;AACzC,YAAIH,YAAY,CAACC,OAAD,EAAUI,iBAAV,CAAhB,EAA8C;AAC5C,iBAAO,IAAP;AACD;AACF;AACF;;AAED,SAAK,IAAIC,EAAT,IAAeJ,SAAf,EAA0B;AACxB,YAAMK,YAAY,GAAGN,OAAO,CAACK,EAAD,CAA5B;AACA,YAAME,cAAc,GAAGN,SAAS,CAACI,EAAD,CAAhC;;AAEA,UAAIE,cAAc,KAAKC,sCAAvB,EAA0C;AACxC,YAAIF,YAAY,IAAI,IAApB,EAA0B;AACxB,iBAAO,KAAP;AACD,SAFD,MAEO;AACL;AACD;AACF;AACD,UAAIC,cAAc,KAAKE,qCAAvB,EAAyC;AACvC,YAAIH,YAAY,IAAI,IAApB,EAA0B;AACxB,iBAAO,KAAP;AACD,SAFD,MAEO;AACL;AACD;AACF;;AAED,YAAMI,WAAW,GAAG,OAAOJ,YAA3B;AACA,YAAMK,eAAe,GAAG,OAAOJ,cAA/B;;AAEA,UAAII,eAAe,KAAK,QAAxB,EAAkC;AAChC;;AAEA,YAAID,WAAW,KAAKC,eAApB,EAAqC;AACnC,iBAAO,KAAP;AACD;AACD,YAAI,CAACZ,YAAY,CAACO,YAAD,EAAeC,cAAf,CAAjB,EAAiD;AAC/C,iBAAO,KAAP;AACD;AACF,OATD,MASO;AACL,YAAID,YAAY,KAAKC,cAArB,EAAqC;AACnC,iBAAO,KAAP;AACD;AACF;AACF;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["// @flow\n\nimport {\n  midMarker_notNull,\n  midMarker_isNull,\n  midMarker_in\n} from './matchInDepthMarkers'\n\nexport default function matchInDepth(payload: any, condition: any) {\n  if (\n    typeof condition === 'string' ||\n    typeof condition === 'number' ||\n    typeof condition === 'boolean'\n  ) {\n    return payload === condition\n  }\n\n  // Check for in condition\n  if (typeof condition === 'object') {\n    const inCondition = condition[midMarker_in]\n\n    if (inCondition) {\n      // In condition - match until one match is found\n      for (let inConditionOption of inCondition) {\n        if (matchInDepth(payload, inConditionOption)) {\n          return true\n        }\n      }\n    }\n\n    for (let ix in condition) {\n      const payloadValue = payload[ix]\n      const conditionValue = condition[ix]\n\n      if (conditionValue === midMarker_notNull) {\n        if (payloadValue == null) {\n          return false\n        } else {\n          continue\n        }\n      }\n      if (conditionValue === midMarker_isNull) {\n        if (payloadValue != null) {\n          return false\n        } else {\n          continue\n        }\n      }\n\n      const typeOfValue = typeof payloadValue\n      const typeOfCondition = typeof conditionValue\n\n      if (typeOfCondition === 'object') {\n        // Regular object - match recursively, if the object is of the same type\n\n        if (typeOfValue !== typeOfCondition) {\n          return false\n        }\n        if (!matchInDepth(payloadValue, conditionValue)) {\n          return false\n        }\n      } else {\n        if (payloadValue !== conditionValue) {\n          return false\n        }\n      }\n    }\n  }\n\n  return true\n}\n"],"file":"matchInDepth.js"}