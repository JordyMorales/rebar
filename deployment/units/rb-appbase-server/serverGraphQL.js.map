{"version":3,"sources":["../../../units/rb-appbase-server/serverGraphQL.js"],"names":["serverGraphQL","use","bodyParser","json","req","res","next","requestLoggerGraphQL","graphQLError","message","JSON","stringify","errors","locations","line","column","stack","path","data","root","objectManager","UserAndSession","status","send","a_User","User","a_UserSession","UserSession","injectedByRebarFrameworks","userSession","verificationIssue","schema","rootValue","pretty","graphiql","err"],"mappings":";;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;AAKA;;;AAGA,6D,8FAHsC;AAEtC;AAGA;AACA,MAAMA,aAAa,GAAG,uBAAtB;;AAEA;AACAA,aAAa,CAACC,GAAd,CAAmBC,oBAAWC,IAAX,EAAnB;;AAEA;AACAH,aAAa,CAACC,GAAd,CAAmB,CAAEG,GAAF,EAAOC,GAAP,EAAYC,IAAZ,KAAsB,+BAAkBF,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkCC,oCAAlC,CAAzC;;AAEA;;AAEA,SAASC,YAAT,CAAuBC,OAAvB,EAAiC;AAC/B,SAAOC,IAAI,CAACC,SAAL,CAAe;AACpBC,IAAAA,MAAM,EAAE;AACN;AACEH,MAAAA,OADF;AAEEI,MAAAA,SAAS,EAAE;AACT;AACEC,QAAAA,IAAI,EAAE,GADR;AAEEC,QAAAA,MAAM,EAAE,GAFV,EADS,CAFb;;;AAQEC,MAAAA,KAAK,EAAE,gCART;AASEC,MAAAA,IAAI,EAAE,CAAE,MAAF,CATR,EADM,CADY;;;AAcpBC,IAAAA,IAAI,EAAE,IAdc,EAAf,CAAP;;AAgBD;;AAED;;AAEA,eAAeC,IAAf,CAAqBf,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAsC;AACpC,MAAI;AACF,UAAMc,aAAa,GAAG,MAAM,qCAAkBhB,GAAlB,EAAuBC,GAAvB,CAA5B;;AAEA,UAAMgB,cAAc,GAAG,MAAM,6DAAuCD,aAAvC,EAAsDhB,GAAtD,EAA2D,IAA3D,CAA7B;AACA,QAAK,CAACiB,cAAN,EAAuB;AACrBhB,MAAAA,GAAG;AACAiB,MAAAA,MADH,CACW,GADX;AAEGC,MAAAA,IAFH,CAESf,YAAY,CAAE,gEAAF,CAFrB;AAGA;AACD;;AAED,UAAMgB,MAAM,GAAGH,cAAc,CAACI,IAA9B;AACA,UAAMC,aAAa,GAAGL,cAAc,CAACM,WAArC;;AAEAtB,IAAAA,GAAG,CAACuB,yBAAJ,GAAgC,EAAEC,WAAW,EAAEH,aAAf,EAAhC;;AAEA,UAAMI,iBAAiB,GAAG,wCAAkBN,MAAlB,EAA0BpB,GAA1B,CAA1B;AACA,QAAK0B,iBAAL,EAAyB;AACvB,uDAA2B1B,GAA3B,EAAgCC,GAAhC,EAAqCyB,iBAArC,EAAwD,IAAxD;AACA;AACD;;AAED,iCAAa,MAAM;AACjB,aAAO;AACLC,QAAAA,MAAM,EAAEA,eADH;AAELC,QAAAA,SAAS,EAAEZ,aAFN;AAGLa,QAAAA,MAAM,EAAE,IAHH;AAILC,QAAAA,QAAQ,EAAE,KAJL,CAIY;AAJZ,OAAP;AAMD,KAPD,EAOI9B,GAPJ,EAOSC,GAPT,EAOcC,IAPd;AAQD,GA9BD,CA8BE,OAAQ6B,GAAR,EAAc;AACd,sBAAK,OAAL,EAAc,+CAAd,EAA+D,EAAEA,GAAF,EAA/D;AACA9B,IAAAA,GAAG,CAACiB,MAAJ,CAAY,GAAZ,EAAkBC,IAAlB,CAAwBf,YAAY,CAAE,mDAAF,CAApC;AACD;AACF;AACDR,aAAa,CAACC,GAAd,CAAmB,GAAnB,EAAwBkB,IAAxB,E;;AAEenB,a","sourcesContent":["// @flow\n\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport graphQLHTTP from 'express-graphql'\n\nimport log from '../rb-base-server/log'\nimport { requestLoggerGraphQL } from '../_configuration/rb-base-server/requestLoggers'\nimport logServerRequest from '../rb-base-server/logServerRequest'\nimport { getObjectManager } from '../rb-base-server/ObjectManager'\n\nimport {\n  getUserAndSessionIDByUserToken1_async,\n  verifyUserToken2,\n  serveAuthenticationFailed,\n} from './checkCredentials'\nimport schema from './graphql/schema' // Schema for GraphQL server\n\n// Guarantee that all object registrations and schema definitions are executed\nimport '../_configuration/rb-base-server/graphql/_schemas'\n\n// Create router for GraphQL\nconst serverGraphQL = express()\n\n// Set up parser\nserverGraphQL.use( bodyParser.json() )\n\n// Set up logging\nserverGraphQL.use( ( req, res, next ) => logServerRequest( req, res, next, requestLoggerGraphQL ) )\n\n//\n\nfunction graphQLError( message ) {\n  return JSON.stringify({\n    errors: [\n      {\n        message,\n        locations: [\n          {\n            line: 888,\n            column: 777,\n          },\n        ],\n        stack: 'No stack information available',\n        path: [ 'node' ],\n      },\n    ],\n    data: null,\n  })\n}\n\n//\n\nasync function root( req, res, next ) {\n  try {\n    const objectManager = await getObjectManager( req, res )\n\n    const UserAndSession = await getUserAndSessionIDByUserToken1_async( objectManager, req, true )\n    if ( !UserAndSession ) {\n      res\n        .status( 500 )\n        .send( graphQLError( 'GraphQL server was given a session, but the session is invalid' ) )\n      return\n    }\n\n    const a_User = UserAndSession.User\n    const a_UserSession = UserAndSession.UserSession\n\n    res.injectedByRebarFrameworks = { userSession: a_UserSession }\n\n    const verificationIssue = verifyUserToken2( a_User, req )\n    if ( verificationIssue ) {\n      serveAuthenticationFailed( req, res, verificationIssue, true )\n      return\n    }\n\n    graphQLHTTP( () => {\n      return {\n        schema: schema,\n        rootValue: objectManager,\n        pretty: true,\n        graphiql: false, // TODO [Sandstone][server] Look into re-enabling GraphiQL\n      }\n    })( req, res, next )\n  } catch ( err ) {\n    log( 'error', 'rb-appbase-server serverGraphQL root: Failed ', { err })\n    res.status( 500 ).send( graphQLError( 'An error has occurred while running GraphQL query' ) )\n  }\n}\nserverGraphQL.use( '/', root )\n\nexport default serverGraphQL\n"],"file":"serverGraphQL.js"}