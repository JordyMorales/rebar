{"version":3,"sources":["../../../units/rb-appbase-server/serverGraphQL.js"],"names":["serverGraphQL","use","bodyParser","json","req","res","next","requestLoggerGraphQL","graphQLError","message","JSON","stringify","errors","locations","line","column","stack","path","data","root","objectManager","ixTry","UserAndSession","status","send","a_User","User","a_UserSession","UserSession","injectedByRebarFrameworks","userSession","verificationResult","issue","UserToken2FromRequest","console","log","UserSession_id","id","cookie","httpOnly","expires","Date","schema","rootValue","pretty","graphiql","err"],"mappings":"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","sourcesContent":["// @flow\n\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport graphQLHTTP from 'express-graphql'\n\nimport delayPromise from '../rb-base-universal/delayPromise'\nimport log from '../rb-base-server/log'\nimport { requestLoggerGraphQL } from '../_configuration/rb-base-server/requestLoggers'\nimport logServerRequest from '../rb-base-server/logServerRequest'\nimport { getObjectManager } from '../rb-base-server/ObjectManager'\n\nimport { getUserAndSessionIDByUserToken1_async, verifyUserToken2 } from './checkCredentials'\nimport schema from './graphql/schema' // Schema for GraphQL server\n\n// Guarantee that all object registrations and schema definitions are executed\nimport '../_configuration/rb-base-server/graphql/_schemas'\n\n// Create router for GraphQL\nconst serverGraphQL = express()\n\n// Set up parser\nserverGraphQL.use( bodyParser.json() )\n\n// Set up logging\nserverGraphQL.use( ( req, res, next ) => logServerRequest( req, res, next, requestLoggerGraphQL ) )\n\n//\n\nfunction graphQLError( message ) {\n  return JSON.stringify({\n    errors: [\n      {\n        message,\n        locations: [\n          {\n            line: 888,\n            column: 777,\n          },\n        ],\n        stack: 'No stack information available',\n        path: [ 'node' ],\n      },\n    ],\n    data: null,\n  })\n}\n\n//\n\nasync function root( req, res, next ) {\n  let objectManager\n  try {\n    for ( let ixTry = 1; ; ixTry++ ) {\n      objectManager = await getObjectManager( req, res )\n\n      const UserAndSession = await getUserAndSessionIDByUserToken1_async( objectManager, req, true )\n      if ( !UserAndSession ) {\n        res\n          .status( 500 )\n          .send( graphQLError( 'GraphQL server was given a session, but the session is invalid' ) )\n        return\n      }\n\n      const a_User = UserAndSession.User\n      const a_UserSession = UserAndSession.UserSession\n\n      res.injectedByRebarFrameworks = { userSession: a_UserSession }\n\n      // Verify user\n      const verificationResult = verifyUserToken2( a_User, req, 'headers' )\n\n      // If UserToken2 was provided, but verification fails, wait\n\n      if (\n        ixTry <= 5 &&\n        verificationResult &&\n        verificationResult.issue === 'Authentication token expected' &&\n        verificationResult.UserToken2FromRequest\n      ) {\n        // Wait for the user to 'appear' in the database as eventual consistency kicks in\n        await delayPromise( 100 * ixTry )\n        console.log( 'XXX user not eventually consistently found' )\n      } else if ( verificationResult ) {\n        log( 'warn', 'rb-appbase-server serverGraphQL root: Checking credentials failed', {\n          ixTry,\n          verificationResult,\n          req,\n          res,\n          UserSession_id: UserAndSession.UserSession ? UserAndSession.UserSession.id : 'no session',\n        })\n\n        // Expire cookie. This is the only way to 'delete' a cookie\n        res.cookie( 'UserToken1', '', { httpOnly: true, expires: new Date( 1 ) })\n        res.status( 403 ).send( '{ \"error\": \"Authentication Failed\" }' )\n\n        return\n      } else {\n        // verificationResult is null which means verification succeeded, proceed to\n        // server GraphQL\n        break\n      }\n    }\n\n    graphQLHTTP( () => {\n      return {\n        schema: schema,\n        rootValue: objectManager,\n        pretty: true,\n        graphiql: false, // TODO [3 Sandstone][server] Look into re-enabling GraphiQL\n      }\n    })( req, res, next )\n  } catch ( err ) {\n    log( 'error', 'rb-appbase-server serverGraphQL root: Failed ', { err, req, objectManager })\n    res.status( 500 ).send( graphQLError( 'An error has occurred while running GraphQL query' ) )\n  }\n}\nserverGraphQL.use( '/', root )\n\nexport default serverGraphQL\n"],"file":"serverGraphQL.js"}