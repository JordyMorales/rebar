{"version":3,"sources":["../../../units/rb-appbase-server/serverAuth.js"],"names":["require","load","envJWTSecret","process","env","JWT_SECRET","Error","serverAuth","use","bodyParser","json","req","res","next","requestLoggerAuth","login","step","objectManager","siteInformation","UserAccount_Identifier","body","toLowerCase","User_Secret","arr_UserAccount","getObjectList_async","UserAccount_artifact_id","artifact_id","UserAccount_Type","length","status","error","a_UserAccount","Promise","resolve","bcryptjs","compare","UserAccount_Secret","err","passwordMatch","setViewerUserId","UserAccount_User_id","a_UserSession","UserSession_artifact_id","UserSession_User_id","UserSession_Start","Date","UserSession_Expired","UserSession_IsAnonymous","add","injectedByRebarFrameworks","userSession","UserToken1","jwt","encode","session_id","id","cookie","httpOnly","maxAge","a_User","getOneObject_async","User_artifact_id","UserToken2","success","send","JSON","stringify","post","createuser","hash","accountNameIsValidEmail","User_PrimaryEmail","Object","assign","Math","random","toString","substring","User_DisplayName","assignPrimaryKey","all","changeSecret","User_CurrentSecret","User_NewSecret","update","logout","UserSession","remove","expires"],"mappings":"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","sourcesContent":["// @flow\n\nimport bcryptjs from 'bcryptjs'\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport jwt from 'jwt-simple'\n\nimport authExtensions from '../_configuration/rb-base-server/authExtensions'\nimport delayPromise from '../rb-base-universal/delayPromise'\nimport getNewUser from '../_configuration/rb-base-server/graphql/model/getNewUser'\nimport log from '../rb-base-server/log'\nimport onCreateUser from '../_configuration/rb-appbase-server/onCreateUser'\nimport { validateEmail } from '../rb-base-universal/validation'\nimport { requestLoggerAuth } from '../_configuration/rb-base-server/requestLoggers'\nimport logServerRequest from '../rb-base-server/logServerRequest'\nimport { getObjectManager } from '../rb-base-server/ObjectManager'\n\nimport { getUserAndSessionIDByUserToken1_async } from './checkCredentials'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst envJWTSecret = process.env.JWT_SECRET\nif ( envJWTSecret == null || typeof envJWTSecret !== 'string' )\n  throw new Error(\n    'Error: rb-appbase-server/serverAuth requires the environment variable JWT_SECRET to be set',\n  )\n\n//\n\nconst serverAuth = express()\n\nserverAuth.use( bodyParser.json() )\nserverAuth.use( ( req, res, next ) => logServerRequest( req, res, next, requestLoggerAuth ) )\n\n// TODO: [2 Crossroads][server] When logging in as a different user, logout of the old session should be performed first so that the session is deleted.\n\n//\n\nasync function login( req, res ) {\n  let step = 'initialize'\n\n  try {\n    // $AssureFlow yes, the Object Manager will have all the fields\n    const objectManager = await getObjectManager( req, res )\n\n    if ( !objectManager.siteInformation ) {\n      throw new Error( 'Site information not found' )\n    }\n\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    await delayPromise( 1000 ) // Wait for a second to hamper a possible potential brute force attack\n\n    step = 'Find user'\n\n    const arr_UserAccount = await objectManager.getObjectList_async( 'UserAccount', {\n      UserAccount_artifact_id: objectManager.siteInformation.artifact_id,\n      UserAccount_Identifier,\n      UserAccount_Type: 'un',\n    })\n\n    if ( arr_UserAccount.length === 0 ) {\n      res.status( 401 ).json({ error: 'User account not found' })\n      return\n    }\n\n    // Use first user found, there should be only one anyway\n    const a_UserAccount = arr_UserAccount[0]\n\n    step = 'Check password'\n    if (\n      !( await new Promise( resolve =>\n        bcryptjs.compare( User_Secret, a_UserAccount.UserAccount_Secret, ( err, passwordMatch ) =>\n          resolve( passwordMatch ),\n        ),\n      ) )\n    ) {\n      res.status( 401 ).json({ error: 'Incorrect password' })\n      return\n    }\n\n    // ObjectManager will try to set the create_by and modified_by fields. In order to do this it needs\n    // the viewer user id to be set\n    objectManager.setViewerUserId( a_UserAccount.UserAccount_User_id )\n\n    step = 'Create user session object'\n    const a_UserSession = {\n      UserSession_artifact_id: objectManager.siteInformation.artifact_id, // Get previously assigned primary key\n      UserSession_User_id: a_UserAccount.UserAccount_User_id,\n      UserSession_Start: new Date(),\n      UserSession_Expired: false,\n      UserSession_IsAnonymous: false,\n    }\n\n    // Add session to database\n    await objectManager.add( 'UserSession', a_UserSession )\n    res.injectedByRebarFrameworks = { userSession: a_UserSession }\n\n    step = 'Create JWT token'\n    const UserToken1 = jwt.encode(\n      // $AssureFlow - id will be filled in by ObjectManager.add\n      { session_id: a_UserSession.id },\n      envJWTSecret,\n    )\n\n    res.cookie( 'UserToken1', UserToken1, {\n      httpOnly: true,\n      maxAge: 30 * 24 * 60 * 60 * 1000,\n    })\n\n    step = 'Create user token 2'\n    const a_User = await objectManager.getOneObject_async( 'User', {\n      User_artifact_id: objectManager.siteInformation.artifact_id,\n      id: a_UserAccount.UserAccount_User_id,\n    })\n    const { UserToken2 } = a_User\n\n    step = 'Respond with success'\n    res.json({ success: true, UserToken2 })\n  } catch ( err ) {\n    log( 'error', 'rb-appbase-server serverAuth login: Failed', { step, err })\n    res.status( 500 ).send(\n      JSON.stringify({\n        error: 'An error has occurred while attempting login',\n      }),\n    )\n  }\n}\nserverAuth.post( '/login', login )\n\nasync function createuser( req, res ) {\n  let step = 'initialize'\n\n  try {\n    const objectManager = await getObjectManager( req, res )\n\n    if ( !objectManager.siteInformation ) {\n      throw new Error( 'Site information not found' )\n    }\n\n    step = 'Get user account'\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    const arr_UserAccount = await objectManager.getObjectList_async( 'UserAccount', {\n      UserAccount_artifact_id: objectManager.siteInformation.artifact_id,\n      UserAccount_Identifier,\n    })\n\n    if ( arr_UserAccount.length > 0 ) {\n      res.status( 500 ).send(\n        JSON.stringify({\n          error: 'User account already exists',\n        }),\n      )\n    }\n\n    step = 'Create user account secret'\n    const UserAccount_Secret = await new Promise( resolve =>\n      bcryptjs.hash( User_Secret, 8, ( err, hash ) => resolve( hash ) ),\n    )\n\n    // If account name looks like email address, use it as email\n    const accountNameIsValidEmail = validateEmail( UserAccount_Identifier )\n    const User_PrimaryEmail = accountNameIsValidEmail ? UserAccount_Identifier : ''\n\n    step = 'Create the user object'\n    const a_User = Object.assign( getNewUser( objectManager.siteInformation.artifact_id ), {\n      User_artifact_id: objectManager.siteInformation.artifact_id,\n      UserToken2:\n        Math.random()\n          .toString( 36 )\n          .substring( 2 ) +\n        Math.random()\n          .toString( 36 )\n          .substring( 2 ) +\n        Math.random()\n          .toString( 36 )\n          .substring( 2 ) +\n        Math.random()\n          .toString( 36 )\n          .substring( 2 ),\n      User_DisplayName: UserAccount_Identifier,\n      User_PrimaryEmail: User_PrimaryEmail,\n    })\n    objectManager.assignPrimaryKey( 'User', a_User )\n    objectManager.setViewerUserId( a_User.id )\n\n    step = 'Create the user session object'\n    const a_UserSession = {\n      UserSession_artifact_id: objectManager.siteInformation.artifact_id,\n      // Get previously assigned primary key\n      UserSession_User_id: a_User.id,\n      UserSession_Start: new Date(),\n      UserSession_Expired: false,\n      UserSession_IsAnonymous: false,\n    }\n\n    step = 'Create the user account object'\n    const a_UserAccount = {\n      UserAccount_artifact_id: objectManager.siteInformation.artifact_id,\n      // Get previously assigned primary key\n      UserAccount_User_id: a_User.id,\n      UserAccount_Identifier,\n      UserAccount_Secret,\n      UserAccount_Type: 'un',\n    }\n\n    step = 'Add user session and account to database'\n    await Promise.all([\n      objectManager.add( 'User', a_User ),\n      objectManager.add( 'UserSession', a_UserSession ),\n      objectManager.add( 'UserAccount', a_UserAccount ),\n      ...onCreateUser( a_User.id, objectManager ),\n    ])\n\n    res.injectedByRebarFrameworks = { userSession: a_UserSession }\n\n    step = 'Create a JWT token'\n    const UserToken1 = jwt.encode(\n      // $AssureFlow - id will be filled in by ObjectManager.add\n      { session_id: a_UserSession.id },\n      envJWTSecret,\n    )\n\n    step = 'Set user token 1 cookie'\n    res.cookie( 'UserToken1', UserToken1, { httpOnly: true, maxAge: 30 * 24 * 60 * 60 * 1000 })\n\n    step = 'Respond with success'\n    res.json({ success: true })\n  } catch ( err ) {\n    log( 'error', 'rb-appbase-server serverAuth create user: Failed', { step, err })\n    res.status( 500 ).send(\n      JSON.stringify({\n        error: 'An error has occurred while attempting to create user',\n      }),\n    )\n  }\n}\nserverAuth.post( '/createuser', createuser )\n\nasync function changeSecret( req, res ) {\n  let step = 'initialize'\n\n  try {\n    const objectManager = await getObjectManager( req, res )\n\n    step = 'Verify that caller is a correctly logged in user'\n    await getUserAndSessionIDByUserToken1_async( objectManager, req, false )\n\n    step = 'Locate user account'\n    // user id and artifact id will be picked up from object manager\n    const arr_UserAccount = await objectManager.getObjectList_async( 'UserAccount', {\n      UserAccount_Type: 'un',\n    })\n\n    if ( arr_UserAccount.length === 0 ) {\n      res.status( 401 ).json({ error: 'User account not found' })\n      return\n    }\n\n    // Use first user found, there should be only one anyway\n    const a_UserAccount = arr_UserAccount[0]\n\n    step = 'Verify the current user secret'\n    const { User_CurrentSecret } = req.body\n    if (\n      !( await new Promise( resolve =>\n        bcryptjs.compare(\n          User_CurrentSecret,\n          a_UserAccount.UserAccount_Secret,\n          ( err, passwordMatch ) => resolve( passwordMatch ),\n        ),\n      ) )\n    ) {\n      res.status( 401 ).json({ error: 'Incorrect current password' })\n      return\n    }\n\n    step = 'Hash the new user secret'\n    const { User_NewSecret } = req.body\n    const UserAccount_Secret = await new Promise( resolve =>\n      bcryptjs.hash( User_NewSecret, 8, ( err, hash ) => resolve( hash ) ),\n    )\n\n    step = 'Write new secret hash to db'\n    a_UserAccount.UserAccount_Secret = UserAccount_Secret\n    await objectManager.update( 'UserAccount', a_UserAccount )\n\n    res.json({ success: true })\n  } catch ( err ) {\n    log( 'error', 'rb-appbase-server serverAuth change-secret: Failed', { err, step })\n    res.status( 500 ).send(\n      JSON.stringify({\n        error: 'An error has occurred while attempting to change password',\n      }),\n    )\n  }\n}\nserverAuth.post( '/change-secret', changeSecret )\n\nasync function logout( req, res ) {\n  try {\n    const objectManager = await getObjectManager( req, res )\n\n    // Notice that get user and session will return null if user is not found, hence the next line would\n    // fail. This is OK because we have a catch in the end.\n    const userSession = ( await getUserAndSessionIDByUserToken1_async( objectManager, req, false ) )\n      .UserSession\n\n    await objectManager.remove( 'UserSession', {\n      id: userSession.id,\n    })\n\n    res.cookie( 'UserToken1', '', { httpOnly: true, expires: new Date( 1 ) })\n    res.json({ success: true })\n  } catch ( err ) {\n    log( 'error', 'rb-appbase-server serverAuth logout: Failed', { err })\n    res.status( 500 ).send(\n      JSON.stringify({\n        error: 'An error has occurred while attempting to log out',\n      }),\n    )\n  }\n}\nserverAuth.post( '/logout', logout )\n\n// Add extensions - custom configurations\nauthExtensions( serverAuth )\n\nexport default serverAuth\n"],"file":"serverAuth.js"}