{"version":3,"sources":["../../../units/rb-appbase-server/contentCreatorWebApp_async.js"],"names":["require","load","envHost","process","env","HOST","Error","envPort","PORT","htmlEjs","ejs","compile","fs","readFileSync","path","resolve","__dirname","getAssetsPath","siteInformation","NODE_ENV","assetsPathPrefix","siteConfiguration","webapp","publicURL","assetsPath","version","envPortWebpack","PORT_WEBPACK","render","renderError","obj","error","status","contentCreatorWebApp_async","reqUrl","reqUserAgent","reqUserToken1","passUserToken1ToHeaders","artifactNamePrefix","graphQLServerUrl","fetcher","FetcherServer","UserToken2ServerRendering","userAgent","siteConfigurationSubset","builder","siteRouteConfig","redirect","element","url","historyMiddlewares","routeConfig","resolver","redirectUrl","relayPayloads","isJSON","indexOf","htmlContent","sheets","SheetsRegistry","helmet","Helmet","rewind","rootHTML","ReactDOMServer","renderToString","assets_path","root_html","server_side_styles","toString","htmlHeadAdditions","JSON","stringify","UserToken1","err","NestedError"],"mappings":"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","sourcesContent":["// @flow\n\nimport fs from 'fs'\nimport path from 'path'\n\nimport ejs from 'ejs'\nimport createRender from 'found/lib/createRender'\nimport { getFarceResult } from 'found/lib/server'\nimport NestedError from 'nested-error-stacks'\nimport React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport { JssProvider, SheetsRegistry } from 'react-jss'\nimport Helmet from 'react-helmet'\nimport serialize from 'serialize-javascript'\n\nimport AppWrapper from '../_configuration/rb-appbase-webapp/AppWrapper'\nimport ErrorComponent from '../_configuration/rb-appbase-webapp/ErrorComponent'\nimport getGraphQLLocalServerURL from '../_configuration/rb-base-server/getGraphQLLocalServerURL'\nimport log from '../rb-base-server/log'\nimport { version } from '../../package.json'\nimport UserToken2ServerRendering from '../_configuration/rb-base-server/UserToken2ServerRendering'\nimport htmlHeadAdditions from '../_configuration/rb-appbase-webapp/htmlHeadAdditions'\nimport type { SiteInformation } from '../rb-appbase-server/types/SiteInformation.types'\nimport {\n  createResolver,\n  historyMiddlewares,\n  routeConfig,\n} from '../rb-appbase-webapp/router'\n\nimport FetcherServer from './fetcherServer'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst envHost = process.env.HOST\nif ( envHost == null || typeof envHost !== 'string' )\n  throw new Error(\n    'Error: rb-appbase-webapp requires the environment variable HOST to be set'\n  )\n\nconst envPort = process.env.PORT\nif ( envPort == null || typeof envPort !== 'string' )\n  throw new Error(\n    'Error: rb-appbase-webapp requires the environment variable PORT to be set'\n  )\n\n//\n\n// HTML page template\nvar htmlEjs = ejs.compile(\n  fs.readFileSync( path.resolve( __dirname, 'html.ejs' ), 'utf8' )\n)\n\n//\n\nfunction getAssetsPath( siteInformation: SiteInformation ): string {\n  if ( process.env.NODE_ENV === 'production' ) {\n    // For when per-site assets are created\n    /*\n    const assetsPath =\n      siteInformation.isMaDesignerDisabled || siteInformation.inEditingMode\n        ? // When editing in production, use the assets with the configuration readign code intact (built when cutting a site version)\n          `/assets/${version}`\n        : // When in production mode, serve the assets compiled by designer\n          `/sassets/${version}.${siteInformation.siteConfiguration.metadata.version}`\n    */\n\n    // If public URL is available in site configuration, prefix the assets with the public URL\n    let assetsPathPrefix = ''\n    if (\n      siteInformation.siteConfiguration.webapp &&\n      siteInformation.siteConfiguration.webapp.publicURL\n    ) {\n      assetsPathPrefix = siteInformation.siteConfiguration.webapp.publicURL\n    }\n\n    // Asset path is versioned\n    const assetsPath = assetsPathPrefix + `/assets/${version}`\n    return assetsPath\n  } else {\n    // Get webpack port only in development. In production it can be omitted\n    const envPortWebpack = process.env.PORT_WEBPACK\n    if ( envPortWebpack == null || typeof envPortWebpack !== 'string' )\n      throw new Error(\n        'Error: rb-appbase-webapp requires the environment variable PORT_WEBPACK to be set'\n      )\n\n    // When in development, always go to webpack over http\n    return `http://${envHost}:${envPortWebpack}/${version}`\n  }\n}\n\nconst render = createRender({\n  renderError( obj: Object ): React$Element<*> {\n    const { error } = obj\n\n    if ( error.status !== 404 ) {\n      log( 'error', 'Error: rb-appbase-webapp createRender renderError', error )\n    }\n\n    return <ErrorComponent httpStatus={error.status} />\n  },\n})\n\nexport default ( async function contentCreatorWebApp_async(\n  siteInformation: SiteInformation,\n  reqUrl: string,\n  reqUserAgent: string,\n  reqUserToken1: ?string,\n  passUserToken1ToHeaders: boolean\n) {\n  try {\n    const assetsPath = getAssetsPath( siteInformation )\n\n    // It is possible that artifact_id can not be determined during development. For instance, when browsing\n    // the project on localhost using a specific port, Chrome will request robots.txt and favicon.ico and\n    // they will not have the proper dev-host header. In this case simply report the file missing.\n    // This does not affect operation in production, since host will be passed for all requests.\n    if ( !siteInformation ) {\n      return { status: 404 }\n    }\n\n    // If public URL is available in site configuration, prefix the assets with the public URL\n    let artifactNamePrefix = ''\n    if (\n      siteInformation.siteConfiguration.webapp &&\n      siteInformation.siteConfiguration.webapp.artifactNamePrefix\n    ) {\n      artifactNamePrefix =\n        siteInformation.siteConfiguration.webapp.artifactNamePrefix\n    }\n\n    const graphQLServerUrl =\n      `http://${envHost}:${envPort}` +\n      artifactNamePrefix +\n      getGraphQLLocalServerURL( siteInformation )\n\n    const fetcher = new FetcherServer(\n      graphQLServerUrl,\n      reqUserToken1,\n      UserToken2ServerRendering\n    )\n\n    const userAgent = reqUserAgent\n    const { siteConfiguration } = siteInformation\n    const siteConfigurationSubset = {\n      webapp: siteConfiguration.webapp,\n      builder: siteConfiguration.builder,\n    }\n\n    const siteRouteConfig = routeConfig( siteConfigurationSubset )\n\n    const { redirect, element } = await getFarceResult({\n      url: reqUrl,\n      historyMiddlewares,\n      routeConfig: siteRouteConfig,\n      resolver: createResolver( fetcher ),\n      render,\n    })\n\n    if ( redirect ) {\n      return { status: 302, redirectUrl: redirect.url }\n    }\n\n    const relayPayloads = serialize( fetcher, { isJSON: true })\n\n    if (\n      typeof relayPayloads === 'string' &&\n      relayPayloads.indexOf(\n        // Notice that the string has no closing brace. A typical error string looks like:\n        // '[{\"errors\":[{\"message\":\"GraphQL server was given a session, but the session is invalid\",\n        // \"locations\":[{\"line\":888,\"column\":777}],\"stack\":\"No stack information available\",\n        // \"path\":[\"node\"]}],\"data\":null}]'\n        '{\"message\":\"GraphQL server was given a session, but the session is invalid\"'\n      ) > 0\n    ) {\n      return {\n        status: 403,\n        htmlContent:\n          'The server was given a session, but the session is invalid',\n      }\n    }\n\n    // [2 Crossroads][server] Update server rendering according to https://material-ui.com/guides/server-rendering/\n    const sheets = new SheetsRegistry()\n    const helmet = Helmet.rewind()\n\n    const rootHTML = ReactDOMServer.renderToString(\n      <JssProvider registry={sheets}>\n        <AppWrapper\n          userAgent={userAgent}\n          siteConfiguration={siteConfigurationSubset}\n          url={reqUrl}\n        >\n          {element}\n        </AppWrapper>\n      </JssProvider>\n    )\n\n    const htmlContent = htmlEjs({\n      assets_path: assetsPath,\n      root_html: rootHTML,\n      server_side_styles: sheets.toString(),\n      helmet,\n      htmlHeadAdditions,\n      siteConfiguration: JSON.stringify( siteConfigurationSubset ),\n      relayPayloads,\n      UserToken1: JSON.stringify(\n        passUserToken1ToHeaders ? reqUserToken1 : null\n      ),\n    })\n\n    return {\n      status: 200,\n      htmlContent,\n    }\n  } catch ( err ) {\n    throw new NestedError( 'Rendering failed', err )\n  }\n})\n"],"file":"contentCreatorWebApp_async.js"}