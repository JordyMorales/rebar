{"version":3,"sources":["../../../units/rb-appbase-server/contentCreatorWebApp_async.js"],"names":["require","load","envHost","process","env","HOST","Error","envPort","PORT","htmlEjs","ejs","compile","fs","readFileSync","path","resolve","__dirname","getAssetsPath","siteInformation","NODE_ENV","assetsPathPrefix","siteConfiguration","webapp","publicURL","assetsPath","version","envPortWebpack","PORT_WEBPACK","render","renderError","obj","error","status","contentCreatorWebApp_async","reqUrl","reqUserAgent","reqUserToken1","artifactNamePrefix","graphQLServerUrl","fetcher","FetcherServer","UserToken2ServerRendering","userAgent","siteConfigurationSubset","builder","siteRouteConfig","redirect","element","url","historyMiddlewares","routeConfig","resolver","redirectUrl","relayPayloads","isJSON","indexOf","htmlContent","sheets","SheetsRegistry","helmet","Helmet","rewind","rootHTML","ReactDOMServer","renderToString","assets_path","root_html","server_side_styles","toString","htmlHeadAdditions","JSON","stringify","err","NestedError"],"mappings":"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","sourcesContent":["// @flow\n\nimport fs from 'fs'\nimport path from 'path'\n\nimport ejs from 'ejs'\nimport createRender from 'found/lib/createRender'\nimport { getFarceResult } from 'found/lib/server'\nimport NestedError from 'nested-error-stacks'\nimport React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport { JssProvider, SheetsRegistry } from 'react-jss'\nimport Helmet from 'react-helmet'\nimport serialize from 'serialize-javascript'\n\nimport AppWrapper from '../_configuration/rb-appbase-webapp/AppWrapper'\nimport ErrorComponent from '../_configuration/rb-appbase-webapp/ErrorComponent'\nimport getGraphQLLocalServerURL from '../_configuration/rb-base-server/getGraphQLLocalServerURL'\nimport log from '../rb-base-server/log'\nimport { version } from '../../package.json'\nimport UserToken2ServerRendering from '../_configuration/rb-base-server/UserToken2ServerRendering'\nimport htmlHeadAdditions from '../_configuration/rb-appbase-webapp/htmlHeadAdditions'\nimport type { SiteInformation } from '../rb-appbase-server/types/SiteInformation.types'\nimport { createResolver, historyMiddlewares, routeConfig } from '../rb-appbase-webapp/router'\n\nimport FetcherServer from './fetcherServer'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst envHost = process.env.HOST\nif ( envHost == null || typeof envHost !== 'string' )\n  throw new Error( 'Error: rb-appbase-webapp requires the environment variable HOST to be set' )\n\nconst envPort = process.env.PORT\nif ( envPort == null || typeof envPort !== 'string' )\n  throw new Error( 'Error: rb-appbase-webapp requires the environment variable PORT to be set' )\n\n//\n\n// HTML page template\nvar htmlEjs = ejs.compile( fs.readFileSync( path.resolve( __dirname, 'html.ejs' ), 'utf8' ) )\n\n//\n\nfunction getAssetsPath( siteInformation: SiteInformation ): string {\n  if ( process.env.NODE_ENV === 'production' ) {\n    // For when per-site assets are created\n    /*\n    const assetsPath =\n      siteInformation.isMaDesignerDisabled || siteInformation.inEditingMode\n        ? // When editing in production, use the assets with the configuration readign code intact (built when cutting a site version)\n          `/assets/${version}`\n        : // When in production mode, serve the assets compiled by designer\n          `/sassets/${version}.${siteInformation.siteConfiguration.metadata.version}`\n    */\n\n    // If public URL is available in site configuration, prefix the assets with the public URL\n    let assetsPathPrefix = ''\n    if (\n      siteInformation.siteConfiguration.webapp &&\n      siteInformation.siteConfiguration.webapp.publicURL\n    ) {\n      assetsPathPrefix = siteInformation.siteConfiguration.webapp.publicURL\n    }\n\n    // Asset path is versioned\n    const assetsPath = assetsPathPrefix + `/assets/${version}`\n    return assetsPath\n  } else {\n    // Get webpack port only in development. In production it can be omitted\n    const envPortWebpack = process.env.PORT_WEBPACK\n    if ( envPortWebpack == null || typeof envPortWebpack !== 'string' )\n      throw new Error(\n        'Error: rb-appbase-webapp requires the environment variable PORT_WEBPACK to be set',\n      )\n\n    // When in development, always go to webpack over http\n    return `http://${envHost}:${envPortWebpack}/${version}`\n  }\n}\n\nconst render = createRender({\n  renderError( obj: Object ): React$Element<*> {\n    const { error } = obj\n\n    if ( error.status !== 404 ) {\n      log( 'error', 'Error: Render on server createRender renderError', error )\n    }\n\n    return <ErrorComponent httpStatus={error.status} />\n  },\n})\n\nexport default ( async function contentCreatorWebApp_async(\n  siteInformation: SiteInformation,\n  reqUrl: string,\n  reqUserAgent: string,\n  reqUserToken1: ?string,\n) {\n  try {\n    const assetsPath = getAssetsPath( siteInformation )\n\n    // It is possible that artifact_id can not be determined during development. For instance, when browsing\n    // the project on localhost using a specific port, Chrome will request robots.txt and favicon.ico and\n    // they will not have the proper dev-host header. In this case simply report the file missing.\n    // This does not affect operation in production, since host will be passed for all requests.\n    if ( !siteInformation ) {\n      return { status: 404 }\n    }\n\n    // If public URL is available in site configuration, prefix the assets with the public URL\n    let artifactNamePrefix = ''\n    if (\n      siteInformation.siteConfiguration.webapp &&\n      siteInformation.siteConfiguration.webapp.artifactNamePrefix\n    ) {\n      artifactNamePrefix = siteInformation.siteConfiguration.webapp.artifactNamePrefix\n    }\n\n    const graphQLServerUrl =\n      `http://${envHost}:${envPort}` +\n      artifactNamePrefix +\n      getGraphQLLocalServerURL( siteInformation )\n    const fetcher = new FetcherServer( graphQLServerUrl, reqUserToken1, UserToken2ServerRendering )\n\n    const userAgent = reqUserAgent\n    const { siteConfiguration } = siteInformation\n    const siteConfigurationSubset = {\n      webapp: siteConfiguration.webapp,\n      builder: siteConfiguration.builder,\n    }\n\n    const siteRouteConfig = routeConfig( siteConfigurationSubset )\n\n    const { redirect, element } = await getFarceResult({\n      url: reqUrl,\n      historyMiddlewares,\n      routeConfig: siteRouteConfig,\n      resolver: createResolver( fetcher ),\n      render,\n    })\n\n    if ( redirect ) {\n      return { status: 302, redirectUrl: redirect.url }\n    }\n\n    const relayPayloads = serialize( fetcher, { isJSON: true })\n\n    if (\n      relayPayloads.indexOf(\n        '{\"message\":\"GraphQL server was given a session, but the session is invalid\"}',\n      ) > 0\n    ) {\n      return {\n        status: 403,\n        htmlContent: 'The server was given a session, but the session is invalid',\n      }\n    }\n\n    const sheets = new SheetsRegistry()\n    const helmet = Helmet.rewind()\n\n    const rootHTML = ReactDOMServer.renderToString(\n      <JssProvider registry={sheets}>\n        <AppWrapper userAgent={userAgent} siteConfiguration={siteConfigurationSubset} url={reqUrl}>\n          {element}\n        </AppWrapper>\n      </JssProvider>,\n    )\n\n    const htmlContent = htmlEjs({\n      assets_path: assetsPath,\n      root_html: rootHTML,\n      server_side_styles: sheets.toString(),\n      helmet,\n      htmlHeadAdditions,\n      siteConfiguration: JSON.stringify( siteConfigurationSubset ),\n      relayPayloads,\n    })\n\n    return {\n      status: 200,\n      htmlContent,\n    }\n  } catch ( err ) {\n    throw new NestedError( 'Rendering failed', err )\n  }\n})\n"],"file":"contentCreatorWebApp_async.js"}