{"version":3,"sources":["../../../../units/rb-appbase-server/graphql/graphQLError.js"],"names":["Processed","Symbol","IsUserError","UserError","Error","constructor","args","name","message","captureStackTrace","defaultHandler","err","setDefaultHandler","handlerFn","maskErrors","thing","fn","GraphQLSchema","maskSchema","GraphQLObjectType","maskType","maskField","field","resolveFn","resolve","out","call","Promise","e","_resolveFn","type","getFields","fields","fieldName","Object","hasOwnProperty","schema","types","getTypeMap","typeName"],"mappings":"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","sourcesContent":["// @flow\n// This is a modified version of: https://github.com/kadirahq/graphql-errors/blob/master/lib/index.js\n\n//import uuid from 'uuid';\nimport { GraphQLObjectType, GraphQLSchema } from 'graphql'\n\nimport log from '../../rb-base-server/log'\n\n// Mark field/type/schema\nexport const Processed = Symbol()\n\n// Used to identify UserErrors\nexport const IsUserError = Symbol()\n\n// UserErrors will be sent to the user\nexport class UserError extends Error {\n  // $AssureFlow\n  constructor( ...args ) {\n    super( ...args )\n    this.name = 'Error'\n    this.message = args[0]\n\n    // $AssureFlow\n    this[IsUserError] = true\n\n    Error.captureStackTrace( this, 'Error' )\n  }\n}\n\n// Modifies errors before sending to the user\nexport let defaultHandler = function( err: any ) {\n  if ( err[IsUserError]) {\n    return err\n  }\n\n  log( 'error', 'rb-appbase-server graphQLError', { err })\n\n  err.message = 'Internal Error'\n  return err\n}\n\n// Changes the default error handler function\nexport function setDefaultHandler( handlerFn: any ) {\n  defaultHandler = handlerFn\n}\n\n// Masks graphql schemas, types or individual fields\nexport function maskErrors( thing: any, fn: any = defaultHandler ) {\n  if ( thing instanceof GraphQLSchema ) {\n    maskSchema( thing, fn )\n  } else if ( thing instanceof GraphQLObjectType ) {\n    maskType( thing, fn )\n  } else {\n    maskField( thing, fn )\n  }\n}\n\nfunction maskField( field, fn ) {\n  const resolveFn = field.resolve\n  if ( field[Processed] || !resolveFn ) {\n    return\n  }\n\n  field[Processed] = true\n  field.resolve = async function( ...args ) {\n    try {\n      const out = resolveFn.call( this, ...args )\n      return await Promise.resolve( out )\n    } catch ( e ) {\n      throw fn( e )\n    }\n  }\n\n  // save the original resolve function\n  field.resolve._resolveFn = resolveFn\n}\n\nfunction maskType( type, fn ) {\n  if ( type[Processed] || !type.getFields ) {\n    return\n  }\n\n  const fields = type.getFields()\n  for ( const fieldName in fields ) {\n    if ( !Object.hasOwnProperty.call( fields, fieldName ) ) {\n      continue\n    }\n\n    maskField( fields[fieldName], fn )\n  }\n}\n\nfunction maskSchema( schema, fn ) {\n  const types = schema.getTypeMap()\n  for ( const typeName in types ) {\n    if ( !Object.hasOwnProperty.call( types, typeName ) ) {\n      continue\n    }\n\n    maskType( types[typeName], fn )\n  }\n}\n"],"file":"graphQLError.js"}