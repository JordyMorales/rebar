{"version":3,"sources":["../../../units/rb-appbase-server/serverClientError.js"],"names":["require","load","serverClientError","use","bodyParser","json","report","req","res","step","objectManager","siteInformation","Error","body","__DO_NOT_INCLUDE__","issue_id","Math","random","toString","substring","toUpperCase","replace","err","err_info","success","status","send","JSON","stringify","error","post"],"mappings":";;AAEA;AACA;;AAEA;AACA;;AAEA,sD;;AAEA;AACAA,OAAO,CAAE,QAAF,CAAP,CAAoBC,IAApB;;AAEA;;AAEA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEAA,iBAAiB,CAACC,GAAlB,CAAuBC,oBAAWC,IAAX,EAAvB;;AAEA;;AAEA,eAAeC,MAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAkC;AAChC,MAAIC,IAAI,GAAG,YAAX;;AAEA,MAAI;AACF,UAAMC,aAAa,GAAG,MAAM,qCAAkBH,GAAlB,EAAuBC,GAAvB,CAA5B;;AAEA,QAAK,CAACE,aAAa,CAACC,eAApB,EAAsC;AACpC,YAAM,IAAIC,KAAJ,CAAW,4BAAX,CAAN;AACD;;AAED,UAAM,6DAAuCF,aAAvC,EAAsDH,GAAtD,EAA2D,IAA3D,CAAN;;AAEA;AACAA,IAAAA,GAAG,CAACM,IAAJ,CAASC,kBAAT,GAA8B,IAA9B;;AAEA;AACA,UAAMC,QAAQ,GAAG;AACfC,IAAAA,IAAI,CAACC,MAAL;AACGC,IAAAA,QADH,CACa,EADb;AAEGC,IAAAA,SAFH,CAEc,CAFd,EAEiB,CAFjB;AAGA,OAHA;AAIAH,IAAAA,IAAI,CAACC,MAAL;AACGC,IAAAA,QADH,CACa,EADb;AAEGC,IAAAA,SAFH,CAEc,CAFd,EAEiB,CAFjB,CAJA;AAOA,OAPA;AAQAH,IAAAA,IAAI,CAACC,MAAL;AACGC,IAAAA,QADH,CACa,EADb;AAEGC,IAAAA,SAFH,CAEc,CAFd,EAEiB,CAFjB,CATe;;AAadC,IAAAA,WAbc;AAcdC,IAAAA,OAdc,CAcL,GAdK,EAcA,GAdA;AAedA,IAAAA,OAfc,CAeL,GAfK,EAeA,GAfA,CAAjB;;AAiBA,sBAAK,OAAL,EAAc,KAAd,EAAqB;AACnBC,MAAAA,GAAG,EAAEf,GAAG,CAACM,IAAJ,CAASS,GADK;AAEnBC,MAAAA,QAAQ,EAAEhB,GAAG,CAACM,IAAJ,CAASU,QAFA;AAGnBb,MAAAA,aAHmB;AAInBH,MAAAA,GAJmB;AAKnBQ,MAAAA,QALmB,EAArB;;;AAQAP,IAAAA,GAAG,CAACH,IAAJ,CAAS,EAAEmB,OAAO,EAAE,IAAX,EAAiBT,QAAjB,EAAT;AACD,GAvCD,CAuCE,OAAQO,GAAR,EAAc;AACd,sBAAK,OAAL,EAAc,oDAAd,EAAoE;AAClEb,MAAAA,IADkE;AAElEa,MAAAA,GAFkE;AAGlET,MAAAA,IAAI,EAAEN,GAAG,CAACM,IAHwD,EAApE;;AAKAL,IAAAA,GAAG,CAACiB,MAAJ,CAAY,GAAZ,EAAkBC,IAAlB;AACEC,IAAAA,IAAI,CAACC,SAAL,CAAe;AACbC,MAAAA,KAAK,EAAE,oCADM,EAAf,CADF;;;AAKD;AACF;AACD3B,iBAAiB,CAAC4B,IAAlB,CAAwB,SAAxB,EAAmCxB,MAAnC,E;;AAEeJ,iB","sourcesContent":["// @flow\n\nimport bodyParser from 'body-parser'\nimport express from 'express'\n\nimport log from '../rb-base-server/log'\nimport { getObjectManager } from '../rb-base-server/ObjectManager'\n\nimport { getUserAndSessionIDByUserToken1_async } from './checkCredentials'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\n//\n\nconst serverClientError = express()\n\nserverClientError.use( bodyParser.json() )\n\n//\n\nasync function report( req, res ) {\n  let step = 'initialize'\n\n  try {\n    const objectManager = await getObjectManager( req, res )\n\n    if ( !objectManager.siteInformation ) {\n      throw new Error( 'Site information not found' )\n    }\n\n    await getUserAndSessionIDByUserToken1_async( objectManager, req, true )\n\n    // Indicate to not include body, since it is meaningless for www errors\n    req.body.__DO_NOT_INCLUDE__ = true\n\n    // Generate random ticket\n    const issue_id = (\n      Math.random()\n        .toString( 36 )\n        .substring( 2, 5 ) +\n      '-' +\n      Math.random()\n        .toString( 36 )\n        .substring( 2, 5 ) +\n      '-' +\n      Math.random()\n        .toString( 36 )\n        .substring( 2, 5 )\n    )\n      .toUpperCase()\n      .replace( 'O', '0' )\n      .replace( 'I', '1' )\n\n    log( 'error', 'WWW', {\n      err: req.body.err,\n      err_info: req.body.err_info,\n      objectManager,\n      req,\n      issue_id,\n    })\n\n    res.json({ success: true, issue_id })\n  } catch ( err ) {\n    log( 'error', 'rb-appbase-server serverClientError report: Failed', {\n      step,\n      err,\n      body: req.body,\n    })\n    res.status( 500 ).send(\n      JSON.stringify({\n        error: 'Could not record error from client',\n      }),\n    )\n  }\n}\nserverClientError.post( '/report', report )\n\nexport default serverClientError\n"],"file":"serverClientError.js"}