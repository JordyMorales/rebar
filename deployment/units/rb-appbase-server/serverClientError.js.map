{"version":3,"sources":["../../../units/rb-appbase-server/serverClientError.js"],"names":["require","config","serverClientError","use","bodyParser","json","report","req","res","step","objectManager","siteInformation","Error","body","__DO_NOT_INCLUDE__","issue_id","Math","random","toString","substring","toUpperCase","replace","err","err_info","success","status","send","JSON","stringify","error","post"],"mappings":";;AAEA;AACA;;AAEA;AACA;;AAEA,sD;;;AAGAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA;;AAEA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEAA,iBAAiB,CAACC,GAAlB,CAAsBC,oBAAWC,IAAX,EAAtB;;AAEA;;AAEA,eAAeC,MAAf,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,MAAIC,IAAI,GAAG,YAAX;;AAEA,MAAI;AACF,UAAMC,aAAa,GAAG,MAAM,qCAAiBH,GAAjB,EAAsBC,GAAtB,CAA5B;;AAEA,QAAI,CAACE,aAAa,CAACC,eAAnB,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,UAAM,6DAAsCF,aAAtC,EAAqDH,GAArD,EAA0D,IAA1D,CAAN;;AAEA;AACAA,IAAAA,GAAG,CAACM,IAAJ,CAASC,kBAAT,GAA8B,IAA9B;;AAEA;AACA,UAAMC,QAAQ,GAAG,CAACC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,EAAwC,CAAxC;AAChB,OADgB;AAEhBH,IAAAA,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,EAAwC,CAAxC,CAFgB;AAGhB,OAHgB;AAIhBH,IAAAA,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,EAAwC,CAAxC,CAJe;AAKdC,IAAAA,WALc;AAMdC,IAAAA,OANc,CAMN,GANM,EAMD,GANC;AAOdA,IAAAA,OAPc,CAON,GAPM,EAOD,GAPC,CAAjB;;AASA,sBAAI,OAAJ,EAAa,KAAb,EAAoB;AAClBC,MAAAA,GAAG,EAAEf,GAAG,CAACM,IAAJ,CAASS,GADI;AAElBC,MAAAA,QAAQ,EAAEhB,GAAG,CAACM,IAAJ,CAASU,QAFD;AAGlBb,MAAAA,aAHkB;AAIlBH,MAAAA,GAJkB;AAKlBQ,MAAAA,QALkB,EAApB;;;AAQAP,IAAAA,GAAG,CAACH,IAAJ,CAAS,EAAEmB,OAAO,EAAE,IAAX,EAAiBT,QAAjB,EAAT;AACD,GA/BD,CA+BE,OAAOO,GAAP,EAAY;AACZ,sBAAI,OAAJ,EAAa,oDAAb,EAAmE;AACjEb,MAAAA,IADiE;AAEjEa,MAAAA,GAFiE;AAGjET,MAAAA,IAAI,EAAEN,GAAG,CAACM,IAHuD,EAAnE;;AAKAL,IAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACEC,IAAAA,IAAI,CAACC,SAAL,CAAe;AACbC,MAAAA,KAAK,EAAE,oCADM,EAAf,CADF;;;AAKD;AACF;;AAED3B,iBAAiB,CAAC4B,IAAlB,CAAuB,SAAvB,EAAkCxB,MAAlC,E;;AAEeJ,iB","sourcesContent":["// @flow\n\nimport bodyParser from 'body-parser'\nimport express from 'express'\n\nimport log from '../rb-base-server/log'\nimport { getObjectManager } from '../rb-base-server/ObjectManager'\n\nimport { getUserAndSessionIDByUserToken1_async } from './checkCredentials'\n\n// Read environment\nrequire('dotenv').config()\n\n//\n\nconst serverClientError = express()\n\nserverClientError.use(bodyParser.json())\n\n//\n\nasync function report(req, res) {\n  let step = 'initialize'\n\n  try {\n    const objectManager = await getObjectManager(req, res)\n\n    if (!objectManager.siteInformation) {\n      throw new Error('Site information not found')\n    }\n\n    await getUserAndSessionIDByUserToken1_async(objectManager, req, true)\n\n    // Indicate to not include body, since it is meaningless for www errors\n    req.body.__DO_NOT_INCLUDE__ = true\n\n    // Generate random ticket\n    const issue_id = (Math.random().toString(36).substring(2, 5) +\n      '-' +\n      Math.random().toString(36).substring(2, 5) +\n      '-' +\n      Math.random().toString(36).substring(2, 5))\n      .toUpperCase()\n      .replace('O', '0')\n      .replace('I', '1')\n\n    log('error', 'WWW', {\n      err: req.body.err,\n      err_info: req.body.err_info,\n      objectManager,\n      req,\n      issue_id,\n    })\n\n    res.json({ success: true, issue_id })\n  } catch (err) {\n    log('error', 'rb-appbase-server serverClientError report: Failed', {\n      step,\n      err,\n      body: req.body,\n    })\n    res.status(500).send(\n      JSON.stringify({\n        error: 'Could not record error from client',\n      }),\n    )\n  }\n}\n\nserverClientError.post('/report', report)\n\nexport default serverClientError\n"],"file":"serverClientError.js"}