{"version":3,"sources":["../../../units/rb-appbase-server/serverWebApp.js"],"names":["require","load","envHost","process","env","HOST","Error","envPort","PORT","serverWebApp","gatherLocationAndSiteInformation","req","res","assetsPath","siteInformation","NODE_ENV","isMaDesignerDisabled","inEditingMode","version","siteConfiguration","envPortWebpack","PORT_WEBPACK","render","renderError","obj","error","status","log","level","message","details","use","siteInformationAndAssets","fetcher","FetcherServer","cookies","UserToken1","UserToken2ServerRendering","userAgent","headers","siteConfigurationSubset","webapp","builder","siteRouteConfig","redirect","element","url","historyMiddlewares","routeConfig","resolver","relayPayload","isJSON","sheets","SheetsRegistry","helmet","Helmet","rewind","rootHTML","ReactDOMServer","renderToString","path","resolve","__dirname","assets_path","root_html","server_side_styles","toString","htmlHeadAdditions","JSON","stringify","relay_payload","send","err"],"mappings":"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","sourcesContent":["// @flow\n\nimport path from 'path'\n\nimport createRender from 'found/lib/createRender'\nimport { getFarceResult } from 'found/lib/server'\nimport express from 'express'\nimport Helmet from 'react-helmet'\nimport React from 'react'\nimport { JssProvider, SheetsRegistry } from 'react-jss'\nimport ReactDOMServer from 'react-dom/server'\nimport serialize from 'serialize-javascript'\n\nimport AppWrapper from '../_configuration/rb-appbase-webapp/AppWrapper'\nimport ErrorComponent from '../_configuration/rb-appbase-webapp/ErrorComponent'\nimport getGraphQLLocalServerURL from '../_configuration/rb-base-server/getGraphQLLocalServerURL'\nimport { getSiteInformation } from '../_configuration/rb-base-server/siteSettings'\nimport log from '../rb-base-server/log'\nimport { version } from '../../package.json'\nimport UserToken2ServerRendering from '../_configuration/rb-base-server/UserToken2ServerRendering'\nimport htmlHeadAdditions from '../_configuration/rb-appbase-webapp/htmlHeadAdditions'\nimport type { SiteInformation } from '../rb-appbase-server/types/SiteInformation.types'\nimport { createResolver, historyMiddlewares, routeConfig } from '../rb-appbase-webapp/router'\n\nimport FetcherServer from './fetcherServer'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst envHost = process.env.HOST\nif ( envHost == null || typeof envHost !== 'string' )\n  throw new Error( 'Error: rb-appbase-webapp requires the environment variable HOST to be set' )\n\nconst envPort = process.env.PORT\nif ( envPort == null || typeof envPort !== 'string' )\n  throw new Error( 'Error: rb-appbase-webapp requires the environment variable PORT to be set' )\n\n// Create express router for the web app\nconst serverWebApp = express()\n\nasync function gatherLocationAndSiteInformation(\n  req: Object,\n  res: Object,\n): Promise<?{ siteInformation: SiteInformation, assetsPath: string }> {\n  let assetsPath\n  const siteInformation = await getSiteInformation( req, res )\n  if ( siteInformation ) {\n    if ( process.env.NODE_ENV === 'production' ) {\n      assetsPath =\n        siteInformation.isMaDesignerDisabled || siteInformation.inEditingMode\n          ? // When editing in production, use the assets with the configuration readign code intact (built when cutting a site version)\n            `/assets/${version}`\n          : // When in production mode, serve the assets compiled by designer\n            `/sassets/${version}.${siteInformation.siteConfiguration.version}`\n    } else {\n      // Get webpack port only in development. In production it can be omitted\n      const envPortWebpack = process.env.PORT_WEBPACK\n      if ( envPortWebpack == null || typeof envPortWebpack !== 'string' )\n        throw new Error(\n          'Error: rb-appbase-webapp requires the environment variable PORT_WEBPACK to be set',\n        )\n\n      // When in development, always go to webpack over http\n      assetsPath = `http://${envHost}:${envPortWebpack}/${version}`\n    }\n\n    return { siteInformation, assetsPath }\n  } else return null\n}\n\nconst render = createRender({\n  renderError( obj: Object ): React$Element<*> {\n    const { error } = obj\n    if ( error.status !== 404 )\n      log.log({\n        level: 'error',\n        message: 'Error: Render on server createRender renderError',\n        details: obj,\n      })\n    return <ErrorComponent httpStatus={error.status} />\n  },\n})\n\nserverWebApp.use( async( req, res ) => {\n  try {\n    const siteInformationAndAssets = await gatherLocationAndSiteInformation( req, res )\n    if ( siteInformationAndAssets ) {\n      const { siteInformation, assetsPath } = siteInformationAndAssets\n\n      // It is possible that artifact_id can not be determined during development. For instance, when browsing\n      // the project on localhost using a specific port, Chrome will request robots.txt and favicon.ico and\n      // they will not have the proper dev-host header. In this case simply report the file missing.\n      // This does not affect operation in production, since host will be passed for all requests.\n      if ( !siteInformation ) {\n        res.status( 404 )\n        return\n      }\n\n      const fetcher = new FetcherServer(\n        `http://${envHost}:${envPort}` + getGraphQLLocalServerURL( siteInformation ),\n        req.cookies.UserToken1,\n        UserToken2ServerRendering,\n      )\n\n      const userAgent = req.headers['user-agent']\n      const { siteConfiguration } = siteInformation\n      const siteConfigurationSubset = {\n        webapp: siteConfiguration.webapp,\n        builder: siteConfiguration.builder,\n      }\n\n      const siteRouteConfig = routeConfig( siteConfigurationSubset )\n\n      const { redirect, element } = await getFarceResult({\n        url: req.url,\n        historyMiddlewares,\n        routeConfig: siteRouteConfig,\n        resolver: createResolver( fetcher ),\n        render,\n      })\n\n      if ( redirect ) {\n        res.redirect( 302, redirect.url )\n        return\n      }\n\n      const relayPayload = serialize( fetcher, { isJSON: true })\n\n      const sheets = new SheetsRegistry()\n      const helmet = Helmet.rewind()\n\n      const rootHTML = ReactDOMServer.renderToString(\n        <JssProvider registry={sheets}>\n          <AppWrapper\n            userAgent={userAgent}\n            siteConfiguration={siteConfigurationSubset}\n            url={req.url}\n          >\n            {element}\n          </AppWrapper>\n        </JssProvider>,\n      )\n\n      res.render( path.resolve( __dirname, 'html.ejs' ), {\n        assets_path: assetsPath,\n        root_html: rootHTML,\n        server_side_styles: sheets.toString(),\n        helmet,\n        htmlHeadAdditions,\n        siteConfiguration: JSON.stringify( siteConfigurationSubset ),\n        relay_payload: relayPayload,\n      })\n    } else {\n      res.status( 200 ).send( 'meh' )\n    }\n  } catch ( err ) {\n    log.log({ level: 'error', message: 'Error: Render on server request', details: err })\n    res.status( 500 ).send( ReactDOMServer.renderToString( <ErrorComponent httpStatus={500} /> ) )\n  }\n})\nexport default serverWebApp\n"],"file":"serverWebApp.js"}