{"version":3,"sources":["../../../units/rb-appbase-server/serverWebApp.js"],"names":["serverWebApp","use","req","res","siteInformation","reqUrl","url","reqUserAgent","headers","reqUserToken1","cookies","UserToken1","passUserToken1ToHeaders","query","content","status","send","htmlContent","redirect","redirectUrl","cookie","httpOnly","expires","Date","ReactDOMServer","renderToString","err"],"mappings":";;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kG;;AAEA;AACA,MAAMA,YAAY,GAAG,uBAArB;;AAEAA,YAAY,CAACC,GAAb,CAAkB,OAAOC,GAAP,EAAYC,GAAZ,KAAqB;AACrC,QAAMC,eAAe,GAAG,MAAM,sCAAoBF,GAApB,EAAyBC,GAAzB,CAA9B;;AAEA,MAAKC,eAAL,EAAuB;AACrB,QAAI;AACF,YAAM,mCAAkBF,GAAlB,EAAuBC,GAAvB,EAA4BC,eAA5B,CAAN;;AAEA,YAAMC,MAAc,GAAGH,GAAG,CAACI,GAA3B;AACA,YAAMC,YAAoB,GAAGL,GAAG,CAACM,OAAJ,CAAY,YAAZ,CAA7B;AACA;AACA;AACA,UAAIC,aAAsB,GAAGP,GAAG,CAACQ,OAAJ,CAAYC,UAAzC;AACA,UAAIC,uBAAuB,GAAG,KAA9B;;AAEA;AACA;AACA;AACA,UAAK,CAACH,aAAD,IAAkBP,GAAG,CAACW,KAAJ,CAAUF,UAAjC,EAA8C;AAC5CF,QAAAA,aAAa,GAAGP,GAAG,CAACW,KAAJ,CAAUF,UAA1B;AACAC,QAAAA,uBAAuB,GAAG,IAA1B;AACD;;AAED,YAAME,OAAO,GAAG,MAAM;AACpBV,MAAAA,eADoB;AAEpBC,MAAAA,MAFoB;AAGpBE,MAAAA,YAHoB;AAIpBE,MAAAA,aAJoB;AAKpBG,MAAAA,uBALoB,CAAtB;;;AAQA,UAAKE,OAAO,CAACC,MAAR,KAAmB,GAAxB,EAA8B;AAC5BZ,QAAAA,GAAG,CAACY,MAAJ,CAAY,GAAZ,EAAkBC,IAAlB,CAAwBF,OAAO,CAACG,WAAhC;AACD,OAFD,MAEO,IAAKH,OAAO,CAACC,MAAR,KAAmB,GAAxB,EAA8B;AACnCZ,QAAAA,GAAG,CAACe,QAAJ,CAAc,GAAd,EAAmBJ,OAAO,CAACK,WAA3B;AACD,OAFM,MAEA,IAAKL,OAAO,CAACC,MAAR,KAAmB,GAAxB,EAA8B;AACnCZ,QAAAA,GAAG,CAACY,MAAJ,CAAY,GAAZ;AACD,OAFM,MAEA,IAAKD,OAAO,CAACC,MAAR,KAAmB,GAAxB,EAA8B;AACnC;AACAZ,QAAAA,GAAG,CAACiB,MAAJ,CAAY,YAAZ,EAA0B,EAA1B,EAA8B,EAAEC,QAAQ,EAAE,IAAZ,EAAkBC,OAAO,EAAE,IAAIC,IAAJ,CAAU,CAAV,CAA3B,EAA9B;AACA;AACApB,QAAAA,GAAG;AACAY,QAAAA,MADH,CACW,GADX;AAEGC,QAAAA,IAFH;AAGIQ,wBAAeC,cAAf,CAA+B,6BAAC,uBAAD,IAAgB,UAAU,EAAE,GAA5B,GAA/B,CAHJ;;AAKD;AACF,KA1CD,CA0CE,OAAQC,GAAR,EAAc;AACd,wBAAK,OAAL,EAAc,6CAAd,EAA6D,EAAEA,GAAF,EAA7D;AACAvB,MAAAA,GAAG;AACAY,MAAAA,MADH,CACW,GADX;AAEGC,MAAAA,IAFH;AAGIQ,sBAAeC,cAAf,CAA+B,6BAAC,uBAAD,IAAgB,UAAU,EAAE,GAA5B,GAA/B,CAHJ;;AAKD;AACF,GAnDD,MAmDO;AACLtB,IAAAA,GAAG,CAACY,MAAJ,CAAY,GAAZ,EAAkBC,IAAlB,CAAwB,eAAxB;AACD;AACF,CAzDD,E;;AA2DehB,Y","sourcesContent":["// @flow\n\nimport express from 'express'\nimport React from 'react'\nimport ReactDOMServer from 'react-dom/server'\n\nimport ErrorComponent from '../_configuration/rb-appbase-webapp/ErrorComponent'\nimport log from '../rb-base-server/log'\nimport { getSiteInformation } from '../_configuration/rb-base-server/siteSettings'\nimport { preRequest_async } from '../_configuration/rb-appbase-server/preRequests'\n\nimport contentCreatorWebApp_async from './contentCreatorWebApp_async'\n\n// Create express router for the web app\nconst serverWebApp = express()\n\nserverWebApp.use( async( req, res ) => {\n  const siteInformation = await getSiteInformation( req, res )\n\n  if ( siteInformation ) {\n    try {\n      await preRequest_async( req, res, siteInformation )\n\n      const reqUrl: string = req.url\n      const reqUserAgent: string = req.headers['user-agent']\n      // Notice that anonymous user creation may 'inject' newly created\n      // UserToken1 into request cookies\n      let reqUserToken1: ?string = req.cookies.UserToken1\n      let passUserToken1ToHeaders = false\n\n      // UserToken1 can be passed if content is loaded in iFrame,\n      // the domain is difference, hence the iFrame is unable to set\n      // cookies on (mobile?) Safari\n      if ( !reqUserToken1 && req.query.UserToken1 ) {\n        reqUserToken1 = req.query.UserToken1\n        passUserToken1ToHeaders = true\n      }\n\n      const content = await contentCreatorWebApp_async(\n        siteInformation,\n        reqUrl,\n        reqUserAgent,\n        reqUserToken1,\n        passUserToken1ToHeaders\n      )\n\n      if ( content.status === 200 ) {\n        res.status( 200 ).send( content.htmlContent )\n      } else if ( content.status === 302 ) {\n        res.redirect( 302, content.redirectUrl )\n      } else if ( content.status === 404 ) {\n        res.status( 404 )\n      } else if ( content.status === 403 ) {\n        // Log out for next attempt\n        res.cookie( 'UserToken1', '', { httpOnly: true, expires: new Date( 1 ) })\n        // Return error information\n        res\n          .status( 403 )\n          .send(\n            ReactDOMServer.renderToString( <ErrorComponent httpStatus={403} /> )\n          )\n      }\n    } catch ( err ) {\n      log( 'error', 'rb-appbase-server serverWebApp.use : Failed', { err })\n      res\n        .status( 500 )\n        .send(\n          ReactDOMServer.renderToString( <ErrorComponent httpStatus={500} /> )\n        )\n    }\n  } else {\n    res.status( 200 ).send( 'disassociated' )\n  }\n})\n\nexport default serverWebApp\n"],"file":"serverWebApp.js"}