{"version":3,"sources":["../../../units/rb-appbase-server/checkCredentials.js"],"names":["require","config","envHost","process","env","HOST","Error","staleAnonymousSessionRefreshDelay","maxAgeOfAnonymousSessionInSec","getUserTokenFrom_UserToken1","req","cookies","UserToken1","headers","usertoken1","getUserTokenFrom_machineAcuityUserToken3","machineAcuityUserToken3","getUserAndSessionIDByUserToken1_async","objectManager","bAllowAnonymous","userToken","getUserAndSessionIDByUserToken_async","getUserAndSessionIDByUserToken3_async","session_id","length","decoded","jwt","decode","JWT_SECRET","defaultPersister","uuidFromString","err","bAnonymousUserAndSessionRefresh","a_UserSession","getOneObject_async","id","UserSession_artifact_id","siteInformation","artifact_id","_materialized_view","UserSession_IsAnonymous","timeNow","Date","getTime","timeUserSession","UserSession_modified_on","user_id","UserSession_User_id","uuidNull","a_User","User_artifact_id","setViewerUserId","Promise","all","update","Object","assign","_ttl","User","UserSession","verifyUserToken2","location","issue","request_UserToken2","get","query","UserToken2","ip","UserToken2ServerRendering","USER_TOKEN_2_BYPASS_IP","User_id","UserToken2FromRequest","httpError403FileName","path","resolve","__dirname","serveAuthenticationFailed","res","respondWithJSON","cookie","httpOnly","expires","status","send","sendFile"],"mappings":"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","sourcesContent":["// @flow weak\n\nimport path from 'path'\n\nimport jwt from 'jwt-simple'\n\nimport defaultPersister from '../_configuration/rb-base-server/graphql/defaultPersister'\nimport UserToken2ServerRendering from '../_configuration/rb-base-server/UserToken2ServerRendering'\nimport log from '../rb-base-server/log'\n\n// Read environment\nrequire('dotenv').config()\n\nconst envHost = process.env.HOST\nif (envHost == null || typeof envHost !== 'string')\n  throw new Error(\n    'Error: rb-appbase-webapp requires the environment variable HOST to be set'\n  )\n\n//\n\nconst staleAnonymousSessionRefreshDelay =\n  10 * // Minutes\n  60 * // Seconds in a minute\n  1000 // Milliseconds in a second\n\nconst maxAgeOfAnonymousSessionInSec =\n  3 * // Days\n  24 * // Hours in a day\n  60 * // Minutes in an hour\n  60 // Seconds in a minute\n\n//\n\nexport function getUserTokenFrom_UserToken1(req: Object): ?string {\n  return req.cookies.UserToken1 || req.headers.usertoken1\n}\n\nexport function getUserTokenFrom_machineAcuityUserToken3(req: Object): ?string {\n  return req.cookies.machineAcuityUserToken3\n}\n\nexport async function getUserAndSessionIDByUserToken1_async(\n  objectManager,\n  req,\n  bAllowAnonymous: boolean\n) {\n  const userToken = getUserTokenFrom_UserToken1(req)\n\n  return await getUserAndSessionIDByUserToken_async(\n    objectManager,\n    req,\n    bAllowAnonymous,\n    userToken\n  )\n}\n\nexport async function getUserAndSessionIDByUserToken3_async(\n  objectManager,\n  req,\n  bAllowAnonymous: boolean\n) {\n  const userToken = getUserTokenFrom_machineAcuityUserToken3(req)\n\n  return await getUserAndSessionIDByUserToken_async(\n    objectManager,\n    req,\n    bAllowAnonymous,\n    userToken\n  )\n}\n\nexport async function getUserAndSessionIDByUserToken_async(\n  objectManager,\n  req,\n  bAllowAnonymous: boolean,\n  userToken: ?string\n) {\n  // Retrieve session id from user token\n  let session_id = null\n  if (userToken) {\n    try {\n      if (userToken.length > 10) {\n        const decoded = jwt.decode(userToken, process.env.JWT_SECRET)\n        session_id = defaultPersister.uuidFromString(decoded.session_id)\n      }\n    } catch (err) {\n      // Do nothing. This most probably means an expired session, or\n      // new session secret. Either way the user is consindered not logged in\n    }\n  }\n\n  // Track if an anonymous session (and user) need a TTL refresh\n  let bAnonymousUserAndSessionRefresh = false\n\n  // Find the session\n  let a_UserSession = null\n  if (session_id) {\n    // Try to retrieve session. Notice that it may not be found in case that the\n    // session got deleted from server\n    a_UserSession = await objectManager.getOneObject_async('UserSession', {\n      id: session_id,\n      UserSession_artifact_id: objectManager.siteInformation.artifact_id,\n      _materialized_view: 'UserSession_by_artifact_id_and_id'\n    })\n\n    // Session ID was present, but session was deleted from DB, or fraudulent\n    if (!a_UserSession) {\n      return null\n    }\n\n    if (a_UserSession.UserSession_IsAnonymous) {\n      const timeNow = new Date().getTime()\n\n      const timeUserSession = a_UserSession.UserSession_modified_on.getTime()\n\n      if (timeNow - timeUserSession > staleAnonymousSessionRefreshDelay) {\n        bAnonymousUserAndSessionRefresh = true\n      }\n    }\n  }\n\n  if (!bAllowAnonymous && !a_UserSession) return null\n\n  // If session is found, use User_id, otherwise use anonymous user id 0\n  const user_id = a_UserSession\n    ? a_UserSession.UserSession_User_id\n    : defaultPersister.uuidNull()\n\n  // Retrieve user\n  const a_User = await objectManager.getOneObject_async('User', {\n    id: user_id,\n    User_artifact_id: objectManager.siteInformation.artifact_id\n  })\n\n  // Has the user been found?\n  if (a_User) {\n    // Set the user id in object manager. Everyone will reffer to it\n    objectManager.setViewerUserId(user_id)\n\n    // If anonymous session, and refresh is needed, go ahead and refresh\n    if (bAnonymousUserAndSessionRefresh) {\n      // \"Refresh\" user and session with fresh TTL. Wait till its done just in case\n      await Promise.all([\n        objectManager.update(\n          'User',\n          Object.assign({}, a_User, { _ttl: maxAgeOfAnonymousSessionInSec })\n        ),\n        objectManager.update(\n          'UserSession',\n          Object.assign({}, a_UserSession, {\n            _ttl: maxAgeOfAnonymousSessionInSec\n          })\n        )\n      ])\n    }\n\n    // Return both user and session\n    return { User: a_User, UserSession: a_UserSession }\n  } else {\n    return null\n  }\n}\n\nexport function verifyUserToken2(\n  a_User,\n  req,\n  location: 'headers' | 'query'\n): ?Object {\n  if (!a_User) {\n    return { issue: 'User not found' }\n  } else {\n    const request_UserToken2 =\n      location === 'headers' ? req.get('UserToken2') : req.query.UserToken2\n    if (\n      request_UserToken2 === a_User.UserToken2 ||\n      // A request coming from webapp will come from localhost and will bear the server's user token\n      ((req.ip === '127.0.0.1' || req.ip === envHost) &&\n        request_UserToken2 === UserToken2ServerRendering) ||\n      // For use with GraphiQL\n      process.env.USER_TOKEN_2_BYPASS_IP === req.ip\n    )\n      return null\n    else\n      return {\n        issue: 'Authentication token expected',\n        User_id: a_User.id,\n        UserToken2: a_User.UserToken2,\n        UserToken2FromRequest: request_UserToken2\n      }\n  }\n}\n\nconst httpError403FileName = path.resolve(\n  __dirname,\n  '../_configuration/rb-base-server/httpError/403.html'\n)\n\nexport function serveAuthenticationFailed(req, res, err, respondWithJSON) {\n  log('warn', 'rb-appbase-server Checking credentials failed', {\n    err,\n    req,\n    res\n  })\n\n  // Expire cookie. This is the only way to 'delete' a cookie\n  res.cookie('UserToken1', '', { httpOnly: true, expires: new Date(1) })\n\n  if (respondWithJSON) {\n    res.status(403).send('{ \"error\": \"Authentication Failed\" }')\n  } else {\n    res.status(403).sendFile(httpError403FileName)\n  }\n}\n"],"file":"checkCredentials.js"}