{"version":3,"sources":["../../../units/rb-appbase-server/checkCredentials.js"],"names":["require","load","envHost","process","env","HOST","Error","staleAnonymousSessionRefreshDelay","maxAgeOfAnonymousSessionInSec","getSessionIdFromRequest","req","UserToken1","cookies","headers","usertoken1","length","decoded","jwt","decode","JWT_SECRET","defaultPersister","uuidFromString","session_id","err","getUserAndSessionIDByUserToken1_async","objectManager","bAllowAnonymous","bAnonymousUserAndSessionRefresh","a_UserSession","getOneObject_async","id","UserSession_artifact_id","siteInformation","artifact_id","_materialized_view","UserSession_IsAnonymous","timeNow","Date","getTime","timeUserSession","UserSession_modified_on","user_id","UserSession_User_id","uuidNull","a_User","User_artifact_id","setViewerUserId","Promise","all","update","Object","assign","_ttl","User","UserSession","verifyUserToken2","request_UserToken2","get","UserToken2","ip","UserToken2ServerRendering","USER_TOKEN_2_BYPASS_IP","httpError403FileName","path","resolve","__dirname","serveAuthenticationFailed","res","respondWithJSON","cookie","httpOnly","expires","status","send","sendFile"],"mappings":"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","sourcesContent":["// @flow weak\n\nimport path from 'path'\n\nimport jwt from 'jwt-simple'\n\nimport defaultPersister from '../_configuration/rb-base-server/graphql/defaultPersister'\nimport UserToken2ServerRendering from '../_configuration/rb-base-server/UserToken2ServerRendering'\nimport log from '../rb-base-server/log'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst envHost = process.env.HOST\nif ( envHost == null || typeof envHost !== 'string' )\n  throw new Error( 'Error: rb-appbase-webapp requires the environment variable HOST to be set' )\n\n//\n\nconst staleAnonymousSessionRefreshDelay =\n  10 * // Minutes\n  60 * // Seconds in a minute\n  1000 // Milliseconds in a second\n\nconst maxAgeOfAnonymousSessionInSec =\n  3 * // Days\n  24 * // Hours in a day\n  60 * // Minutes in an hour\n  60 // Seconds in a minute\n\n//\n\nexport function getSessionIdFromRequest( req: Object ): ?string {\n  const UserToken1 = req.cookies.UserToken1 || req.headers.usertoken1\n\n  if ( UserToken1 ) {\n    try {\n      if ( UserToken1.length > 10 ) {\n        const decoded = jwt.decode( UserToken1, process.env.JWT_SECRET )\n        return defaultPersister.uuidFromString( decoded.session_id )\n      }\n    } catch ( err ) {\n      // Do nothing. This most probably means an expired session, or\n      // new session secret. Either way the user is consindered not logged in\n    }\n  }\n\n  return null // Anonymous, unless cookie is passed\n}\n\nexport async function getUserAndSessionIDByUserToken1_async(\n  objectManager,\n  req,\n  bAllowAnonymous: boolean,\n) {\n  // Get session, and if session is present, user from session\n  const session_id = getSessionIdFromRequest( req )\n\n  // Track if an anonymous session (and user) need a TTL refresh\n  let bAnonymousUserAndSessionRefresh = false\n\n  // Find the session\n  let a_UserSession = null\n  if ( session_id ) {\n    // Try to retrieve session. Notice that it may not be found in case that the\n    // session got deleted from server\n    a_UserSession = await objectManager.getOneObject_async( 'UserSession', {\n      id: session_id,\n      UserSession_artifact_id: objectManager.siteInformation.artifact_id,\n      _materialized_view: 'UserSession_by_artifact_id_and_id',\n    })\n\n    // Session ID was present, but session was deleted from DB, or fraudulent\n    if ( !a_UserSession ) {\n      return null\n    }\n\n    if ( a_UserSession.UserSession_IsAnonymous ) {\n      const timeNow = new Date().getTime()\n\n      const timeUserSession = a_UserSession.UserSession_modified_on.getTime()\n\n      if ( timeNow - timeUserSession > staleAnonymousSessionRefreshDelay ) {\n        bAnonymousUserAndSessionRefresh = true\n      }\n    }\n  }\n\n  if ( !bAllowAnonymous && !a_UserSession ) return null\n\n  // If session is found, use User_id, otherwise use anonymous user id 0\n  const user_id = a_UserSession ? a_UserSession.UserSession_User_id : defaultPersister.uuidNull()\n\n  // Retrieve user\n  const a_User = await objectManager.getOneObject_async( 'User', {\n    id: user_id,\n    User_artifact_id: objectManager.siteInformation.artifact_id,\n  })\n\n  // Has the user been found?\n  if ( a_User ) {\n    // Set the user id in object manager. Everyone will reffer to it\n    objectManager.setViewerUserId( user_id )\n\n    // If anonymous session, and refresh is needed, go ahead and refresh\n    if ( bAnonymousUserAndSessionRefresh ) {\n      // \"Refresh\" user and session with fresh TTL. Wait till its done just in case\n      await Promise.all([\n        objectManager.update(\n          'User',\n          Object.assign({}, a_User, { _ttl: maxAgeOfAnonymousSessionInSec }),\n        ),\n        objectManager.update(\n          'UserSession',\n          Object.assign({}, a_UserSession, { _ttl: maxAgeOfAnonymousSessionInSec }),\n        ),\n      ])\n    }\n\n    // Return both user and session\n    return { User: a_User, UserSession: a_UserSession }\n  } else {\n    return null\n  }\n}\n\nexport function verifyUserToken2( a_User, req ): ?string {\n  if ( !a_User ) {\n    return 'User not found'\n  } else {\n    const request_UserToken2 = req.get( 'UserToken2' )\n    if (\n      request_UserToken2 === a_User.UserToken2 ||\n      // A request coming from webapp will come from localhost and will bear the server's user token\n      ( ( req.ip === '127.0.0.1' || req.ip === envHost ) &&\n        request_UserToken2 === UserToken2ServerRendering ) ||\n      // For use with GraphiQL\n      process.env.USER_TOKEN_2_BYPASS_IP === req.ip\n    )\n      return null\n    else\n      return (\n        'Authentication token expected: ' + a_User.UserToken2 + ', provided:' + request_UserToken2\n      )\n  }\n}\n\nconst httpError403FileName = path.resolve(\n  __dirname,\n  '../_configuration/rb-base-server/httpError/403.html',\n)\n\nexport function serveAuthenticationFailed( req, res, err, respondWithJSON ) {\n  log( 'warn', 'rb-appbase-server Checking credentials failed', { err, req, res })\n\n  // Expire cookie. This is the only way to 'delete' a cookie\n  res.cookie( 'UserToken1', '', { httpOnly: true, expires: new Date( 1 ) })\n\n  if ( respondWithJSON ) {\n    res.status( 403 ).send( '{ \"error\": \"Authentication Failed\" }' )\n  } else {\n    res.status( 403 ).sendFile( httpError403FileName )\n  }\n}\n"],"file":"checkCredentials.js"}