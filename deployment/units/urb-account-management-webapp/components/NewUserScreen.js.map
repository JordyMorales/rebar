{"version":3,"sources":["../../../../units/urb-account-management-webapp/components/NewUserScreen.jsx"],"names":["styles","theme","card","minWidth","userName","borderWidth","borderColor","fontWeight","paddingLeft","paddingRight","NewUserScreen","React","Component","constructor","props","context","_handle_onClick_Create","UserAccount_Identifier","User_Secret","state","setState","currentOperation","loc","window","location","host","protocol","hostname","port","response","fetch","method","credentials","headers","body","JSON","stringify","responseData","json","console","log","success","errorMessage","error","err","message","_handle_onClick_CancelCreation","_handle_onClick_TryAgain","_handle_onClick_Continue","replace","renderCreating","classes","renderSuccess","renderFailure","renderPrompt","event","target","value","render"],"mappings":";;AAEA,4C;AACA,wC;AACA;AACA;AACA,kD;AACA,oD;AACA,8B;;AAEA,+F;;AAEA,MAAMA,SAASC,UAAU;AACvBC,QAAM;AACJC,cAAU,GADN,EADiB;;AAIvBC,YAAU;AACRC,iBAAa,CADL;AAERC,iBAAa,SAFL;AAGRC,gBAAY,MAHJ;AAIRC,iBAAa,EAJL;AAKRC,kBAAc,EALN,EAJa,EAAV,CAAf;;;;AAaA,MAAMC,aAAN,SAA4BC,gBAAMC;;;;;;;;;;AAUhC;AACAC,cAAaC,KAAb,EAA4BC,OAA5B,EAA8C;AAC5C,UAAOD,KAAP,EAAcC,OAAd,EAD4C;;;;;;;;;;AAW9CC,0BAX8C,GAWrB,YAAW;AAClC,YAAM,EAAEC,sBAAF,EAA0BC,WAA1B,KAA0C,KAAKC,KAArD;;AAEA,WAAKC,QAAL,CAAc;AACZC,0BAAkB,UADN;AAEZH,qBAAa,EAFD,CAEK;AAFL,OAAd;;AAKA,UAAI;AACF,cAAMI,MAAMC,OAAOC,QAAnB;AACA,cAAMC,OAAOH,IAAII,QAAJ,GAAe,IAAf,GAAsBJ,IAAIK,QAA1B,GAAqC,GAArC,GAA2CL,IAAIM,IAA5D;;AAEA,cAAMC,WAAW,MAAMC,MAAOL,OAAO,kBAAd,EAAkC;AACvDM,kBAAQ,MAD+C;AAEvDC,uBAAa,aAF0C;AAGvDC,mBAAS;AACP,4BAAgB,kBADT,EAH8C;;AAMvDC,gBAAMC,KAAKC,SAAL,CAAe;AACnBnB,oCAAwBA,sBADL;AAEnBC,yBAAaA,WAFM,EAAf,CANiD,EAAlC,CAAvB;;;;AAYA,cAAMmB,eAAe,MAAMR,SAASS,IAAT,EAA3B;;AAEAC,gBAAQC,GAAR,CAAa,sBAAb;AACAD,gBAAQC,GAAR,CAAaH,YAAb;;AAEA,YAAKA,aAAaI,OAAlB,EAA4B;AAC1B;AACA,eAAKrB,QAAL,CAAc,EAAEC,kBAAkB,SAApB,EAAd;AACD,SAHD,MAGO;AACL;AACA,eAAKD,QAAL,CAAc;AACZC,8BAAkB,SADN;AAEZqB,0BAAcL,aAAaM,KAFf,EAAd;;AAID;AACF,OA/BD,CA+BE,OAAQC,GAAR,EAAc;AACd;AACA;AACA,aAAKxB,QAAL,CAAc;AACZC,4BAAkB,SADN;AAEZqB;AACE,sFAA4EE,IAAIC,OAHtE,EAAd;;AAKD;AACF,KA3D6C;;AA6D9CC,kCA7D8C,GA6Db,MAAM;AACrC,WAAK1B,QAAL,CAAc;AACZC,0BAAkB,SADN;AAEZqB,sBAAc,iCAFF,EAAd;;AAID,KAlE6C;;AAoE9CK,4BApE8C,GAoEnB,MAAM;AAC/B,WAAK3B,QAAL,CAAc;AACZC,0BAAkB,QADN;AAEZqB,sBAAc,EAFF,EAAd;;AAID,KAzE6C;;AA2E9CM,4BA3E8C,GA2EnB,MAAM;AAC/BzB,aAAOC,QAAP,CAAgByB,OAAhB,CAAyB,GAAzB;AACD,KA7E6C,CAG5C,KAAK9B,KAAL,GAAa,EACXE,kBAAkB,QADP,EAEXqB,cAAc,EAFH,EAGXzB,wBAAwB,EAHb,EAIXC,aAAa,EAJF,EAAb,CAMD;;AAsEDgC,mBAAiB;AACf,UAAM,EAAEC,OAAF,KAAc,KAAKrC,KAAzB;AACA,UAAM,EAAEG,sBAAF,KAA6B,KAAKE,KAAxC;;AAEA;AACE,oCAAC,cAAD,IAAM,WAAWgC,QAAQjD,IAAzB;AACE,sCAAC,gBAAD,IAAY,OAAM,eAAlB,GADF;AAEE,sCAAC,iBAAD;AACE,wCAAC,oBAAD,IAAY,WAAU,GAAtB;;AAEE,oDAAM,SAAOiD,QAAQ/C,QAArB,IAAgCa,sBAAhC,CAFF,mBADF;;AAKE,mDALF;AAME,mDANF;AAOE,wCAAC,wBAAD,IAAgB,MAAK,OAArB,GAPF,CAFF;;AAWE,sCAAC,iBAAD;AACE,wCAAC,gBAAD,IAAQ,SAAS,KAAK6B,8BAAtB,aADF,CAXF,CADF;;;;AAiBD;;AAEDM,kBAAgB;AACd,UAAM,EAAED,OAAF,KAAc,KAAKrC,KAAzB;AACA,UAAM,EAAEG,sBAAF,KAA6B,KAAKE,KAAxC;;AAEA;AACE,oCAAC,cAAD,IAAM,WAAWgC,QAAQjD,IAAzB;AACE,sCAAC,gBAAD,IAAY,OAAM,eAAlB,GADF;AAEE,sCAAC,iBAAD;AACE,wCAAC,oBAAD,IAAY,WAAU,GAAtB;;AAEE,oDAAM,SAAOiD,QAAQ/C,QAArB,IAAgCa,sBAAhC,CAFF,MADF,CAFF;;;AAQE,sCAAC,iBAAD;AACE,wCAAC,gBAAD,IAAQ,SAAS,KAAK+B,wBAAtB,eADF,CARF,CADF;;;;AAcD;;AAEDK,kBAAgB;AACd,UAAM,EAAEF,OAAF,KAAc,KAAKrC,KAAzB;AACA,UAAM,EAAEG,sBAAF,EAA0ByB,YAA1B,KAA2C,KAAKvB,KAAtD;;AAEA;AACE,oCAAC,cAAD,IAAM,WAAWgC,QAAQjD,IAAzB;AACE,sCAAC,gBAAD,IAAY,OAAM,eAAlB,GADF;AAEE,sCAAC,iBAAD;AACE,wCAAC,oBAAD,IAAY,WAAU,GAAtB;;AAEE,oDAAM,SAAOiD,QAAQ/C,QAArB,IAAgCa,sBAAhC,CAFF;AAGWyB,wBAHX,MADF,CAFF;;;AASE,sCAAC,iBAAD;AACE,wCAAC,gBAAD,IAAQ,SAAS,KAAKK,wBAAtB,gBADF,CATF,CADF;;;;AAeD;;AAEDO,iBAAe;AACb,UAAM,EAAEH,OAAF,KAAc,KAAKrC,KAAzB;AACA,UAAM,EAAEG,sBAAF,EAA0BC,WAA1B,KAA0C,KAAKC,KAArD;;AAEA;AACE,oCAAC,cAAD,IAAM,WAAWgC,QAAQjD,IAAzB;AACE,sCAAC,gBAAD,IAAY,OAAM,iBAAlB,GADF;AAEE,sCAAC,iBAAD;AACE,wCAAC,mBAAD;AACE,mBAAM,cADR;AAEE,uBAAW,IAFb;AAGE,mBAAOe,sBAHT;AAIE,sBAAUsC,SAAS,KAAKnC,QAAL,CAAc,EAAEH,wBAAwBsC,MAAMC,MAAN,CAAaC,KAAvC,EAAd,CAJrB,GADF;;AAOE,wCAAC,mBAAD;AACE,mBAAM,UADR;AAEE,kBAAK,UAFP;AAGE,uBAAW,IAHb;AAIE,mBAAOvC,WAJT;AAKE,sBAAUqC,SAAS,KAAKnC,QAAL,CAAc,EAAEF,aAAaqC,MAAMC,MAAN,CAAaC,KAA5B,EAAd,CALrB,GAPF,CAFF;;;AAiBE,sCAAC,iBAAD;AACE,wCAAC,gBAAD,IAAQ,SAAS,KAAKzC,sBAAtB,aADF,CAjBF,CADF;;;;AAuBD;;AAED0C,WAAS;AACP,UAAM,EAAErC,gBAAF,KAAuB,KAAKF,KAAlC;;AAEA;AACE,oCAAC,+BAAD;AACGE,6BAAqB,QAArB,IAAiC,KAAKiC,YAAL,EADpC;AAEGjC,6BAAqB,UAArB,IAAmC,KAAK6B,cAAL,EAFtC;AAGG7B,6BAAqB,SAArB,IAAkC,KAAK+B,aAAL,EAHrC;AAIG/B,6BAAqB,SAArB,IAAkC,KAAKgC,aAAL,EAJrC,CADF;;;AAQD,GAxLD,C;;;AA2La,wBAAYrD,MAAZ,EAAsBU,aAAtB,C","file":"NewUserScreen.js","sourcesContent":["// @flow\n\nimport Button from 'material-ui/Button'\nimport Card, { CardActions, CardContent, CardHeader } from 'material-ui/Card'\nimport { LinearProgress } from 'material-ui/Progress'\nimport { withStyles } from 'material-ui/styles'\nimport TextField from 'material-ui/TextField'\nimport Typography from 'material-ui/Typography'\nimport React from 'react'\n\nimport ResponsiveContentArea from '../../urb-base-webapp/components/ResponsiveContentArea'\n\nconst styles = theme => ({\n  card: {\n    minWidth: 320,\n  },\n  userName: {\n    borderWidth: 1,\n    borderColor: '#c0c0c0',\n    fontWeight: 'bold',\n    paddingLeft: 10,\n    paddingRight: 10,\n  },\n})\n\nclass NewUserScreen extends React.Component<\n  {\n    classes: Object,\n  },\n  {\n    currentOperation: 'prompt' | 'creating' | 'success' | 'failure',\n    errorMessage: string,\n    UserAccount_Identifier: string,\n    User_Secret: string,\n  },\n> {\n  constructor( props: Object, context: Object ) {\n    super( props, context )\n\n    this.state = {\n      currentOperation: 'prompt',\n      errorMessage: '',\n      UserAccount_Identifier: '',\n      User_Secret: '',\n    }\n  }\n\n  _handle_onClick_Create = async() => {\n    const { UserAccount_Identifier, User_Secret } = this.state\n\n    this.setState({\n      currentOperation: 'creating',\n      User_Secret: '', // In order to prevent the password from being accessed later\n    })\n\n    try {\n      const loc = window.location\n      const host = loc.protocol + '//' + loc.hostname + ':' + loc.port\n\n      const response = await fetch( host + '/auth/createuser', {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          UserAccount_Identifier: UserAccount_Identifier,\n          User_Secret: User_Secret,\n        }),\n      })\n\n      const responseData = await response.json()\n\n      console.log( 'CREATE USER RESPONSE' )\n      console.log( responseData )\n\n      if ( responseData.success ) {\n        // In case of success, notify user\n        this.setState({ currentOperation: 'success' })\n      } else {\n        // In case of error, tell user what the error is\n        this.setState({\n          currentOperation: 'failure',\n          errorMessage: responseData.error,\n        })\n      }\n    } catch ( err ) {\n      // In case response could not be received properly, tell the user\n      // In case of error, tell user what the error is\n      this.setState({\n        currentOperation: 'failure',\n        errorMessage:\n          'Did not receive proper response from server. Please try again. Message:' + err.message,\n      })\n    }\n  }\n\n  _handle_onClick_CancelCreation = () => {\n    this.setState({\n      currentOperation: 'failure',\n      errorMessage: 'User creation has been canceled',\n    })\n  }\n\n  _handle_onClick_TryAgain = () => {\n    this.setState({\n      currentOperation: 'prompt',\n      errorMessage: '',\n    })\n  }\n\n  _handle_onClick_Continue = () => {\n    window.location.replace( '/' )\n  }\n\n  renderCreating() {\n    const { classes } = this.props\n    const { UserAccount_Identifier } = this.state\n\n    return (\n      <Card className={classes.card}>\n        <CardHeader title=\"Creating user\" />\n        <CardContent>\n          <Typography component=\"p\">\n            Creating user\n            <span class={classes.userName}>{UserAccount_Identifier}</span>, please wait.\n          </Typography>\n          <br />\n          <br />\n          <LinearProgress mode=\"query\" />\n        </CardContent>\n        <CardActions>\n          <Button onClick={this._handle_onClick_CancelCreation}>Cancel</Button>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  renderSuccess() {\n    const { classes } = this.props\n    const { UserAccount_Identifier } = this.state\n\n    return (\n      <Card className={classes.card}>\n        <CardHeader title=\"Creating user\" />\n        <CardContent>\n          <Typography component=\"p\">\n            Created user\n            <span class={classes.userName}>{UserAccount_Identifier}</span>.\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={this._handle_onClick_Continue}>Continue</Button>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  renderFailure() {\n    const { classes } = this.props\n    const { UserAccount_Identifier, errorMessage } = this.state\n\n    return (\n      <Card className={classes.card}>\n        <CardHeader title=\"Creating user\" />\n        <CardContent>\n          <Typography component=\"p\">\n            Failed creating user\n            <span class={classes.userName}>{UserAccount_Identifier}</span>\n            because {errorMessage}.\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={this._handle_onClick_TryAgain}>Try Again</Button>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  renderPrompt() {\n    const { classes } = this.props\n    const { UserAccount_Identifier, User_Secret } = this.state\n\n    return (\n      <Card className={classes.card}>\n        <CardHeader title=\"Create New User\" />\n        <CardContent>\n          <TextField\n            label=\"Account Name\"\n            fullWidth={true}\n            value={UserAccount_Identifier}\n            onChange={event => this.setState({ UserAccount_Identifier: event.target.value })}\n          />\n          <TextField\n            label=\"Password\"\n            type=\"password\"\n            fullWidth={true}\n            value={User_Secret}\n            onChange={event => this.setState({ User_Secret: event.target.value })}\n          />\n        </CardContent>\n        <CardActions>\n          <Button onClick={this._handle_onClick_Create}>Create</Button>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  render() {\n    const { currentOperation } = this.state\n\n    return (\n      <ResponsiveContentArea>\n        {currentOperation === 'prompt' && this.renderPrompt()}\n        {currentOperation === 'creating' && this.renderCreating()}\n        {currentOperation === 'success' && this.renderSuccess()}\n        {currentOperation === 'failure' && this.renderFailure()}\n      </ResponsiveContentArea>\n    )\n  }\n}\n\nexport default withStyles( styles )( NewUserScreen )\n"]}