{"version":3,"sources":["../../../units/rb-appbase-webapp/client.js"],"names":["UserToken2","rebarErrorHandler","err","err_info","trimLeft","message","startsWith","loc","window","location","host","protocol","hostname","port","body","JSON","stringify","stack","response","fetch","method","credentials","headers","responseAsObject","json","success","alert","issue_id","render","relayPayloads","siteConfiguration","__rebar_properties__","data","Viewer","fetcher","FetcherClient","resolver","Router","historyProtocol","BrowserProtocol","historyMiddlewares","routeConfig","contentComponent","document","href","ReactDOM","hydrate","getElementById","__rebar_error_handler__"],"mappings":"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","sourcesContent":["// @flow\n\n// In order to use ES7 async/await\nimport 'babel-polyfill'\n\nimport BrowserProtocol from 'farce/lib/BrowserProtocol'\nimport createInitialFarceRouter from 'found/lib/createInitialFarceRouter'\nimport createRender from 'found/lib/createRender'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport getGraphQLServerURL from '../_configuration/rb-appbase-webapp/getGraphQLServerURL'\nimport AppWrapper from '../_configuration/rb-appbase-webapp/AppWrapper'\n\nimport FetcherClient from './fetcherClient'\nimport { createResolver, historyMiddlewares, routeConfig } from './router'\n\n// Include global CSS used in all units. Will not be chunked\nimport '../_configuration/rb-appbase-webapp/global.css'\n\n// User token will be recorded upon startup and used when passing on client errors\nlet UserToken2 = 'unknown'\n\n// Handler for error reporting\nasync function rebarErrorHandler( err, err_info ) {\n  try {\n    // Do not report errors that do not carry meaningful information\n    if ( typeof err === 'string' && err.trimLeft() === '' ) return\n    if ( typeof err.message === 'string' && err.message.trimLeft() === '' ) return\n    if (\n      typeof err.message === 'string' &&\n      err.message.startsWith(\n        'An error was thrown inside one of your components, but React doesn\\'t know what it was.',\n      )\n    )\n      return\n\n    // Determine the host server\n    const loc = window.location\n    const host = loc.protocol + '//' + loc.hostname + ':' + loc.port\n\n    // Pakcage up error details\n    const body = JSON.stringify({\n      UserToken2,\n      err: { message: err.message, stack: err.stack },\n      err_info,\n    })\n\n    // Send away\n    const response = await fetch( host + '/client-error/report', {\n      method: 'POST',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body,\n    })\n\n    // Inform user of the result\n    const responseAsObject = await response.json()\n    if ( responseAsObject.success ) {\n      alert(\n        'An error has occurred. Use the following identifier when reporting to support:\\n' +\n          responseAsObject.issue_id,\n      )\n    } else {\n      alert( 'An error has occurred. Attempt to assign an identifier has failed.' )\n    }\n  } catch ( err ) {\n    alert( 'An error has occurred. We were not able to assign an identifier to it.\\nReason:' + err )\n  }\n}\n\n// Load up react, relay and set up error handling\n\nconst render = createRender({})\n;( async() => {\n  const { relayPayloads, siteConfiguration } = window.__rebar_properties__\n\n  // It is critical that the app frame has UserToken2 retrieved\n  UserToken2 = relayPayloads[0].data.Viewer.UserToken2\n\n  // eslint-disable-next-line no-underscore-dangle\n  const fetcher = new FetcherClient( getGraphQLServerURL(), relayPayloads, UserToken2 )\n  const resolver = createResolver( fetcher )\n\n  const Router = await createInitialFarceRouter({\n    historyProtocol: new BrowserProtocol(),\n    historyMiddlewares,\n    routeConfig: routeConfig( siteConfiguration ),\n    resolver,\n    render,\n  })\n\n  const contentComponent = (\n    <AppWrapper siteConfiguration={siteConfiguration} url={document.location.href}>\n      <Router resolver={resolver} />\n    </AppWrapper>\n  )\n\n  ReactDOM.hydrate(\n    contentComponent,\n    // $AssureFlow\n    document.getElementById( 'root' ),\n    () => {\n      // TODO [2 Crossroads][Designer][webapp] Research if removal of styles if necessary\n      // Previous version of react required removing of JSS styles but the new one seems to handle\n      // them OK.\n      // // We don't need the static css any more once we have launched our application.\n      // const ssStyles = document.getElementById( 'server-side-styles' )\n      // ssStyles.parentNode.removeChild( ssStyles )\n    },\n  )\n\n  window.__rebar_error_handler__ = rebarErrorHandler\n})()\n"],"file":"client.js"}