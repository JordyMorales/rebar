{"version":3,"sources":["../../../../../units/rb-account-management-server/graphql/mutation/UserUpdate.js"],"names":["name","inputFields","User_DisplayName","type","GraphQLNonNull","GraphQLString","User_PrimaryEmail","User_PrimaryPhone","outputFields","Viewer","ViewerType","resolve","params","args","context","rootValue","objectManager","getOneObject_async","id","getViewerUserId","mutateAndGetPayload","update"],"mappings":";;AAEA;AACA;;AAEA,wG;;AAEe,gDAA6B;AAC1CA,EAAAA,IAAI,EAAE,YADoC;;AAG1CC,EAAAA,WAAW,EAAE;AACXC,IAAAA,gBAAgB,EAAE,EAAEC,IAAI,EAAE,IAAIC,uBAAJ,CAAoBC,sBAApB,CAAR,EADP;AAEXC,IAAAA,iBAAiB,EAAE,EAAEH,IAAI,EAAE,IAAIC,uBAAJ,CAAoBC,sBAApB,CAAR,EAFR;AAGXE,IAAAA,iBAAiB,EAAE,EAAEJ,IAAI,EAAE,IAAIC,uBAAJ,CAAoBC,sBAApB,CAAR,EAHR,EAH6B;;;AAS1CG,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE;AACNN,MAAAA,IAAI,EAAEO,mBADA;AAENC,MAAAA,OAAO,EAAE,CAAEC,MAAF,EAAU,EAAE,GAAGC,IAAL,EAAV,EAAuBC,OAAvB,EAAgC,EAAEC,SAAS,EAAEC,aAAb,EAAhC;AACPA,MAAAA,aAAa,CAACC,kBAAd,CAAkC,MAAlC,EAA0C,EAAEC,EAAE,EAAEF,aAAa,CAACG,eAAd,EAAN,EAA1C,CAHI,EADI,EAT4B;;;;AAiB1CC,EAAAA,mBAAmB,EAAE;AACnB,IAAElB,gBAAF,EAAoBI,iBAApB,EAAuCC,iBAAvC,EADmB;AAEnBO,EAAAA,OAFmB;AAGnB,IAAEC,SAAS,EAAEC,aAAb,EAHmB;AAIhB;AACH,UAAMA,aAAa,CAACK,MAAd,CAAsB,MAAtB,EAA8B;AAClCH,MAAAA,EAAE,EAAEF,aAAa,CAACG,eAAd,EAD8B;AAElCjB,MAAAA,gBAFkC;AAGlCI,MAAAA,iBAHkC;AAIlCC,MAAAA,iBAJkC,EAA9B,CAAN;;;AAOA,WAAO,EAAP;AACD,GA9ByC,EAA7B,C","sourcesContent":["// @flow\n\nimport { mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLNonNull } from 'graphql'\n\nimport ViewerType from '../../../rb-appbase-server/graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'UserUpdate',\n\n  inputFields: {\n    User_DisplayName: { type: new GraphQLNonNull( GraphQLString ) },\n    User_PrimaryEmail: { type: new GraphQLNonNull( GraphQLString ) },\n    User_PrimaryPhone: { type: new GraphQLNonNull( GraphQLString ) },\n  },\n\n  outputFields: {\n    Viewer: {\n      type: ViewerType,\n      resolve: ( params, { ...args }, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject_async( 'User', { id: objectManager.getViewerUserId() }),\n    },\n  },\n\n  mutateAndGetPayload: async(\n    { User_DisplayName, User_PrimaryEmail, User_PrimaryPhone },\n    context,\n    { rootValue: objectManager },\n  ) => {\n    await objectManager.update( 'User', {\n      id: objectManager.getViewerUserId(),\n      User_DisplayName,\n      User_PrimaryEmail,\n      User_PrimaryPhone,\n    })\n\n    return {}\n  },\n})\n"],"file":"UserUpdate.js"}