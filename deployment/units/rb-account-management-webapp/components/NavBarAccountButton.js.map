{"version":3,"sources":["../../../../units/rb-account-management-webapp/components/NavBarAccountButton.jsx"],"names":["styles","NavBarAccountButton","React","Component","constructor","props","context","_handle_onClick_Login","setState","loginDialogIsOpen","userMenuIsOpen","_handle_onClick_Profile","router","push","_handle_Login_Close","_handle_onClick_UserMenu","event","anchorEl","currentTarget","_handle_UserMenu_Close","_handle_onClick_Logout","_handle_Login_NewUser","state","undefined","UNSAFE_componentWillMount","componentWillUnmount","render","Viewer","User_IsAnonymous","User_DisplayName"],"mappings":"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","sourcesContent":["// @flow\n\nimport { withRouter } from 'found'\n\nimport IconButton from '@material-ui/core/IconButton'\n\nimport Menu from '@material-ui/core/Menu'\n\nimport MenuItem from '@material-ui/core/MenuItem'\n\nimport { withStyles } from '@material-ui/core/styles'\n\nimport IconAccount from 'mdi-material-ui/Account'\nimport IconAccountOutline from 'mdi-material-ui/AccountOutline'\nimport React from 'react'\nimport { createFragmentContainer, graphql } from 'react-relay'\n\nimport {\n  registerAuthenticationRequiredCallback,\n  unregisterAuthenticationRequiredCallback,\n} from './RequiresAuthentication'\nimport LoginDialog from './LoginDialog'\n\n//\n\nconst styles = {}\n\n//\n\nclass NavBarAccountButton extends React.Component<\n  {\n    Viewer: Object,\n    relay: Object,\n    router: Object,\n  },\n  {\n    anchorEl: ?Object,\n    loginDialogIsOpen: boolean,\n    userMenuIsOpen: boolean,\n  }\n> {\n  constructor( props: Object, context: Object ) {\n    super( props, context )\n\n    this.state = {\n      anchorEl: undefined,\n      loginDialogIsOpen: false,\n      userMenuIsOpen: false,\n    }\n  }\n\n  // Handle popping open the login dialog if authentication is required\n  UNSAFE_componentWillMount() {\n    registerAuthenticationRequiredCallback( this._handle_onClick_Login )\n  }\n\n  componentWillUnmount() {\n    unregisterAuthenticationRequiredCallback()\n  }\n\n  _handle_onClick_Login = () => {\n    this.setState({ loginDialogIsOpen: true, userMenuIsOpen: false })\n  }\n\n  _handle_onClick_Profile = () => {\n    this.setState({ userMenuIsOpen: false })\n\n    this.props.router.push( '/user/profile' )\n  }\n\n  _handle_Login_Close = () => {\n    this.setState({ loginDialogIsOpen: false })\n  }\n\n  _handle_onClick_UserMenu = event => {\n    this.setState({ userMenuIsOpen: true, anchorEl: event.currentTarget })\n  }\n\n  _handle_UserMenu_Close = () => {\n    this.setState({ userMenuIsOpen: false })\n  }\n\n  _handle_onClick_Logout = () => {\n    this.setState({ userMenuIsOpen: false })\n    this.props.router.push( '/user/logout' )\n  }\n\n  _handle_Login_NewUser = () => {\n    this.setState({ loginDialogIsOpen: false })\n\n    this.props.router.push( '/user/new' )\n  }\n\n  render() {\n    const { Viewer } = this.props\n    const { User_IsAnonymous, User_DisplayName } = Viewer\n    const { loginDialogIsOpen, userMenuIsOpen } = this.state\n\n    return (\n      <div>\n        <IconButton\n          aria-haspopup=\"true\"\n          onClick={\n            User_IsAnonymous\n              ? this._handle_onClick_Login\n              : this._handle_onClick_UserMenu\n          }\n          color=\"inherit\"\n        >\n          {User_IsAnonymous ? <IconAccountOutline /> : <IconAccount />}\n        </IconButton>\n\n        <LoginDialog\n          open={loginDialogIsOpen}\n          handlerClose={this._handle_Login_Close}\n          handlerNewUser={this._handle_Login_NewUser}\n        />\n\n        <Menu\n          id=\"lock-menu\"\n          anchorEl={this.state.anchorEl}\n          open={userMenuIsOpen}\n          onClose={this._handle_UserMenu_Close}\n        >\n          <MenuItem key=\"profile\" onClick={this._handle_onClick_Profile}>\n            {User_DisplayName}\n          </MenuItem>\n          <MenuItem key=\"login\" onClick={this._handle_onClick_Login}>\n            Change user\n          </MenuItem>\n          <MenuItem key=\"logout\" onClick={this._handle_onClick_Logout}>\n            Log out\n          </MenuItem>\n        </Menu>\n      </div>\n    )\n  }\n}\n\nexport default createFragmentContainer(\n  withStyles( styles )( withRouter( NavBarAccountButton ) ),\n  graphql`\n    fragment NavBarAccountButton_Viewer on Viewer {\n      User_IsAnonymous\n      User_DisplayName\n    }\n  `\n)\n"],"file":"NavBarAccountButton.js"}