{"version":3,"sources":["../../../units/rb-image-manager-server/serverImageManagerUpload.js"],"names":["arrImageUploadConfiguration","findImageUploadConfiguration","req","imageUploadConfiguration","isProperConfiguration","Error","serverImageManagerUpload","use","limits","fileSize","post","res","objectManager","UserAndSession","a_User","User","verificationIssue","verifyUserPermissions","set","files","error","status","send","JSON","stringify","localImageFileName","returnedImageFileName","generateFileNames_async","uploadedFile","mv","err","message","fileName"],"mappings":"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","sourcesContent":["// @flow\n\nimport express from 'express'\nimport expressFileUpload from 'express-fileupload'\n\nimport createImageUploadConfiguration from '../_configuration/rb-image-manager/createImageUploadConfiguration'\nimport log from '../rb-base-server/log'\nimport { getObjectManager } from '../rb-base-server/ObjectManager'\nimport {\n  getUserAndSessionIDByUserToken1_async,\n  verifyUserToken2,\n} from '../rb-appbase-server/checkCredentials'\n\nimport ImageUploadConfiguration from './ImageUploadConfiguration'\n\n//\n\n// Create image upload configuration\n\nconst arrImageUploadConfiguration: Array<ImageUploadConfiguration> = []\ncreateImageUploadConfiguration(arrImageUploadConfiguration)\n\nfunction findImageUploadConfiguration(req: Object) {\n  for (let imageUploadConfiguration of arrImageUploadConfiguration) {\n    if (imageUploadConfiguration.isProperConfiguration(req)) {\n      return imageUploadConfiguration\n    }\n  }\n\n  throw new Error(\n    'rb-image-manager-server/serverImageManagerUpload: Could not find appropriate configuration',\n  )\n}\n\n//\n\nconst serverImageManagerUpload = express()\n\nserverImageManagerUpload.use(\n  expressFileUpload({\n    limits: { fileSize: 10 * 1024 * 1024 },\n  }),\n)\n\n// Route for image uploads\nserverImageManagerUpload.post('/upload', async (req, res) => {\n  try {\n    // Get configuration\n    const imageUploadConfiguration = findImageUploadConfiguration(req)\n\n    // Create object manager\n    const objectManager = await getObjectManager(req, res)\n\n    // Verify credentials\n    const UserAndSession = await getUserAndSessionIDByUserToken1_async(objectManager, req, true)\n    if (!UserAndSession) throw new Error('Invalid user by UserToken1')\n\n    const a_User = UserAndSession.User\n\n    const verificationIssue = verifyUserToken2(a_User, req, 'headers')\n    if (verificationIssue) throw new Error('Invalid user by UserToken2')\n\n    // Verify user permissions\n    imageUploadConfiguration.verifyUserPermissions(objectManager, req)\n\n    // Response is always JSON\n    res.set('Content-Type', 'application/json')\n\n    if (!req.files) {\n      const error = 'rb-image-manager-server/serverImageManagerUpload: [files] not found in request'\n      log('error', error, { req })\n      res.status(417).send(JSON.stringify({ error }))\n      return\n    }\n\n    const {\n      localImageFileName,\n      returnedImageFileName,\n    } = await imageUploadConfiguration.generateFileNames_async(objectManager, req)\n\n    const uploadedFile = req.files.uploadedFile\n    uploadedFile.mv(localImageFileName, async (err) => {\n      if (err) {\n        const message =\n          'rb-image-manager-server/serverImageManagerUpload: Failed when uploading file'\n        log('error', message, { req })\n        res.status(500).send(JSON.stringify({ error: message }))\n        return\n      } else {\n        /*\n        const sharpImage = sharp(uploadedFile.data)\n        const imageMetadata = await sharpImage.metadata()\n\n        const width = imageMetadata.width\n        const height = imageMetadata.height\n\n        const RBImage_id = await objectManager.add('RBImage', {\n          RBImage_Width: width,\n          RBImage_Height: height,\n          RBImage_TimeStamp: new Date(),\n          RBImage_User_id: User_id,\n          RBImage_IsInUse: false,\n          RBImage_Storage: 100000, // File systems\n        })\n\n        await objectManager.add('RBImageCopy', {\n          id: RBImageCopy_id,\n          RBImageCopy_RBImage_id: RBImage_id,\n          RBImageCopy_Width: width,\n          RBImageCopy_Height: height,\n          RBImageCopy_ResizeMode: 100000, // Some mode\n        })\n\n        const RBImageGlobalId = toGlobalId('RBImage', RBImage_id)\n        */\n        res.send(JSON.stringify({ fileName: returnedImageFileName }))\n      }\n    })\n  } catch (err) {\n    const message = 'rb-image-manager-server/serverImageManagerUpload: Failed with exception'\n    log('error', message, { err, req })\n    res.status(500).send(JSON.stringify({ error: message }))\n  }\n})\n\nexport default serverImageManagerUpload\n"],"file":"serverImageManagerUpload.js"}