{"version":3,"sources":["../../../units/rb-image-manager-server/serverImageManagerDownload.js"],"names":["arrImageDownloadConfiguration","findImageDownloadConfiguration","req","imageDownloadConfiguration","isProperConfiguration","Error","serverImageManagerDownload","get","res","objectManager","UserAndSession","a_User","User","verificationIssue","verifyUserPermissions","localImageFileName","getLocalFileName_async","sendFile","err","message","status","send","JSON","stringify","error"],"mappings":";;AAEA;;AAEA;AACA;AACA;AACA;;;;;AAKA,kG;;AAEA;;AAEA;;AAEA,MAAMA,6BAAgE,GAAG,EAAzE;AACA,+CAAiCA,6BAAjC;;AAEA,SAASC,8BAAT,CAAwCC,GAAxC,EAAqD;AACnD,OAAK,IAAIC,0BAAT,IAAuCH,6BAAvC,EAAsE;AACpE,QAAIG,0BAA0B,CAACC,qBAA3B,CAAiDF,GAAjD,CAAJ,EAA2D;AACzD,aAAOC,0BAAP;AACD;AACF;;AAED,QAAM,IAAIE,KAAJ;AACJ,gGADI,CAAN;;AAGD;;AAED;;AAEA,MAAMC,0BAA0B,GAAG,uBAAnC;;AAEA;AACAA,0BAA0B,CAACC,GAA3B,CAA+B,WAA/B,EAA4C,OAAOL,GAAP,EAAYM,GAAZ,KAAoB;AAC9D,MAAI;AACF;AACA,UAAML,0BAA0B,GAAGF,8BAA8B,CAACC,GAAD,CAAjE;;AAEA;AACA,UAAMO,aAAa,GAAG,MAAM,qCAAiBP,GAAjB,EAAsBM,GAAtB,CAA5B;;AAEA;AACA,UAAME,cAAc,GAAG,MAAM,6DAAsCD,aAAtC,EAAqDP,GAArD,EAA0D,IAA1D,CAA7B;AACA,QAAI,CAACQ,cAAL,EAAqB,MAAM,IAAIL,KAAJ,CAAU,4BAAV,CAAN;;AAErB,UAAMM,MAAM,GAAGD,cAAc,CAACE,IAA9B;;AAEA,UAAMC,iBAAiB,GAAG,wCAAiBF,MAAjB,EAAyBT,GAAzB,EAA8B,OAA9B,CAA1B;AACA,QAAIW,iBAAJ,EAAuB,MAAM,IAAIR,KAAJ,CAAU,4BAAV,CAAN;;AAEvB;AACAF,IAAAA,0BAA0B,CAACW,qBAA3B,CAAiDL,aAAjD,EAAgEP,GAAhE;;AAEA;AACA,UAAMa,kBAAkB,GAAG,MAAMZ,0BAA0B,CAACa,sBAA3B;AAC/BP,IAAAA,aAD+B;AAE/BP,IAAAA,GAF+B,CAAjC;;;AAKAM,IAAAA,GAAG,CAACS,QAAJ,CAAaF,kBAAb;AACD,GA1BD,CA0BE,OAAOG,GAAP,EAAY;AACZ,UAAMC,OAAO,GAAG,4DAAhB;AACA,sBAAI,OAAJ,EAAaA,OAAb,EAAsB,EAAED,GAAF,EAAOhB,GAAP,EAAtB;AACAM,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,IAAI,CAACC,SAAL,CAAe,EAAEC,KAAK,EAAEL,OAAT,EAAf,CAArB;AACD;AACF,CAhCD,E;;AAkCeb,0B","sourcesContent":["// @flow\n\nimport express from 'express'\n\nimport createImageDownloadConfiguration from '../_configuration/rb-image-manager/createImageDownloadConfiguration'\nimport log from '../rb-base-server/log'\nimport { getObjectManager } from '../rb-base-server/ObjectManager'\nimport {\n  getUserAndSessionIDByUserToken1_async,\n  verifyUserToken2,\n} from '../rb-appbase-server/checkCredentials'\n\nimport ImageDownloadConfiguration from './ImageDownloadConfiguration'\n\n//\n\n// Create image upload configuration\n\nconst arrImageDownloadConfiguration: Array<ImageDownloadConfiguration> = []\ncreateImageDownloadConfiguration(arrImageDownloadConfiguration)\n\nfunction findImageDownloadConfiguration(req: Object) {\n  for (let imageDownloadConfiguration of arrImageDownloadConfiguration) {\n    if (imageDownloadConfiguration.isProperConfiguration(req)) {\n      return imageDownloadConfiguration\n    }\n  }\n\n  throw new Error(\n    'rb-image-manager-server/serverImageManagerDownload: Could not find appropriate configuration',\n  )\n}\n\n//\n\nconst serverImageManagerDownload = express()\n\n// Route for image downloiads\nserverImageManagerDownload.get('/download', async (req, res) => {\n  try {\n    // Get configuration\n    const imageDownloadConfiguration = findImageDownloadConfiguration(req)\n\n    // Create object manager\n    const objectManager = await getObjectManager(req, res)\n\n    // Verify credentials\n    const UserAndSession = await getUserAndSessionIDByUserToken1_async(objectManager, req, true)\n    if (!UserAndSession) throw new Error('Invalid user by UserToken1')\n\n    const a_User = UserAndSession.User\n\n    const verificationIssue = verifyUserToken2(a_User, req, 'query')\n    if (verificationIssue) throw new Error('Invalid user by UserToken2')\n\n    // Verify user permissions\n    imageDownloadConfiguration.verifyUserPermissions(objectManager, req)\n\n    // Get local file name\n    const localImageFileName = await imageDownloadConfiguration.getLocalFileName_async(\n      objectManager,\n      req,\n    )\n\n    res.sendFile(localImageFileName)\n  } catch (err) {\n    const message = 'rb-image-manager-server/serverImageManagerDownload: Failed'\n    log('error', message, { err, req })\n    res.status(500).send(JSON.stringify({ error: message }))\n  }\n})\n\nexport default serverImageManagerDownload\n"],"file":"serverImageManagerDownload.js"}