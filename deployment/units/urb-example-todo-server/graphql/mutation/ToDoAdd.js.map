{"version":3,"sources":["../../../../../units/urb-example-todo-server/graphql/mutation/ToDoAdd.js"],"names":["name","inputFields","ToDo_Text","type","GraphQLNonNull","GraphQLString","outputFields","ToDosEdge","ToDosConnection","edgeType","resolve","local_id","context","rootValue","objectManager","args","an_Object","getOneObject","id","arr","getObjectList","cursor","cursorForObjectInConnection","node","Viewer","ViewerType","parent","getViewerUserId","mutateAndGetPayload","add","ToDo_Complete"],"mappings":";;AAEA;AACA;;AAEA,0D;AACA,uF,yWANA;;AAQe,gDAA6B;AAC1CA,QAAM,SADoC;;AAG1CC,eAAa;AACXC,eAAW,EAAEC,MAAM,IAAIC,uBAAJ,CAAoBC,sBAApB,CAAR,EADA,EAH6B;;;AAO1CC,gBAAc;AACZC,eAAW;AACTJ,YAAMK,0BAAgBC,QADb;AAETC,eAAS,OAAM,EAAEC,QAAF,EAAN,QAAiCC,OAAjC,EAA0C,EAAEC,WAAWC,aAAb,EAA1C,KAA2E,KAAlDC,IAAkD;AAClF,cAAMC,YAAY,MAAMF,cAAcG,YAAd,CAA4B,MAA5B,EAAoC;AAC1DC,cAAIP,QADsD,EAApC,CAAxB;;;AAIA,cAAMQ,MAAM,MAAML,cAAcM,aAAd,CAA6B,MAA7B,EAAqC,EAArC,CAAlB;;AAEA,eAAO;AACLC,kBAAQP,cAAcQ,2BAAd,CAA2C,MAA3C,EAAmDH,GAAnD,EAAwDH,SAAxD,CADH;AAELO,gBAAMP,SAFD,EAAP;;AAID,OAbQ,EADC;;;AAiBZQ,YAAQ;AACNrB,YAAMsB,oBADA;AAENf,eAAS,CAAEgB,MAAF,EAAUX,IAAV,EAAgBH,OAAhB,EAAyB,EAAEC,WAAWC,aAAb,EAAzB;AACPA,oBAAcG,YAAd,CAA4B,MAA5B,EAAoC;AAClCC,YAAIJ,cAAca,eAAd,EAD8B,EAApC,CAHI,EAjBI,EAP4B;;;;;AAiC1CC,uBAAqB,OAAM,EAAE1B,SAAF,EAAN,EAAqBU,OAArB,EAA8B,EAAEC,WAAWC,aAAb,EAA9B,KAA+D;AAClF,UAAMH,WAAW,MAAMG,cAAce,GAAd,CAAmB,MAAnB,EAA2B;AAChD3B,eADgD;AAEhD4B,qBAAe,KAFiC,EAA3B,CAAvB;;AAIA,WAAO,EAAEnB,QAAF,EAAP;AACD,GAvCyC,EAA7B,C","file":"ToDoAdd.js","sourcesContent":["// @flow weak\n\nimport { mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLNonNull } from 'graphql'\n\nimport ToDosConnection from '../type/ToDosConnection'\nimport ViewerType from '../../../../units/urb-base-server/graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'ToDoAdd',\n\n  inputFields: {\n    ToDo_Text: { type: new GraphQLNonNull( GraphQLString ) },\n  },\n\n  outputFields: {\n    ToDosEdge: {\n      type: ToDosConnection.edgeType,\n      resolve: async({ local_id }, { ...args }, context, { rootValue: objectManager }) => {\n        const an_Object = await objectManager.getOneObject( 'ToDo', {\n          id: local_id,\n        })\n\n        const arr = await objectManager.getObjectList( 'ToDo', {})\n\n        return {\n          cursor: objectManager.cursorForObjectInConnection( 'ToDo', arr, an_Object ),\n          node: an_Object,\n        }\n      },\n    },\n\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject( 'User', {\n          id: objectManager.getViewerUserId(),\n        }),\n    },\n  },\n\n  mutateAndGetPayload: async({ ToDo_Text }, context, { rootValue: objectManager }) => {\n    const local_id = await objectManager.add( 'ToDo', {\n      ToDo_Text,\n      ToDo_Complete: false,\n    })\n    return { local_id }\n  },\n})\n"]}