{"version":3,"sources":["../../../units/urb-appbase-server/serverAuth.js"],"names":["require","load","serverAuth","use","bodyParser","json","req","res","next","requestLoggerAuth","login","objectManager","siteInformation","UserAccount_Identifier","body","toLowerCase","User_Secret","arr_UserAccount","getObjectList","UserAccount_artifact_id","artifact_id","length","status","error","a_User","getOneObject","id","UserAccount_User_id","Promise","resolve","bcryptjs","compare","err","passwordMatch","a_UserSession","UserSession_artifact_id","UserSession_User_id","UserSession_Start","Date","UserSession_Expired","add","codeFoundriesInjected","user","UserToken1","jwt","encode","session_id","process","env","JWT_SECRET","cookie","httpOnly","maxAge","success","UserToken2","message","post","createuser","Error","User_PasswordHash","hash","accountNameIsValidEmail","User_Email","Object","assign","User_artifact_id","Math","random","toString","substring","User_DisplayName","assignPrimaryKey","a_UserAccount","UserAccount_Type","all","console","log","UserSession","remove","expires"],"mappings":"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","sourcesContent":["// @flow\n\nimport bcryptjs from 'bcryptjs'\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport jwt from 'jwt-simple'\n\nimport authExtensions from '../_configuration/urb-base-server/authExtensions'\nimport delayPromise from '../urb-base-universal/delayPromise'\nimport getNewUser from '../_configuration/urb-base-server/graphql/model/getNewUser'\nimport onCreateUser from '../_configuration/urb-appbase-server/onCreateUser'\nimport { validateEmail } from '../urb-base-universal/validation'\nimport { requestLoggerAuth } from '../_configuration/urb-base-server/requestLoggers'\nimport logServerRequest from '../urb-base-server/logServerRequest'\nimport { getObjectManager } from '../urb-base-server/ObjectManager'\n\nimport { getUserAndSessionIDByUserToken1 } from './checkCredentials'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst serverAuth = express()\n\nserverAuth.use( bodyParser.json() )\nserverAuth.use( ( req, res, next ) => logServerRequest( req, res, next, requestLoggerAuth ) )\n\n//\n\nasync function login( req, res ) {\n  const objectManager = await getObjectManager( req, res )\n\n  // TODO x2000 No error handling is provided for when site information is not found\n  if ( objectManager.siteInformation ) {\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    await delayPromise( 1000 ) // Wait for a second to hamper a possible potential brute force attack\n\n    try {\n      const arr_UserAccount = await objectManager.getObjectList( 'UserAccount', {\n        UserAccount_artifact_id: objectManager.siteInformation.artifact_id,\n        UserAccount_Identifier: UserAccount_Identifier,\n      })\n\n      if ( arr_UserAccount.length === 0 ) {\n        res.status( 401 ).json({ error: 'User account not found' })\n      } else {\n        const a_User = await objectManager.getOneObject( 'User', {\n          id: arr_UserAccount[0].UserAccount_User_id,\n        })\n        if (\n          await new Promise( resolve =>\n            bcryptjs.compare( User_Secret, a_User.User_Secret, ( err, passwordMatch ) =>\n              resolve( passwordMatch ),\n            ),\n          )\n        ) {\n          // Create user session object\n          const a_UserSession = {\n            UserSession_artifact_id: objectManager.siteInformation.artifact_id, // Get previously assigned primary key\n            UserSession_User_id: a_User.id,\n            UserSession_Start: new Date(),\n            UserSession_Expired: false,\n          }\n\n          // Addsession to database\n          objectManager.add( 'UserSession', a_UserSession )\n          res.codeFoundriesInjected = { user: a_User }\n\n          // User has authenticated correctly thus we create a JWT token ith the session.\n          const UserToken1 = jwt.encode(\n            // $AssureFlow - id will be filled in by ObjectManager.add\n            { session_id: a_UserSession.id },\n            process.env.JWT_SECRET,\n          )\n\n          res.cookie( 'UserToken1', UserToken1, {\n            httpOnly: true,\n            maxAge: 30 * 24 * 60 * 60 * 1000,\n          })\n          res.json({ success: true, UserToken2: a_User.UserToken2 })\n        } else res.status( 401 ).json({ error: 'Incorrect password' })\n      }\n    } catch ( error ) {\n      res.status( 401 ).json({ error: error.message })\n    }\n  }\n}\nserverAuth.post( '/login', login )\n\nasync function createuser( req, res ) {\n  const objectManager = await getObjectManager( req, res )\n\n  if ( objectManager.siteInformation ) {\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    try {\n      const arr_UserAccount = await objectManager.getObjectList( 'UserAccount', {\n        UserAccount_artifact_id: objectManager.siteInformation.artifact_id,\n        UserAccount_Identifier: UserAccount_Identifier,\n      })\n\n      if ( arr_UserAccount.length > 0 ) throw new Error( 'User account already exists' )\n      const User_PasswordHash = await new Promise( resolve =>\n        bcryptjs.hash( User_Secret, 8, ( err, hash ) => resolve( hash ) ),\n      )\n\n      // If account name looks like email address, use it as email\n      const accountNameIsValidEmail = validateEmail( UserAccount_Identifier )\n      const User_Email = accountNameIsValidEmail ? UserAccount_Identifier : ''\n\n      // Create the user object\n      const a_User = Object.assign( getNewUser( objectManager.siteInformation.artifact_id ), {\n        User_artifact_id: objectManager.siteInformation.artifact_id,\n        UserToken2:\n          Math.random()\n            .toString( 36 )\n            .substring( 2 ) +\n          Math.random()\n            .toString( 36 )\n            .substring( 2 ),\n        User_Secret: User_PasswordHash,\n        User_DisplayName: UserAccount_Identifier,\n        User_Email: User_Email,\n      })\n      objectManager.assignPrimaryKey( 'User', a_User )\n\n      // Create user session object\n      const a_UserSession = {\n        UserSession_artifact_id: objectManager.siteInformation.artifact_id,\n        // Get previously assigned primary key\n        UserSession_User_id: a_User.id,\n        UserSession_Start: new Date(),\n        UserSession_Expired: false,\n      }\n\n      // Create user account object\n      const a_UserAccount = {\n        UserAccount_artifact_id: objectManager.siteInformation.artifact_id,\n        // Get previously assigned primary key\n        UserAccount_User_id: a_User.id,\n        UserAccount_Identifier: UserAccount_Identifier,\n        UserAccount_Type: 'un',\n      }\n\n      // Add user and session to database\n      await Promise.all([\n        objectManager.add( 'User', a_User ),\n        objectManager.add( 'UserSession', a_UserSession ),\n        objectManager.add( 'UserAccount', a_UserAccount ),\n        ...onCreateUser( a_User.id, objectManager ),\n      ])\n\n      res.codeFoundriesInjected = { user: a_User }\n\n      // User has been created thus we create a JWT token.\n      const UserToken1 = jwt.encode(\n        // $AssureFlow - id will be filled in by ObjectManager.add\n        { session_id: a_UserSession.id },\n        process.env.JWT_SECRET,\n      )\n\n      // Set cookie and return\n      res.cookie( 'UserToken1', UserToken1, { httpOnly: true, maxAge: 30 * 24 * 60 * 60 * 1000 })\n      res.json({ success: true })\n    } catch ( error ) {\n      console.log( error )\n      res.status( 401 ).json({ error: '' + error.message })\n    }\n  }\n}\nserverAuth.post( '/createuser', createuser )\n\nserverAuth.post( '/logout', async( req, res ) => {\n  const objectManager = await getObjectManager( req, res )\n  const UserSession = ( await getUserAndSessionIDByUserToken1( objectManager, req ) ).UserSession\n\n  await objectManager.remove( 'UserSession', { id: UserSession.id })\n\n  res.cookie( 'UserToken1', '', { httpOnly: true, expires: new Date( 1 ) })\n  res.json({ success: true })\n})\n\n// Add extensions - custom configurations\nauthExtensions( serverAuth )\nexport default serverAuth\n"],"file":"serverAuth.js"}