{"version":3,"sources":["../../../../../units/urb-appbase-server/graphql/type/GraphQLDateTime.js"],"names":["coerceDate","value","Date","Error","JSON","stringify","isNaN","getTime","toJSON","parseLiteral","ast","kind","Kind","STRING","GraphQLError","result","GraphQLScalarType","name","description","serialize","parseValue"],"mappings":";;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,SAASA,UAAT,CAAqBC,KAArB,EAA6B;AAC3BA,UAAQ,IAAIC,IAAJ,CAAUD,KAAV,CAAR;AACA,MAAK,EAAGA,iBAAiBC,IAApB,CAAL;AACE;AACA,UAAM,IAAIC,KAAJ;AACJ,+DAA2DC,KAAKC,SAAL,CAAgBJ,KAAhB,CADvD,CAAN;;;AAIF,MAAKK,MAAOL,MAAMM,OAAN,EAAP,CAAL,EAAgC,MAAM,IAAIJ,KAAJ,CAAW,uCAAX,CAAN;;AAEhC,SAAOF,MAAMO,MAAN,EAAP;AACD;;AAED,SAASC,YAAT,CAAuBC,GAAvB,EAA6B;AAC3B,MAAKA,IAAIC,IAAJ,KAAaC,eAAKC,MAAvB;AACE,QAAM,IAAIC,mBAAJ,CAAkB,6DAA6DJ,IAAIC,IAAnF,EAAyF;AAC7FD,KAD6F,CAAzF,CAAN;;;AAIF,MAAIK,SAAS,IAAIb,IAAJ,CAAUQ,IAAIT,KAAd,CAAb;AACA,MAAKK,MAAOS,OAAOR,OAAP,EAAP,CAAL,EAAiC,MAAM,IAAIO,mBAAJ,CAAkB,2BAAlB,EAA+C,CAAEJ,GAAF,CAA/C,CAAN;;AAEjC,MAAKA,IAAIT,KAAJ,KAAcc,OAAOP,MAAP,EAAnB;AACE,QAAM,IAAIM,mBAAJ;AACJ,4EADI;AAEJ,GAAEJ,GAAF,CAFI,CAAN;;;AAKF,SAAOK,MAAP;AACD,C;;AAEc,IAAIC,0BAAJ,CAAsB;AACnCC,QAAM,UAD6B;AAEnCC,eAAa,+CAFsB;AAGnCC,aAAWnB,UAHwB;AAInCoB,cAAYpB,UAJuB;AAKnCS,gBAAcA,YALqB,EAAtB,C","file":"GraphQLDateTime.js","sourcesContent":["// @flow\n\nimport { GraphQLScalarType } from 'graphql'\nimport { GraphQLError } from 'graphql/error'\nimport { Kind } from 'graphql/language'\n\n// The code in this file is largely modified version of:\n// https://github.com/soundtrackyourbrand/graphql-custom-datetype/blob/master/datetype.js\n\nfunction coerceDate( value ) {\n  value = new Date( value )\n  if ( !( value instanceof Date ) )\n    // Is this how you raise a 'field error'?\n    throw new Error(\n      'Field error: value is not an instance of Date, value =' + JSON.stringify( value ),\n    )\n\n  if ( isNaN( value.getTime() ) ) throw new Error( 'Field error: value is an invalid Date' )\n\n  return value.toJSON()\n}\n\nfunction parseLiteral( ast ) {\n  if ( ast.kind !== Kind.STRING )\n    throw new GraphQLError( 'Query error: Can only parse strings to dates but got a: ' + ast.kind, [\n      ast,\n    ])\n\n  let result = new Date( ast.value )\n  if ( isNaN( result.getTime() ) ) throw new GraphQLError( 'Query error: Invalid date', [ ast ])\n\n  if ( ast.value !== result.toJSON() )\n    throw new GraphQLError(\n      'Query error: Invalid date format, only accepts: YYYY-MM-DDTHH:MM:SS.SSSZ',\n      [ ast ],\n    )\n\n  return result\n}\n\nexport default new GraphQLScalarType({\n  name: 'DateTime',\n  description: 'Scalar type for storing date-time information',\n  serialize: coerceDate,\n  parseValue: coerceDate,\n  parseLiteral: parseLiteral,\n})\n"]}