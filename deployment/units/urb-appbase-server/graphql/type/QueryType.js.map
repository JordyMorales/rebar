{"version":3,"sources":["../../../../../units/urb-appbase-server/graphql/type/QueryType.js"],"names":["resolveNodeField","source","args","context","rootValue","objectManager","id","type","getOneObject_async","GraphQLObjectType","name","fields","node","NodeInterface","GraphQLNonNull","GraphQLID","resolve","Viewer","ViewerType","parent","getViewerUserId"],"mappings":";;AAEA;AACA;;AAEA;;AAEA,kE,8FAPA;;AASA,SAASA,gBAAT,CAA2BC,MAA3B,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkD,EAAEC,SAAS,EAAEC,aAAb,EAAlD,EAAgF;AAC9E;AACA;AACA;AACA,QAAM,EAAEC,EAAF,EAAMC,IAAN,KAAe,gCAAcL,IAAI,CAACI,EAAnB,CAArB;;AAEA;AACA;AACA,MAAKC,IAAI,KAAK,QAAd,EAAyB,OAAOF,aAAa,CAACG,kBAAd,CAAkC,MAAlC,EAA0C,EAAEF,EAAE,EAAEA,EAAN,EAA1C,CAAP,CAAzB;AACK,SAAOD,aAAa,CAACG,kBAAd,CAAkCD,IAAlC,EAAwC,EAAED,EAAE,EAAEA,EAAN,EAAxC,CAAP;AACN,C;;AAEc,IAAIG,0BAAJ,CAAsB;AACnCC,EAAAA,IAAI,EAAE,OAD6B;AAEnCC,EAAAA,MAAM,EAAE,OAAO;AACbC,IAAAA,IAAI,EAAE;AACJL,MAAAA,IAAI,EAAEM,sBADF;AAEJX,MAAAA,IAAI,EAAE;AACJI,QAAAA,EAAE,EAAE,EAAEC,IAAI,EAAE,IAAIO,uBAAJ,CAAoBC,kBAApB,CAAR,EADA,EAFF;;AAKJC,MAAAA,OAAO,EAAEhB,gBALL,EADO;;AAQbiB,IAAAA,MAAM,EAAE;AACNV,MAAAA,IAAI,EAAEW,mBADA;AAENF,MAAAA,OAAO,EAAE,CAAEG,MAAF,EAAUjB,IAAV,EAAgBC,OAAhB,EAAyB,EAAEC,SAAS,EAAEC,aAAb,EAAzB;AACPA,MAAAA,aAAa,CAACG,kBAAd,CAAkC,MAAlC,EAA0C,EAAEF,EAAE,EAAED,aAAa,CAACe,eAAd,EAAN,EAA1C,CAHI,EARK,EAAP,CAF2B,EAAtB,C","sourcesContent":["// @flow weak\n\nimport { fromGlobalId } from 'graphql-relay'\nimport { GraphQLID, GraphQLNonNull, GraphQLObjectType } from 'graphql'\n\nimport NodeInterface from '../NodeInterface'\n\nimport ViewerType from './ViewerType'\n\nfunction resolveNodeField( source, args, context, { rootValue: objectManager }) {\n  // the node field will receive a globally\n  // unique id, and here we convert that back\n  // to the local type and id\n  const { id, type } = fromGlobalId( args.id )\n\n  // map the local type and id into the\n  // actual data for the record\n  if ( type === 'Viewer' ) return objectManager.getOneObject_async( 'User', { id: id })\n  else return objectManager.getOneObject_async( type, { id: id })\n}\n\nexport default new GraphQLObjectType({\n  name: 'Query',\n  fields: () => ({\n    node: {\n      type: NodeInterface,\n      args: {\n        id: { type: new GraphQLNonNull( GraphQLID ) },\n      },\n      resolve: resolveNodeField,\n    },\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject_async( 'User', { id: objectManager.getViewerUserId() }),\n    },\n  }),\n})\n"],"file":"QueryType.js"}