{"version":3,"sources":["../../../units/urb-appbase-server/serverWebApp.js"],"names":["require","load","envHost","process","env","HOST","Error","envPort","PORT","serverWebApp","gatherLocationAndSiteInformation","req","res","assetsPath","siteInformation","NODE_ENV","isCfMakerDisabled","inEditingMode","version","siteConfiguration","envPortWebpack","PORT_WEBPACK","render","renderError","obj","error","status","log","use","siteInformationAndAssets","fetcher","FetcherServer","cookies","UserToken1","UserToken2ServerRendering","userAgent","headers","siteConfigurationSubset","webapp","builder","siteRouteConfig","redirect","element","url","historyMiddlewares","routeConfig","resolver","relayPayload","isJSON","sheets","SheetsRegistry","helmet","Helmet","rewind","rootHTML","ReactDOMServer","renderToString","path","resolve","__dirname","assets_path","root_html","server_side_styles","toString","htmlHeadAdditions","JSON","stringify","relay_payload","send","err"],"mappings":"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","file":"serverWebApp.js","sourcesContent":["// @flow\n\nimport path from 'path'\n\nimport createRender from 'found/lib/createRender'\nimport { getFarceResult } from 'found/lib/server'\nimport express from 'express'\nimport Helmet from 'react-helmet'\nimport React from 'react'\nimport { JssProvider, SheetsRegistry } from 'react-jss'\nimport ReactDOMServer from 'react-dom/server'\nimport serialize from 'serialize-javascript'\n\nimport AppWrapper from '../_configuration/urb-appbase-webapp/AppWrapper'\nimport ErrorComponent from '../_configuration/urb-appbase-webapp/ErrorComponent'\nimport getGraphQLLocalServerURL from '../_configuration/urb-base-server/getGraphQLLocalServerURL'\nimport { getSiteInformation } from '../_configuration/urb-base-server/siteSettings'\nimport log from '../urb-base-server/log'\nimport { version } from '../_configuration/package'\nimport UserToken2ServerRendering from '../_configuration/urb-base-server/UserToken2ServerRendering'\nimport htmlHeadAdditions from '../_configuration/urb-appbase-webapp/htmlHeadAdditions'\nimport type { SiteInformation } from '../urb-appbase-server/types/SiteInformation.types'\nimport { createResolver, historyMiddlewares, routeConfig } from '../urb-appbase-webapp/router'\n\nimport FetcherServer from './fetcherServer'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst envHost = process.env.HOST\nif ( envHost == null || typeof envHost !== 'string' )\n  throw new Error( 'Error: urb-appbase-webapp requires the environment variable HOST to be set' )\n\nconst envPort = process.env.PORT\nif ( envPort == null || typeof envPort !== 'string' )\n  throw new Error( 'Error: urb-appbase-webapp requires the environment variable PORT to be set' )\n\n// Create express router for the web app\nconst serverWebApp = express()\n\nasync function gatherLocationAndSiteInformation(\n  req: Object,\n  res: Object,\n): Promise<?{ siteInformation: SiteInformation, assetsPath: string }> {\n  let assetsPath\n  const siteInformation = await getSiteInformation( req, res )\n  if ( siteInformation ) {\n    if ( process.env.NODE_ENV === 'production' ) {\n      assetsPath =\n        siteInformation.isCfMakerDisabled || siteInformation.inEditingMode\n          ? // When editing in production, use the assets with the configuration readign code intact (built when cutting a site version)\n            `/assets/${version}`\n          : // When in production mode, serve the assets compiled by maker\n            `/sassets/${version}.${siteInformation.siteConfiguration.version}`\n    } else {\n      // Get webpack port only in development. In production it can be omitted\n      const envPortWebpack = process.env.PORT_WEBPACK\n      if ( envPortWebpack == null || typeof envPortWebpack !== 'string' )\n        throw new Error(\n          'Error: urb-appbase-webapp requires the environment variable PORT_WEBPACK to be set',\n        )\n\n      // When in development, always go to webpack over http\n      assetsPath = `http://${envHost}:${envPortWebpack}/${version}`\n    }\n\n    return { siteInformation, assetsPath }\n  } else return null\n}\n\nconst render = createRender({\n  renderError( obj: Object ): React$Element<*> {\n    const { error } = obj\n    if ( error.status !== 404 )\n      log.log( 'error', 'Error: Render on server createRender renderError', obj )\n    return <ErrorComponent httpStatus={error.status} />\n  },\n})\n\nserverWebApp.use( async( req, res ) => {\n  try {\n    const siteInformationAndAssets = await gatherLocationAndSiteInformation( req, res )\n    if ( siteInformationAndAssets ) {\n      const { siteInformation, assetsPath } = siteInformationAndAssets\n\n      // It is possible that artifact_id can not be determined during development. For instance, when browsing\n      // the project on localhost using a specific port, Chrome will request robots.txt and favicon.ico and\n      // they will not have the proper dev-host header. In this case simply report the file missing.\n      // This does not affect operation in production, since host will be passed for all requests.\n      if ( !siteInformation ) {\n        res.status( 404 )\n        return\n      }\n\n      const fetcher = new FetcherServer(\n        `http://${envHost}:${envPort}` + getGraphQLLocalServerURL( siteInformation ),\n        req.cookies.UserToken1,\n        UserToken2ServerRendering,\n      )\n\n      const userAgent = req.headers['user-agent']\n      const { siteConfiguration } = siteInformation\n      const siteConfigurationSubset = {\n        webapp: siteConfiguration.webapp,\n        builder: siteConfiguration.builder,\n      }\n\n      const siteRouteConfig = routeConfig( siteConfigurationSubset )\n\n      const { redirect, element } = await getFarceResult({\n        url: req.url,\n        historyMiddlewares,\n        routeConfig: siteRouteConfig,\n        resolver: createResolver( fetcher ),\n        render,\n      })\n\n      if ( redirect ) {\n        res.redirect( 302, redirect.url )\n        return\n      }\n\n      const relayPayload = serialize( fetcher, { isJSON: true })\n\n      const sheets = new SheetsRegistry()\n      const helmet = Helmet.rewind()\n\n      const rootHTML = ReactDOMServer.renderToString(\n        <JssProvider registry={sheets}>\n          <AppWrapper\n            userAgent={userAgent}\n            siteConfiguration={siteConfigurationSubset}\n            url={req.url}\n          >\n            {element}\n          </AppWrapper>\n        </JssProvider>,\n      )\n\n      res.render( path.resolve( __dirname, 'html.ejs' ), {\n        assets_path: assetsPath,\n        root_html: rootHTML,\n        server_side_styles: sheets.toString(),\n        helmet,\n        htmlHeadAdditions,\n        siteConfiguration: JSON.stringify( siteConfigurationSubset ),\n        relay_payload: relayPayload,\n      })\n    } else {\n      res.status( 200 ).send( 'meh' )\n    }\n  } catch ( err ) {\n    log.log( 'error', 'Error: Render on server request', err )\n    res.status( 500 ).send( ReactDOMServer.renderToString( <ErrorComponent httpStatus={500} /> ) )\n  }\n})\nexport default serverWebApp\n"]}