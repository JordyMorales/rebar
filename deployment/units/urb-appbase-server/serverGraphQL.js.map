{"version":3,"sources":["../../../units/urb-appbase-server/serverGraphQL.js"],"names":["serverGraphQL","use","bodyParser","json","req","res","next","requestLoggerGraphQL","root","objectManager","siteInformation","a_User","User","codeFoundriesInjected","user","schema","rootValue","pretty","graphiql","err","log","status","send","JSON","stringify","error"],"mappings":";;AAEA,yC;AACA,kC;AACA,iD;;AAEA,6C;AACA;AACA,uE;AACA;;AAEA;;;;;AAKA,0C;;;AAGA,8D;;AAEA;AACA,MAAMA,gBAAgB,wBAAtB;;AAEA;AARsC;AAEtC;AAOAA,cAAcC,GAAd,CAAmBC,qBAAWC,IAAX,EAAnB,E,CAEA;AACAH,cAAcC,GAAd,CAAmB,CAAEG,GAAF,EAAOC,GAAP,EAAYC,IAAZ,KAAsB,gCAAkBF,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkCC,oCAAlC,CAAzC;;AAEA,eAAeC,IAAf,CAAqBJ,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAsC;AACpC,MAAI;AACF,UAAMG,gBAAgB,MAAM,qCAAkBL,GAAlB,EAAuBC,GAAvB,CAA5B;AACA,QAAKI,cAAcC,eAAnB,EAAqC;AACnC,UAAI;AACF,cAAMC,SAAS,CAAE,MAAM,uDAAiCF,aAAjC,EAAgDL,GAAhD,CAAR,EAAgEQ,IAA/E;;AAEAP,YAAIQ,qBAAJ,GAA4B,EAAEC,MAAMH,MAAR,EAA5B;AACA,cAAM,2CAAqBA,MAArB,EAA6BP,GAA7B,CAAN;;AAEA,sCAAa,MAAM;AACjB,iBAAO;AACLW,oBAAQA,gBADH;AAELC,uBAAWP,aAFN;AAGLQ,oBAAQ,IAHH;AAILC,sBAAU,IAJL,EAAP;;AAMD,SAPD,EAOId,GAPJ,EAOSC,GAPT,EAOcC,IAPd;AAQD,OAdD,CAcE,OAAQa,GAAR,EAAc;AACd,yDAA2Bf,GAA3B,EAAgCC,GAAhC,EAAqCc,GAArC,EAA0C,IAA1C;AACD;AACF;AACF,GArBD,CAqBE,OAAQA,GAAR,EAAc;AACdC,kBAAIA,GAAJ,CAAS,OAAT,EAAkB,gBAAlB,EAAoCD,GAApC;AACAd,QAAIgB,MAAJ,CAAY,GAAZ,EAAkBC,IAAlB;AACEC,SAAKC,SAAL,CAAe;AACbC,aAAO,mDADM,EAAf,CADF;;;AAKD;AACF;AACDzB,cAAcC,GAAd,CAAmB,GAAnB,EAAwBO,IAAxB,E;;AAEeR,a","file":"serverGraphQL.js","sourcesContent":["// @flow\n\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport graphQLHTTP from 'express-graphql'\n\nimport log from '../urb-base-server/log'\nimport { requestLoggerGraphQL } from '../_configuration/urb-base-server/requestLoggers'\nimport logServerRequest from '../urb-base-server/logServerRequest'\nimport { getObjectManager } from '../urb-base-server/ObjectManager'\n\nimport {\n  getUserAndSessionIDByUserToken1,\n  verifyUserAuthToken,\n  serveAuthenticationFailed,\n} from './checkCredentials'\nimport schema from './graphql/schema' // Schema for GraphQL server\n\n// Guarantee that all object registrations and schema definitions are executed\nimport '../_configuration/urb-base-server/graphql/_schemas'\n\n// Create router for GraphQL\nconst serverGraphQL = express()\n\n// Set up parser\nserverGraphQL.use( bodyParser.json() )\n\n// Set up logging\nserverGraphQL.use( ( req, res, next ) => logServerRequest( req, res, next, requestLoggerGraphQL ) )\n\nasync function root( req, res, next ) {\n  try {\n    const objectManager = await getObjectManager( req, res )\n    if ( objectManager.siteInformation ) {\n      try {\n        const a_User = ( await getUserAndSessionIDByUserToken1( objectManager, req ) ).User\n\n        res.codeFoundriesInjected = { user: a_User }\n        await verifyUserAuthToken( a_User, req )\n\n        graphQLHTTP( () => {\n          return {\n            schema: schema,\n            rootValue: objectManager,\n            pretty: true,\n            graphiql: true,\n          }\n        })( req, res, next )\n      } catch ( err ) {\n        serveAuthenticationFailed( req, res, err, true )\n      }\n    }\n  } catch ( err ) {\n    log.log( 'error', 'Error: GraphQL', err )\n    res.status( 500 ).send(\n      JSON.stringify({\n        error: 'An error has occurred while running GraphQL query',\n      }),\n    )\n  }\n}\nserverGraphQL.use( '/', root )\n\nexport default serverGraphQL\n"]}