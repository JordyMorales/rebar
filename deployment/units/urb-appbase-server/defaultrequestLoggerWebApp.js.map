{"version":3,"sources":["../../../units/urb-appbase-server/defaultrequestLoggerWebApp.js"],"names":["defaultrequestLoggerWebApp","requestAndResponse","logLevel","debugWriteToLogServerRequestWebApp","log","level","message","details"],"mappings":";;AAEA;AACA;AACA,0F,8FAJA;;AAMe,SAASA,0BAAT,CAAqCC,kBAArC,EAA0D;AACvE,MAAIC,QAAQ,GAAG,IAAf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK,2BAAcD,kBAAd,EAAkCE,yCAAlC,CAAL,EAA8ED,QAAQ,GAAG,MAAX;;AAE9E,MAAKA,QAAL;AACEE,eAAIA,GAAJ,CAAQ,EAAEC,KAAK,EAAEH,QAAT,EAAmBI,OAAO,EAAE,0BAA5B,EAAwDC,OAAO,EAAEN,kBAAjE,EAAR;AACH","sourcesContent":["// @flow weak\n\nimport { debugWriteToLogServerRequestWebApp } from '../_configuration/debug'\nimport log from '../urb-base-server/log'\nimport matchInDepth from '../urb-base-universal/matchInDepth'\n\nexport default function defaultrequestLoggerWebApp( requestAndResponse ) {\n  let logLevel = null\n\n  // TODO: What errors for Auth should be logged? definitily not 401.\n  // // If there is an error, log it as an error\n  // if( requestAndResponse.response.indexOf( '\"errors\": [' ) > 0 )\n  //   logLevel = 'error'\n  // Otherwise, if it is a trace, log it as info\n  //else\n  if ( matchInDepth( requestAndResponse, debugWriteToLogServerRequestWebApp ) ) logLevel = 'info'\n\n  if ( logLevel )\n    log.log({ level: logLevel, message: 'Render on server request', details: requestAndResponse })\n}\n"],"file":"defaultrequestLoggerWebApp.js"}