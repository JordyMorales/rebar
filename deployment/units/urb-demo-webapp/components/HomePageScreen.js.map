{"version":3,"sources":["../../../../units/urb-demo-webapp/components/HomePageScreen.jsx"],"names":["styles","card","minWidth","HomePageScreen","React","Component","render","classes","props","data","name","value","context","rbCtx","siteConfiguration","webapp","urbDemo","version","OSType","OSHostName","OSFreeMem","api","googleMapsJavascriptAPI","map","n","contextTypes","PropTypes","object"],"mappings":";;AAEA,8C;;AAEA,4D;;AAEA,0D;;AAEA;;AAEA,gD;;AAEA,wD;;AAEA,wD;;AAEA,wD;;AAEA,sD;;AAEA,0D;;AAEA,uC;AACA,8B;AACA;;AAEA,+F;;AAEA,MAAMA,SAAS;AACbC,QAAM;AACJC,cAAU,GADN,EADO,EAAf;;;;AAMA,MAAMC,cAAN,SAA6BC,gBAAMC;;;AAGhC;;;;;AAKDC,WAAS;AACP,UAAM,EAAEC,OAAF,KAAc,KAAKC,KAAzB;;AAEA,UAAMC,OAAO;AACX,MAAEC,MAAM,eAAR,EAAyBC,OAAO,KAAKC,OAAL,CAAaC,KAAb,CAAmBC,iBAAnB,CAAqCC,MAArC,CAA4CC,OAA5C,CAAoDC,OAApF,EADW;AAEX,MAAEP,MAAM,WAAR,EAAqBC,OAAO,KAAKC,OAAL,CAAaC,KAAb,CAAmBC,iBAAnB,CAAqCC,MAArC,CAA4CC,OAA5C,CAAoDE,MAAhF,EAFW;AAGX;AACER,YAAM,kBADR;AAEEC,aAAO,KAAKC,OAAL,CAAaC,KAAb,CAAmBC,iBAAnB,CAAqCC,MAArC,CAA4CC,OAA5C,CAAoDG,UAF7D,EAHW;;AAOX;AACET,YAAM,oBADR;AAEEC,aAAO,KAAKC,OAAL,CAAaC,KAAb,CAAmBC,iBAAnB,CAAqCC,MAArC,CAA4CC,OAA5C,CAAoDI,SAF7D,EAPW;;AAWX;AACEV,YAAM,qBADR;AAEEC,aAAO,KAAKC,OAAL,CAAaC,KAAb,CAAmBC,iBAAnB,CAAqCC,MAArC,CAA4CM,GAA5C,CAAgDC,uBAFzD,EAXW,CAAb;;;;AAiBA;AACE,oCAAC,+BAAD;AACE,sCAAC,cAAD,IAAM,WAAWf,QAAQN,IAAzB;AACE,wCAAC,oBAAD,IAAY,OAAM,kCAAlB,GADF;AAEE,wCAAC,qBAAD;AACE,0CAAC,oBAAD,IAAY,WAAU,GAAtB;AACM,iBADN;AAEE,mDAAG,MAAK,kEAAR,kCAFF;;AAIO,iBAJP;;;;;;;;;AAaE,uDAbF;AAcE,uDAdF,CADF;;AAiBE,0CAAC,oBAAD,IAAY,WAAU,IAAtB;AACE;AACE,2EADF,0IADF;;;AAKE;AACE,sEADF,4QALF,CAjBF,CAFF,CADF;;;;;;;;AAkCE,iDAlCF;AAmCE,sCAAC,cAAD,IAAM,WAAWM,QAAQN,IAAzB;AACE,wCAAC,oBAAD,IAAY,OAAM,oBAAlB,GADF;AAEE,wCAAC,qBAAD;AACE,0CAAC,oBAAD,IAAY,WAAU,GAAtB;AACkC,wGADlC,MADF;;AAIE,0CAAC,eAAD;AACE,4CAAC,mBAAD;AACE,8CAAC,kBAAD;AACE,gDAAC,mBAAD,mBADF;AAEE,gDAAC,mBAAD,IAAW,aAAX,YAFF,CADF,CADF;;;AAOE,4CAAC,mBAAD;AACGQ,qBAAKc,GAAL,CAAUC,KAAK;AACd;AACE,kDAAC,kBAAD,IAAU,KAAKA,EAAEd,IAAjB;AACE,oDAAC,mBAAD,QAAYc,EAAEd,IAAd,CADF;AAEE,oDAAC,mBAAD,IAAW,aAAX,IAAoBc,EAAEb,KAAtB,CAFF,CADF;;;AAMD,iBAPA,CADH,CAPF,CAJF,CAFF,CAnCF,CADF;;;;;;;AAgED,GAzFA,CAHGR,c,CAIGsB,Y,GAAe,EACpBZ,OAAOa,oBAAUC,MADG,E;;;AA2FT;AACb,wBAAY3B,MAAZ,EAAsBG,cAAtB,CADa,6F","file":"HomePageScreen.js","sourcesContent":["// @flow\n\nimport Card from '@material-ui/core/Card'\n\nimport CardContent from '@material-ui/core/CardContent'\n\nimport CardHeader from '@material-ui/core/CardHeader'\n\nimport { withStyles } from '@material-ui/core/styles'\n\nimport Table from '@material-ui/core/Table'\n\nimport TableBody from '@material-ui/core/TableBody'\n\nimport TableCell from '@material-ui/core/TableCell'\n\nimport TableHead from '@material-ui/core/TableHead'\n\nimport TableRow from '@material-ui/core/TableRow'\n\nimport Typography from '@material-ui/core/Typography'\n\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { createFragmentContainer, graphql } from 'react-relay'\n\nimport ResponsiveContentArea from '../../urb-base-webapp/components/ResponsiveContentArea'\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n}\n\nclass HomePageScreen extends React.Component<{\n  classes: Object,\n  Viewer: Object,\n}> {\n  static contextTypes = {\n    rbCtx: PropTypes.object,\n  }\n\n  render() {\n    const { classes } = this.props\n\n    const data = [\n      { name: 'Rebar Version', value: this.context.rbCtx.siteConfiguration.webapp.urbDemo.version },\n      { name: 'Server OS', value: this.context.rbCtx.siteConfiguration.webapp.urbDemo.OSType },\n      {\n        name: 'Server Host Name',\n        value: this.context.rbCtx.siteConfiguration.webapp.urbDemo.OSHostName,\n      },\n      {\n        name: 'Server Free Memory',\n        value: this.context.rbCtx.siteConfiguration.webapp.urbDemo.OSFreeMem,\n      },\n      {\n        name: 'Google Maps API Key',\n        value: this.context.rbCtx.siteConfiguration.webapp.api.googleMapsJavascriptAPI,\n      },\n    ]\n\n    return (\n      <ResponsiveContentArea>\n        <Card className={classes.card}>\n          <CardHeader title=\"Universal Relay Boilerplate Demo\" />\n          <CardContent>\n            <Typography component=\"p\">\n              The{' '}\n              <a href=\"http://codefoundries.com/products/UniversalRelayBoilerplate.html\">\n                Universal Relay Boilerplate\n              </a>{' '}\n              is and open source project representing basic foundation of the solutions we provide.\n              It fully utilizes the react stack, and Node.js and Cassandra on the back end. It can\n              be used both as boilerplate, as well as an educational tool with multiple examples\n              available. Basic user account management including account creation, password strength\n              indicator and user profile is also included. The boilerplate is optimized for\n              supportability and update-ability. It allows us to update the multiple projects based\n              on the boilerplate with minimum effort, providing new features, improvements and bug\n              fixes. This is achieved through the following two approaches:\n              <br />\n              <br />\n            </Typography>\n            <Typography component=\"ul\">\n              <li>\n                <b>Configurability</b> - All the configuration files, which include settings, CQL,\n                JSON, snippets of JavaScript and JSX are separated from the common code.\n              </li>\n              <li>\n                <b>Modularity</b> - The applications built upon the boilerplate are separated into\n                semi-independent units, which contain the necessary front-end, back end, relay, CQL,\n                etc. code. The parameters and settings for those units are stored in the\n                configuration folder for eacy updating.\n              </li>\n            </Typography>\n          </CardContent>\n        </Card>\n        <br />\n        <Card className={classes.card}>\n          <CardHeader title=\"Site Configuration\" />\n          <CardContent>\n            <Typography component=\"p\">\n              These settings are derived from <b>_configuration/urb-base-server/siteSettings.js</b>.\n            </Typography>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Property</TableCell>\n                  <TableCell numeric>Value</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data.map( n => {\n                  return (\n                    <TableRow key={n.name}>\n                      <TableCell>{n.name}</TableCell>\n                      <TableCell numeric>{n.value}</TableCell>\n                    </TableRow>\n                  )\n                })}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </ResponsiveContentArea>\n    )\n  }\n}\n\nexport default createFragmentContainer(\n  withStyles( styles )( HomePageScreen ),\n  graphql`\n    fragment HomePageScreen_Viewer on Viewer {\n      id\n    }\n  `,\n)\n"]}