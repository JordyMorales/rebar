{"version":3,"sources":["../../../units/urb-base-tools/MasterWriter.js"],"names":["copyFileAsync","copyFile","mkdirAsync","mkdir","MasterWriter","constructor","basePath","directories","Map","arrPromises","ensureRelativePathExistsHelper","filePath","has","console","log","creating","resolve","err","code","set","ensureRelativePathExists","destinationRelative","arrPath","split","pathAccumulated","ix","length","sourceAbsolute","push","writeFile","fileContent","executeQueue","XXX","countAtEnd","Promise","all"],"mappings":";;AAEA,wB;AACA,4B;AACA;;AAEA,wD;;AAEA;AACA,MAAMA,gBAAgB,qBAAW,aAAGC,QAAd,CAAtB;AACA,MAAMC,aAAa,qBAAW,aAAGC,KAAd,CAAnB;;AAEe,MAAMC,YAAN,CAAmB;;;;;;AAMhCC,cAAaC,QAAb,EAAgC;AAC9B,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACD,GAV+B,CAGhC;;AASA,QAAMC,8BAAN,CAAsCC,QAAtC,EAAyD;AACvD,QAAK,CAAC,KAAKJ,WAAL,CAAiBK,GAAjB,CAAsBD,QAAtB,CAAN,EAAyC;AACvCE,cAAQC,GAAR,CAAY,EAAEC,UAAU,IAAZ,EAAkBJ,QAAlB,EAAZ;;AAEA,UAAI;AACF,cAAMT,WAAY,eAAKc,OAAL,CAAc,KAAKV,QAAnB,EAA6BK,QAA7B,CAAZ,CAAN;AACD,OAFD,CAEE,OAAQM,GAAR,EAAc;AACd,YAAKA,IAAIC,IAAJ,KAAa,QAAlB,EAA6B,MAAMD,GAAN;AAC9B;;AAED,WAAKV,WAAL,CAAiBY,GAAjB,CAAsBR,QAAtB,EAAgC,IAAhC;AACD;AACF;;AAED,QAAMS,wBAAN,CAAgCC,mBAAhC,EAA8D;AAC5D,UAAMC,UAAUD,oBAAoBE,KAApB,CAA2B,GAA3B,CAAhB;;AAEA,SAAM,IAAIC,kBAAkB,EAAtB,EAA0BC,KAAK,CAArC,EAAwCA,KAAKH,QAAQI,MAArD,EAA6DD,IAA7D,EAAoE;AAClE,YAAM,KAAKf,8BAAL,CAAqCc,eAArC,CAAN;AACAA,yBAAmBF,QAAQG,EAAR,IAAc,GAAjC;AACD;AACF;;AAED,QAAMxB,QAAN,CAAgB0B,cAAhB,EAAwCN,mBAAxC,EAAsE;AACpE,UAAM,KAAKD,wBAAL,CAA+BC,mBAA/B,CAAN;;AAEA,SAAKZ,WAAL,CAAiBmB,IAAjB,CAAuB5B,cAAe2B,cAAf,EAA+B,KAAKrB,QAAL,GAAgB,GAAhB,GAAsBe,mBAArD,CAAvB;AACD;;AAED,QAAMQ,SAAN,CAAiBR,mBAAjB,EAA8CS,WAA9C,EAAoE;AAClE,UAAM,KAAKV,wBAAL,CAA+BC,mBAA/B,CAAN;;AAEA,SAAKZ,WAAL,CAAiBmB,IAAjB;AACE,qCAAmB,KAAKtB,QAAL,GAAgB,GAAhB,GAAsBe,mBAAzC,EAA8D,IAA9D,EAAoES,WAApE,CADF;;AAGD;;AAED,QAAMC,YAAN,GAAqB;AACnBlB,YAAQC,GAAR,CAAY,EAAEkB,KAAK,EAAEC,YAAY,KAAKxB,WAAL,CAAiBiB,MAA/B,EAAP,EAAZ;AACA,UAAMQ,QAAQC,GAAR,CAAa,KAAK1B,WAAlB,CAAN;AACA,SAAKA,WAAL,GAAmB,EAAnB;AACD,GArD+B,C,kBAAbL,Y","file":"MasterWriter.js","sourcesContent":["// @flow\n\nimport fs from 'fs'\nimport path from 'path'\nimport { promisify } from 'util'\n\nimport ensureFileContent from './ensureFileContent'\n\n// $FlowIssue\nconst copyFileAsync = promisify( fs.copyFile )\nconst mkdirAsync = promisify( fs.mkdir )\n\nexport default class MasterWriter {\n  basePath: string\n  directories: Map<string, boolean>\n  // $FlowIssue\n  arrPromises: Array<Promise>\n\n  constructor( basePath: string ) {\n    this.basePath = basePath\n    this.directories = new Map()\n    this.arrPromises = []\n  }\n\n  async ensureRelativePathExistsHelper( filePath: string ) {\n    if ( !this.directories.has( filePath ) ) {\n      console.log({ creating: true, filePath })\n\n      try {\n        await mkdirAsync( path.resolve( this.basePath, filePath ) )\n      } catch ( err ) {\n        if ( err.code !== 'EEXIST' ) throw err\n      }\n\n      this.directories.set( filePath, true )\n    }\n  }\n\n  async ensureRelativePathExists( destinationRelative: string ) {\n    const arrPath = destinationRelative.split( '/' )\n\n    for ( let pathAccumulated = '', ix = 0; ix < arrPath.length; ix++ ) {\n      await this.ensureRelativePathExistsHelper( pathAccumulated )\n      pathAccumulated += arrPath[ix] + '/'\n    }\n  }\n\n  async copyFile( sourceAbsolute: string, destinationRelative: string ) {\n    await this.ensureRelativePathExists( destinationRelative )\n\n    this.arrPromises.push( copyFileAsync( sourceAbsolute, this.basePath + '/' + destinationRelative ) )\n  }\n\n  async writeFile( destinationRelative: string, fileContent: string ) {\n    await this.ensureRelativePathExists( destinationRelative )\n\n    this.arrPromises.push(\n      ensureFileContent( this.basePath + '/' + destinationRelative, null, fileContent ),\n    )\n  }\n\n  async executeQueue() {\n    console.log({ XXX: { countAtEnd: this.arrPromises.length } })\n    await Promise.all( this.arrPromises )\n    this.arrPromises = []\n  }\n}\n"]}