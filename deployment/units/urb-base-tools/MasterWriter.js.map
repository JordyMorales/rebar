{"version":3,"sources":["../../../units/urb-base-tools/MasterWriter.js"],"names":["copyFileAsync","fs","copyFile","mkdirAsync","mkdir","MasterWriter","constructor","basePath","logToConsole","directories","Map","arrPromises","ensureRelativePathExistsHelper","filePath","has","path","resolve","err","code","set","ensureRelativePathExists","destinationRelative","arrPath","split","pathAccumulated","ix","length","sourceAbsolute","push","writeFile","fileContent","executeQueue","Promise","all"],"mappings":";;AAEA,wB;AACA,4B;AACA;;AAEA,wD;;AAEA;AACA,MAAMA,gBAAgB,qBAAWC,aAAGC,QAAd,CAAtB;AACA,MAAMC,aAAa,qBAAWF,aAAGG,KAAd,CAAnB;;AAEe,MAAMC,YAAN,CAAmB;;;;;;;AAOhCC,cAAaC,QAAb,EAA+BC,YAA/B,EAAuD;AACrD,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,YAAL,GAAoBA,YAApB;;AAEA,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACD,GAb+B,CAIhC;;AAWA,QAAMC,8BAAN,CAAsCC,QAAtC,EAAyD;AACvD,QAAK,CAAC,KAAKJ,WAAL,CAAiBK,GAAjB,CAAsBD,QAAtB,CAAN,EAAyC;AACvC,UAAI;AACF,cAAMV,WAAYY,eAAKC,OAAL,CAAc,KAAKT,QAAnB,EAA6BM,QAA7B,CAAZ,CAAN;AACD,OAFD,CAEE,OAAQI,GAAR,EAAc;AACd,YAAKA,IAAIC,IAAJ,KAAa,QAAlB,EAA6B,MAAMD,GAAN;AAC9B;;AAED,WAAKR,WAAL,CAAiBU,GAAjB,CAAsBN,QAAtB,EAAgC,IAAhC;AACD;AACF;;AAED,QAAMO,wBAAN,CAAgCC,mBAAhC,EAA8D;AAC5D,UAAMC,UAAUD,oBAAoBE,KAApB,CAA2B,GAA3B,CAAhB;;AAEA,SAAM,IAAIC,kBAAkB,EAAtB,EAA0BC,KAAK,CAArC,EAAwCA,KAAKH,QAAQI,MAArD,EAA6DD,IAA7D,EAAoE;AAClE,YAAM,KAAKb,8BAAL,CAAqCY,eAArC,CAAN;AACAA,yBAAmBF,QAAQG,EAAR,IAAc,GAAjC;AACD;AACF;;AAED,QAAMvB,QAAN,CAAgByB,cAAhB,EAAwCN,mBAAxC,EAAsE;AACpE,UAAM,KAAKD,wBAAL,CAA+BC,mBAA/B,CAAN;;AAEA,SAAKV,WAAL,CAAiBiB,IAAjB,CAAuB5B,cAAe2B,cAAf,EAA+B,KAAKpB,QAAL,GAAgB,GAAhB,GAAsBc,mBAArD,CAAvB;AACD;;AAED,QAAMQ,SAAN,CAAiBR,mBAAjB,EAA8CS,WAA9C,EAAoE;AAClE,UAAM,KAAKV,wBAAL,CAA+BC,mBAA/B,CAAN;;AAEA,SAAKV,WAAL,CAAiBiB,IAAjB;AACE;AACE,SAAKrB,QAAL,GAAgB,GAAhB,GAAsBc,mBADxB;AAEE,QAFF;AAGES,eAHF;AAIE,SAAKtB,YAJP,CADF;;;AAQD;;AAED,QAAMuB,YAAN,GAAqB;AACnB,UAAMC,QAAQC,GAAR,CAAa,KAAKtB,WAAlB,CAAN;AACA,SAAKA,WAAL,GAAmB,EAAnB;AACD,GA1D+B,C,kBAAbN,Y","file":"MasterWriter.js","sourcesContent":["// @flow\n\nimport fs from 'fs'\nimport path from 'path'\nimport { promisify } from 'util'\n\nimport ensureFileContent from './ensureFileContent'\n\n// $FlowIssue\nconst copyFileAsync = promisify( fs.copyFile )\nconst mkdirAsync = promisify( fs.mkdir )\n\nexport default class MasterWriter {\n  basePath: string\n  logToConsole: boolean\n  directories: Map<string, boolean>\n  // $FlowIssue\n  arrPromises: Array<Promise>\n\n  constructor( basePath: string, logToConsole: boolean ) {\n    this.basePath = basePath\n    this.logToConsole = logToConsole\n\n    this.directories = new Map()\n    this.arrPromises = []\n  }\n\n  async ensureRelativePathExistsHelper( filePath: string ) {\n    if ( !this.directories.has( filePath ) ) {\n      try {\n        await mkdirAsync( path.resolve( this.basePath, filePath ) )\n      } catch ( err ) {\n        if ( err.code !== 'EEXIST' ) throw err\n      }\n\n      this.directories.set( filePath, true )\n    }\n  }\n\n  async ensureRelativePathExists( destinationRelative: string ) {\n    const arrPath = destinationRelative.split( '/' )\n\n    for ( let pathAccumulated = '', ix = 0; ix < arrPath.length; ix++ ) {\n      await this.ensureRelativePathExistsHelper( pathAccumulated )\n      pathAccumulated += arrPath[ix] + '/'\n    }\n  }\n\n  async copyFile( sourceAbsolute: string, destinationRelative: string ) {\n    await this.ensureRelativePathExists( destinationRelative )\n\n    this.arrPromises.push( copyFileAsync( sourceAbsolute, this.basePath + '/' + destinationRelative ) )\n  }\n\n  async writeFile( destinationRelative: string, fileContent: string ) {\n    await this.ensureRelativePathExists( destinationRelative )\n\n    this.arrPromises.push(\n      ensureFileContent(\n        this.basePath + '/' + destinationRelative,\n        null,\n        fileContent,\n        this.logToConsole,\n      ),\n    )\n  }\n\n  async executeQueue() {\n    await Promise.all( this.arrPromises )\n    this.arrPromises = []\n  }\n}\n"]}