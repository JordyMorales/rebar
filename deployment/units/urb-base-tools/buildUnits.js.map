{"version":3,"sources":["../../../units/urb-base-tools/buildUnits.js"],"names":["fs","fsWithCallbacks","promises","prettierESLintOptions","eslintConfig","eslintRC","prettierOptions","packageJSON","prettier","mergeScripts","scripts1","scripts2","scripts","Object","assign","scriptName","script","script2","createPackageJson","units","packageJsonFileName","path","resolve","currentPackageAsJSONString","readFile","toString","currentPackageAsObject","JSON","parse","packageAsObject","dependencies","devDependencies","engines","name","version","unitName","packageAsObjectName","packageToAddAsObject","createMutations","mutationsImports","mutationsExports","endsWith","mutationsDir","mutationFileNames","readdir","mutationFileName","mutation","substring","length","push","replace","mutations","concat","text","join","createSchemas","schemasImports","schemasDir","objectTypeFileNames","objectTypeFileName","objectType","schemas","createViewerFields","viewerFieldsImports","viewerFieldsExports","viewerFieldsFileName","viewerFieldsImportName","viewerFields","getUnits","filter","fileName","main","taskPromises","Promise","all","then","console","log"],"mappings":"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","file":"buildUnits.js","sourcesContent":["// @flow\n\nimport fsWithCallbacks from 'fs'\nimport path from 'path'\n\nimport prettierESLint from 'prettier-eslint'\nimport sortedJSONStringify from 'sorted-json-stringify'\n\n// $AssureFlow Not sure why it gives an error. The file does exist\nimport eslintRC from '../../.eslintrc.json'\nimport fsExists from '../urb-base-server/fsExists'\nimport packageJSON from '../../package.json'\nimport buildUnits from '../_configuration/urb-base-tools/buildUnits'\nimport ensureFileContent from '../urb-base-server/ensureFileContent'\n\nconst fs = fsWithCallbacks.promises\n\nconst prettierESLintOptions = { eslintConfig: eslintRC, prettierOptions: packageJSON.prettier }\n\nfunction mergeScripts( scripts1, scripts2 ) {\n  const scripts = Object.assign({}, scripts1 )\n\n  for ( let scriptName in scripts2 ) {\n    const script = scripts[scriptName]\n    const script2 = scripts2[scriptName]\n\n    if ( script && script2 ) {\n      scripts[scriptName] = script + ' && ' + script2\n    } else if ( script2 ) {\n      scripts[scriptName] = script2\n    }\n  }\n\n  return scripts\n}\n\nasync function createPackageJson( units: Array<string> ) {\n  const packageJsonFileName = path.resolve( './package.json' )\n  const currentPackageAsJSONString = ( await fs.readFile( packageJsonFileName ) ).toString()\n  const currentPackageAsObject = JSON.parse( currentPackageAsJSONString )\n  const packageAsObject = {\n    dependencies: {},\n    devDependencies: {},\n    engines: {},\n    'lint-staged': {},\n    name: null,\n    prettier: {},\n    scripts: {},\n    version: null,\n  }\n\n  // Make sure not to overwrite version information\n  packageAsObject.version = currentPackageAsObject.version\n  packageAsObject.name = currentPackageAsObject.name\n\n  // Add packages to object\n  for ( let unitName of units ) {\n    const packageAsObjectName = path.resolve( './units', unitName, 'package.part.json' )\n    if ( await fsExists( packageAsObjectName ) ) {\n      const packageToAddAsObject = JSON.parse( ( await fs.readFile( packageAsObjectName ) ).toString() )\n\n      if ( packageToAddAsObject.dependencies )\n        Object.assign( packageAsObject.dependencies, packageToAddAsObject.dependencies )\n      if ( packageToAddAsObject.devDependencies )\n        Object.assign( packageAsObject.devDependencies, packageToAddAsObject.devDependencies )\n      if ( packageToAddAsObject.engines )\n        Object.assign( packageAsObject.engines, packageToAddAsObject.engines )\n      if ( packageToAddAsObject['lint-staged'])\n        Object.assign( packageAsObject['lint-staged'], packageToAddAsObject['lint-staged'])\n      if ( packageToAddAsObject.prettier )\n        Object.assign( packageAsObject.prettier, packageToAddAsObject.prettier )\n      if ( packageToAddAsObject.scripts )\n        packageAsObject.scripts = mergeScripts(\n          packageAsObject.scripts,\n          packageToAddAsObject.scripts,\n        )\n    }\n  }\n\n  await ensureFileContent(\n    packageJsonFileName,\n    currentPackageAsJSONString,\n    sortedJSONStringify( packageAsObject, null, 2 ),\n    true,\n  )\n}\n\nasync function createMutations( units: Array<string> ) {\n  const mutationsImports = []\n  const mutationsExports = []\n\n  for ( let unitName of units )\n    if ( unitName.endsWith( '-server' ) ) {\n      const mutationsDir = path.resolve( './units', unitName, 'graphql/mutation' )\n      if ( await fsExists( mutationsDir ) ) {\n        const mutationFileNames = await fs.readdir( mutationsDir )\n\n        for ( let mutationFileName of mutationFileNames ) {\n          if ( mutationFileName.endsWith( '.js' ) ) {\n            const mutation = mutationFileName.substring( 0, mutationFileName.length - 3 )\n            mutationsImports.push(\n              'import ' +\n                mutation.replace( '.', '_' ) +\n                ' from \\'../../../' +\n                unitName +\n                '/graphql/mutation/' +\n                mutation +\n                '\\'',\n            )\n            mutationsExports.push( '  ' + mutation + ',' )\n          }\n        }\n      }\n    }\n\n  let mutations = [ '// @flow', '' ]\n  mutations = mutations.concat( mutationsImports )\n  mutations = mutations.concat([ '', 'export default {' ])\n  mutations = mutations.concat( mutationsExports )\n  mutations = mutations.concat([ '}' ])\n\n  await ensureFileContent(\n    path.resolve( './units/_configuration/urb-base-server/graphql/_mutations.js' ),\n    null,\n    prettierESLint({ text: mutations.join( '\\r\\n' ), ...prettierESLintOptions }),\n    true,\n  )\n}\n\nasync function createSchemas( units: Array<string> ) {\n  const schemasImports = []\n\n  for ( let unitName of units )\n    if ( unitName.endsWith( '-server' ) ) {\n      const schemasDir = path.resolve( './units', unitName, 'graphql/model' )\n      if ( await fsExists( schemasDir ) ) {\n        const objectTypeFileNames = await fs.readdir( schemasDir )\n\n        for ( let objectTypeFileName of objectTypeFileNames ) {\n          if ( objectTypeFileName.endsWith( '.js' ) ) {\n            const objectType = objectTypeFileName.substring( 0, objectTypeFileName.length - 3 )\n            schemasImports.push(\n              'import \\'../../../' + unitName + '/graphql/model/' + objectType + '\\'',\n            )\n          }\n        }\n      }\n    }\n\n  let schemas = [ '// @flow', '' ]\n  schemas = schemas.concat( schemasImports )\n  schemas = schemas.concat([ '', 'export default true' ])\n\n  await ensureFileContent(\n    path.resolve( './units/_configuration/urb-base-server/graphql/_schemas.js' ),\n    null,\n    prettierESLint({ text: schemas.join( '\\r\\n' ), ...prettierESLintOptions }),\n    true,\n  )\n}\n\nasync function createViewerFields( units: Array<string> ) {\n  const viewerFieldsImports = []\n  const viewerFieldsExports = []\n\n  for ( let unitName of units )\n    if ( unitName.endsWith( '-server' ) ) {\n      const viewerFieldsFileName = path.resolve(\n        './units',\n        unitName,\n        'graphql/type/_ViewerFields.js',\n      )\n      if ( await fsExists( viewerFieldsFileName ) ) {\n        const viewerFieldsImportName = unitName.replace( /-/g, '_' )\n        viewerFieldsImports.push(\n          'import ' +\n            viewerFieldsImportName +\n            ' from \\'../../../' +\n            unitName +\n            '/graphql/type/_ViewerFields\\'',\n        )\n        viewerFieldsExports.push( '  ...' + viewerFieldsImportName + ',' )\n      }\n    }\n\n  let viewerFields = [ '// @flow', '' ]\n  viewerFields = viewerFields.concat( viewerFieldsImports )\n  viewerFields = viewerFields.concat([ '', 'export default {' ])\n  viewerFields = viewerFields.concat( viewerFieldsExports )\n  viewerFields = viewerFields.concat([ '}' ])\n\n  await ensureFileContent(\n    path.resolve( './units/_configuration/urb-base-server/graphql/_ViewerFields.js' ),\n    null,\n    prettierESLint({ text: viewerFields.join( '\\r\\n' ), ...prettierESLintOptions }),\n    true,\n  )\n}\n\nasync function getUnits() {\n  const units = ( await fs.readdir( './units/' ) ).filter(\n    fileName => fileName !== '.DS_Store' && fileName !== '_configuration',\n  )\n  return units\n}\n\nasync function main() {\n  const units = await getUnits()\n\n  const taskPromises = [\n    createPackageJson( units ),\n    createViewerFields( units ),\n    createSchemas( units ),\n    createMutations( units ),\n    buildUnits( units ),\n  ]\n\n  await Promise.all( taskPromises )\n}\n\nmain().then( () => console.log( 'Fin.' ) )\n"]}