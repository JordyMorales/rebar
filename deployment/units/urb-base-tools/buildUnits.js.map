{"version":3,"sources":["../../../units/urb-base-tools/buildUnits.js"],"names":["fs","fsWithCallbacks","promises","prettierESLintOptions","eslintConfig","eslintRC","prettierOptions","packageJSON","prettier","mergeScripts","scripts1","scripts2","scripts","Object","assign","scriptName","script","script2","createPackageJson","units","packageJsonFileName","path","resolve","currentPackageAsJSONString","readFile","toString","currentPackageAsObject","JSON","parse","packageAsObject","dependencies","devDependencies","engines","husky","name","version","unitName","packageAsObjectName","packageToAddAsObject","createMutations","mutationsImports","mutationsExports","endsWith","mutationsDir","mutationFileNames","readdir","mutationFileName","mutation","substring","length","push","replace","mutations","concat","text","join","createSchemas","schemasImports","schemasDir","objectTypeFileNames","objectTypeFileName","objectType","schemas","createViewerFields","viewerFieldsImports","viewerFieldsExports","viewerFieldsFileName","viewerFieldsImportName","viewerFields","getUnits","filter","fileName","main","taskPromises","Promise","all","then","console","log"],"mappings":";;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,iG,8FALA;;AAOA,MAAMA,EAAE,GAAGC,YAAgBC,QAA3B;;AAEA,MAAMC,qBAAqB,GAAG,EAAEC,YAAY,EAAEC,iBAAhB,EAA0BC,eAAe,EAAEC,iBAAYC,QAAvD,EAA9B;;AAEA,SAASC,YAAT,CAAuBC,QAAvB,EAAiCC,QAAjC,EAA4C;AAC1C,QAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,QAAlB,CAAhB;;AAEA,OAAM,IAAIK,UAAV,IAAwBJ,QAAxB,EAAmC;AACjC,UAAMK,MAAM,GAAGJ,OAAO,CAACG,UAAD,CAAtB;AACA,UAAME,OAAO,GAAGN,QAAQ,CAACI,UAAD,CAAxB;;AAEA,QAAKC,MAAM,IAAIC,OAAf,EAAyB;AACvBL,MAAAA,OAAO,CAACG,UAAD,CAAP,GAAsBC,MAAM,GAAG,MAAT,GAAkBC,OAAxC;AACD,KAFD,MAEO,IAAKA,OAAL,EAAe;AACpBL,MAAAA,OAAO,CAACG,UAAD,CAAP,GAAsBE,OAAtB;AACD;AACF;;AAED,SAAOL,OAAP;AACD;;AAED,eAAeM,iBAAf,CAAkCC,KAAlC,EAAyD;AACvD,QAAMC,mBAAmB,GAAGC,cAAKC,OAAL,CAAc,gBAAd,CAA5B;AACA,QAAMC,0BAA0B,GAAG,CAAE,MAAMvB,EAAE,CAACwB,QAAH,CAAaJ,mBAAb,CAAR,EAA6CK,QAA7C,EAAnC;AACA,QAAMC,sBAAsB,GAAGC,IAAI,CAACC,KAAL,CAAYL,0BAAZ,CAA/B;AACA,QAAMM,eAAe,GAAG;AACtBC,IAAAA,YAAY,EAAE,EADQ;AAEtBC,IAAAA,eAAe,EAAE,EAFK;AAGtBC,IAAAA,OAAO,EAAE,EAHa;AAItBC,IAAAA,KAAK,EAAE,EAJe;AAKtB,mBAAe,EALO;AAMtBC,IAAAA,IAAI,EAAE,IANgB;AAOtB1B,IAAAA,QAAQ,EAAE,EAPY;AAQtBI,IAAAA,OAAO,EAAE,EARa;AAStBuB,IAAAA,OAAO,EAAE;;;AAGX;AAZwB,GAAxB,CAaAN,eAAe,CAACM,OAAhB,GAA0BT,sBAAsB,CAACS,OAAjD;AACAN,EAAAA,eAAe,CAACK,IAAhB,GAAuBR,sBAAsB,CAACQ,IAA9C;;AAEA;AACA,OAAM,IAAIE,QAAV,IAAsBjB,KAAtB,EAA8B;AAC5B,UAAMkB,mBAAmB,GAAGhB,cAAKC,OAAL,CAAc,SAAd,EAAyBc,QAAzB,EAAmC,mBAAnC,CAA5B;AACA,QAAK,MAAM,uBAAUC,mBAAV,CAAX,EAA6C;AAC3C,YAAMC,oBAAoB,GAAGX,IAAI,CAACC,KAAL,CAAY,CAAE,MAAM5B,EAAE,CAACwB,QAAH,CAAaa,mBAAb,CAAR,EAA6CZ,QAA7C,EAAZ,CAA7B;;AAEA,UAAKa,oBAAoB,CAACR,YAA1B;AACEjB,MAAAA,MAAM,CAACC,MAAP,CAAee,eAAe,CAACC,YAA/B,EAA6CQ,oBAAoB,CAACR,YAAlE;AACF,UAAKQ,oBAAoB,CAACP,eAA1B;AACElB,MAAAA,MAAM,CAACC,MAAP,CAAee,eAAe,CAACE,eAA/B,EAAgDO,oBAAoB,CAACP,eAArE;AACF,UAAKO,oBAAoB,CAACN,OAA1B;AACEnB,MAAAA,MAAM,CAACC,MAAP,CAAee,eAAe,CAACG,OAA/B,EAAwCM,oBAAoB,CAACN,OAA7D;AACF,UAAKM,oBAAoB,CAACL,KAA1B;AACEpB,MAAAA,MAAM,CAACC,MAAP,CAAee,eAAe,CAACI,KAA/B,EAAsCK,oBAAoB,CAACL,KAA3D;AACF,UAAKK,oBAAoB,CAAC,aAAD,CAAzB;AACEzB,MAAAA,MAAM,CAACC,MAAP,CAAee,eAAe,CAAC,aAAD,CAA9B,EAA+CS,oBAAoB,CAAC,aAAD,CAAnE;AACF,UAAKA,oBAAoB,CAAC9B,QAA1B;AACEK,MAAAA,MAAM,CAACC,MAAP,CAAee,eAAe,CAACrB,QAA/B,EAAyC8B,oBAAoB,CAAC9B,QAA9D;AACF,UAAK8B,oBAAoB,CAAC1B,OAA1B;AACEiB,MAAAA,eAAe,CAACjB,OAAhB,GAA0BH,YAAY;AACpCoB,MAAAA,eAAe,CAACjB,OADoB;AAEpC0B,MAAAA,oBAAoB,CAAC1B,OAFe,CAAtC;;AAIH;AACF;;AAED,QAAM;AACJQ,EAAAA,mBADI;AAEJG,EAAAA,0BAFI;AAGJ,oCAAqBM,eAArB,EAAsC,IAAtC,EAA4C,CAA5C,CAHI;AAIJ,MAJI,CAAN;;AAMD;;AAED,eAAeU,eAAf,CAAgCpB,KAAhC,EAAuD;AACrD,QAAMqB,gBAAgB,GAAG,EAAzB;AACA,QAAMC,gBAAgB,GAAG,EAAzB;;AAEA,OAAM,IAAIL,QAAV,IAAsBjB,KAAtB;AACE,MAAKiB,QAAQ,CAACM,QAAT,CAAmB,SAAnB,CAAL,EAAsC;AACpC,UAAMC,YAAY,GAAGtB,cAAKC,OAAL,CAAc,SAAd,EAAyBc,QAAzB,EAAmC,kBAAnC,CAArB;AACA,QAAK,MAAM,uBAAUO,YAAV,CAAX,EAAsC;AACpC,YAAMC,iBAAiB,GAAG,MAAM5C,EAAE,CAAC6C,OAAH,CAAYF,YAAZ,CAAhC;;AAEA,WAAM,IAAIG,gBAAV,IAA8BF,iBAA9B,EAAkD;AAChD,YAAKE,gBAAgB,CAACJ,QAAjB,CAA2B,KAA3B,CAAL,EAA0C;AACxC,gBAAMK,QAAQ,GAAGD,gBAAgB,CAACE,SAAjB,CAA4B,CAA5B,EAA+BF,gBAAgB,CAACG,MAAjB,GAA0B,CAAzD,CAAjB;AACAT,UAAAA,gBAAgB,CAACU,IAAjB;AACE;AACEH,UAAAA,QAAQ,CAACI,OAAT,CAAkB,GAAlB,EAAuB,GAAvB,CADF;AAEE,6BAFF;AAGEf,UAAAA,QAHF;AAIE,8BAJF;AAKEW,UAAAA,QALF;AAME,cAPJ;;AASAN,UAAAA,gBAAgB,CAACS,IAAjB,CAAuB,OAAOH,QAAP,GAAkB,GAAzC;AACD;AACF;AACF;AACF;;AAEH,MAAIK,SAAS,GAAG,CAAE,UAAF,EAAc,EAAd,CAAhB;AACAA,EAAAA,SAAS,GAAGA,SAAS,CAACC,MAAV,CAAkBb,gBAAlB,CAAZ;AACAY,EAAAA,SAAS,GAAGA,SAAS,CAACC,MAAV,CAAiB,CAAE,EAAF,EAAM,kBAAN,CAAjB,CAAZ;AACAD,EAAAA,SAAS,GAAGA,SAAS,CAACC,MAAV,CAAkBZ,gBAAlB,CAAZ;AACAW,EAAAA,SAAS,GAAGA,SAAS,CAACC,MAAV,CAAiB,CAAE,GAAF,CAAjB,CAAZ;;AAEA,QAAM;AACJhC,gBAAKC,OAAL,CAAc,8DAAd,CADI;AAEJ,MAFI;AAGJ,+BAAe,EAAEgC,IAAI,EAAEF,SAAS,CAACG,IAAV,CAAgB,MAAhB,CAAR,EAAkC,GAAGpD,qBAArC,EAAf,CAHI;AAIJ,MAJI,CAAN;;AAMD;;AAED,eAAeqD,aAAf,CAA8BrC,KAA9B,EAAqD;AACnD,QAAMsC,cAAc,GAAG,EAAvB;;AAEA,OAAM,IAAIrB,QAAV,IAAsBjB,KAAtB;AACE,MAAKiB,QAAQ,CAACM,QAAT,CAAmB,SAAnB,CAAL,EAAsC;AACpC,UAAMgB,UAAU,GAAGrC,cAAKC,OAAL,CAAc,SAAd,EAAyBc,QAAzB,EAAmC,eAAnC,CAAnB;AACA,QAAK,MAAM,uBAAUsB,UAAV,CAAX,EAAoC;AAClC,YAAMC,mBAAmB,GAAG,MAAM3D,EAAE,CAAC6C,OAAH,CAAYa,UAAZ,CAAlC;;AAEA,WAAM,IAAIE,kBAAV,IAAgCD,mBAAhC,EAAsD;AACpD,YAAKC,kBAAkB,CAAClB,QAAnB,CAA6B,KAA7B,CAAL,EAA4C;AAC1C,gBAAMmB,UAAU,GAAGD,kBAAkB,CAACZ,SAAnB,CAA8B,CAA9B,EAAiCY,kBAAkB,CAACX,MAAnB,GAA4B,CAA7D,CAAnB;AACAQ,UAAAA,cAAc,CAACP,IAAf;AACE,iCAAuBd,QAAvB,GAAkC,iBAAlC,GAAsDyB,UAAtD,GAAmE,IADrE;;AAGD;AACF;AACF;AACF;;AAEH,MAAIC,OAAO,GAAG,CAAE,UAAF,EAAc,EAAd,CAAd;AACAA,EAAAA,OAAO,GAAGA,OAAO,CAACT,MAAR,CAAgBI,cAAhB,CAAV;AACAK,EAAAA,OAAO,GAAGA,OAAO,CAACT,MAAR,CAAe,CAAE,EAAF,EAAM,qBAAN,CAAf,CAAV;;AAEA,QAAM;AACJhC,gBAAKC,OAAL,CAAc,4DAAd,CADI;AAEJ,MAFI;AAGJ,+BAAe,EAAEgC,IAAI,EAAEQ,OAAO,CAACP,IAAR,CAAc,MAAd,CAAR,EAAgC,GAAGpD,qBAAnC,EAAf,CAHI;AAIJ,MAJI,CAAN;;AAMD;;AAED,eAAe4D,kBAAf,CAAmC5C,KAAnC,EAA0D;AACxD,QAAM6C,mBAAmB,GAAG,EAA5B;AACA,QAAMC,mBAAmB,GAAG,EAA5B;;AAEA,OAAM,IAAI7B,QAAV,IAAsBjB,KAAtB;AACE,MAAKiB,QAAQ,CAACM,QAAT,CAAmB,SAAnB,CAAL,EAAsC;AACpC,UAAMwB,oBAAoB,GAAG7C,cAAKC,OAAL;AAC3B,aAD2B;AAE3Bc,IAAAA,QAF2B;AAG3B,mCAH2B,CAA7B;;AAKA,QAAK,MAAM,uBAAU8B,oBAAV,CAAX,EAA8C;AAC5C,YAAMC,sBAAsB,GAAG/B,QAAQ,CAACe,OAAT,CAAkB,IAAlB,EAAwB,GAAxB,CAA/B;AACAa,MAAAA,mBAAmB,CAACd,IAApB;AACE;AACEiB,MAAAA,sBADF;AAEE,yBAFF;AAGE/B,MAAAA,QAHF;AAIE,qCALJ;;AAOA6B,MAAAA,mBAAmB,CAACf,IAApB,CAA0B,UAAUiB,sBAAV,GAAmC,GAA7D;AACD;AACF;;AAEH,MAAIC,YAAY,GAAG,CAAE,UAAF,EAAc,EAAd,CAAnB;AACAA,EAAAA,YAAY,GAAGA,YAAY,CAACf,MAAb,CAAqBW,mBAArB,CAAf;AACAI,EAAAA,YAAY,GAAGA,YAAY,CAACf,MAAb,CAAoB,CAAE,EAAF,EAAM,kBAAN,CAApB,CAAf;AACAe,EAAAA,YAAY,GAAGA,YAAY,CAACf,MAAb,CAAqBY,mBAArB,CAAf;AACAG,EAAAA,YAAY,GAAGA,YAAY,CAACf,MAAb,CAAoB,CAAE,GAAF,CAApB,CAAf;;AAEA,QAAM;AACJhC,gBAAKC,OAAL,CAAc,iEAAd,CADI;AAEJ,MAFI;AAGJ,+BAAe,EAAEgC,IAAI,EAAEc,YAAY,CAACb,IAAb,CAAmB,MAAnB,CAAR,EAAqC,GAAGpD,qBAAxC,EAAf,CAHI;AAIJ,MAJI,CAAN;;AAMD;;AAED,eAAekE,QAAf,GAA0B;AACxB,QAAMlD,KAAK,GAAG,CAAE,MAAMnB,EAAE,CAAC6C,OAAH,CAAY,UAAZ,CAAR,EAAmCyB,MAAnC;AACZC,EAAAA,QAAQ,IAAIA,QAAQ,KAAK,WAAb,IAA4BA,QAAQ,KAAK,gBADzC,CAAd;;AAGA,SAAOpD,KAAP;AACD;;AAED,eAAeqD,IAAf,GAAsB;AACpB,QAAMrD,KAAK,GAAG,MAAMkD,QAAQ,EAA5B;;AAEA,QAAMI,YAAY,GAAG;AACnBvD,EAAAA,iBAAiB,CAAEC,KAAF,CADE;AAEnB4C,EAAAA,kBAAkB,CAAE5C,KAAF,CAFC;AAGnBqC,EAAAA,aAAa,CAAErC,KAAF,CAHM;AAInBoB,EAAAA,eAAe,CAAEpB,KAAF,CAJI;AAKnB,2BAAYA,KAAZ,CALmB,CAArB;;;AAQA,QAAMuD,OAAO,CAACC,GAAR,CAAaF,YAAb,CAAN;AACD;;AAEDD,IAAI,GAAGI,IAAP,CAAa,MAAMC,OAAO,CAACC,GAAR,CAAa,MAAb,CAAnB","sourcesContent":["// @flow\n\nimport fsWithCallbacks from 'fs'\nimport path from 'path'\n\nimport prettierESLint from 'prettier-eslint'\nimport sortedJSONStringify from 'sorted-json-stringify'\n\n// $AssureFlow Not sure why it gives an error. The file does exist\nimport eslintRC from '../../.eslintrc.json'\nimport fsExists from '../urb-base-server/fsExists'\nimport packageJSON from '../../package.json'\nimport buildUnits from '../_configuration/urb-base-tools/buildUnits'\nimport ensureFileContent from '../urb-base-server/ensureFileContent'\n\nconst fs = fsWithCallbacks.promises\n\nconst prettierESLintOptions = { eslintConfig: eslintRC, prettierOptions: packageJSON.prettier }\n\nfunction mergeScripts( scripts1, scripts2 ) {\n  const scripts = Object.assign({}, scripts1 )\n\n  for ( let scriptName in scripts2 ) {\n    const script = scripts[scriptName]\n    const script2 = scripts2[scriptName]\n\n    if ( script && script2 ) {\n      scripts[scriptName] = script + ' && ' + script2\n    } else if ( script2 ) {\n      scripts[scriptName] = script2\n    }\n  }\n\n  return scripts\n}\n\nasync function createPackageJson( units: Array<string> ) {\n  const packageJsonFileName = path.resolve( './package.json' )\n  const currentPackageAsJSONString = ( await fs.readFile( packageJsonFileName ) ).toString()\n  const currentPackageAsObject = JSON.parse( currentPackageAsJSONString )\n  const packageAsObject = {\n    dependencies: {},\n    devDependencies: {},\n    engines: {},\n    husky: {},\n    'lint-staged': {},\n    name: null,\n    prettier: {},\n    scripts: {},\n    version: null,\n  }\n\n  // Make sure not to overwrite version information\n  packageAsObject.version = currentPackageAsObject.version\n  packageAsObject.name = currentPackageAsObject.name\n\n  // Add packages to object\n  for ( let unitName of units ) {\n    const packageAsObjectName = path.resolve( './units', unitName, 'package.part.json' )\n    if ( await fsExists( packageAsObjectName ) ) {\n      const packageToAddAsObject = JSON.parse( ( await fs.readFile( packageAsObjectName ) ).toString() )\n\n      if ( packageToAddAsObject.dependencies )\n        Object.assign( packageAsObject.dependencies, packageToAddAsObject.dependencies )\n      if ( packageToAddAsObject.devDependencies )\n        Object.assign( packageAsObject.devDependencies, packageToAddAsObject.devDependencies )\n      if ( packageToAddAsObject.engines )\n        Object.assign( packageAsObject.engines, packageToAddAsObject.engines )\n      if ( packageToAddAsObject.husky )\n        Object.assign( packageAsObject.husky, packageToAddAsObject.husky )\n      if ( packageToAddAsObject['lint-staged'])\n        Object.assign( packageAsObject['lint-staged'], packageToAddAsObject['lint-staged'])\n      if ( packageToAddAsObject.prettier )\n        Object.assign( packageAsObject.prettier, packageToAddAsObject.prettier )\n      if ( packageToAddAsObject.scripts )\n        packageAsObject.scripts = mergeScripts(\n          packageAsObject.scripts,\n          packageToAddAsObject.scripts,\n        )\n    }\n  }\n\n  await ensureFileContent(\n    packageJsonFileName,\n    currentPackageAsJSONString,\n    sortedJSONStringify( packageAsObject, null, 2 ),\n    true,\n  )\n}\n\nasync function createMutations( units: Array<string> ) {\n  const mutationsImports = []\n  const mutationsExports = []\n\n  for ( let unitName of units )\n    if ( unitName.endsWith( '-server' ) ) {\n      const mutationsDir = path.resolve( './units', unitName, 'graphql/mutation' )\n      if ( await fsExists( mutationsDir ) ) {\n        const mutationFileNames = await fs.readdir( mutationsDir )\n\n        for ( let mutationFileName of mutationFileNames ) {\n          if ( mutationFileName.endsWith( '.js' ) ) {\n            const mutation = mutationFileName.substring( 0, mutationFileName.length - 3 )\n            mutationsImports.push(\n              'import ' +\n                mutation.replace( '.', '_' ) +\n                ' from \\'../../../' +\n                unitName +\n                '/graphql/mutation/' +\n                mutation +\n                '\\'',\n            )\n            mutationsExports.push( '  ' + mutation + ',' )\n          }\n        }\n      }\n    }\n\n  let mutations = [ '// @flow', '' ]\n  mutations = mutations.concat( mutationsImports )\n  mutations = mutations.concat([ '', 'export default {' ])\n  mutations = mutations.concat( mutationsExports )\n  mutations = mutations.concat([ '}' ])\n\n  await ensureFileContent(\n    path.resolve( './units/_configuration/urb-base-server/graphql/_mutations.js' ),\n    null,\n    prettierESLint({ text: mutations.join( '\\r\\n' ), ...prettierESLintOptions }),\n    true,\n  )\n}\n\nasync function createSchemas( units: Array<string> ) {\n  const schemasImports = []\n\n  for ( let unitName of units )\n    if ( unitName.endsWith( '-server' ) ) {\n      const schemasDir = path.resolve( './units', unitName, 'graphql/model' )\n      if ( await fsExists( schemasDir ) ) {\n        const objectTypeFileNames = await fs.readdir( schemasDir )\n\n        for ( let objectTypeFileName of objectTypeFileNames ) {\n          if ( objectTypeFileName.endsWith( '.js' ) ) {\n            const objectType = objectTypeFileName.substring( 0, objectTypeFileName.length - 3 )\n            schemasImports.push(\n              'import \\'../../../' + unitName + '/graphql/model/' + objectType + '\\'',\n            )\n          }\n        }\n      }\n    }\n\n  let schemas = [ '// @flow', '' ]\n  schemas = schemas.concat( schemasImports )\n  schemas = schemas.concat([ '', 'export default true' ])\n\n  await ensureFileContent(\n    path.resolve( './units/_configuration/urb-base-server/graphql/_schemas.js' ),\n    null,\n    prettierESLint({ text: schemas.join( '\\r\\n' ), ...prettierESLintOptions }),\n    true,\n  )\n}\n\nasync function createViewerFields( units: Array<string> ) {\n  const viewerFieldsImports = []\n  const viewerFieldsExports = []\n\n  for ( let unitName of units )\n    if ( unitName.endsWith( '-server' ) ) {\n      const viewerFieldsFileName = path.resolve(\n        './units',\n        unitName,\n        'graphql/type/_ViewerFields.js',\n      )\n      if ( await fsExists( viewerFieldsFileName ) ) {\n        const viewerFieldsImportName = unitName.replace( /-/g, '_' )\n        viewerFieldsImports.push(\n          'import ' +\n            viewerFieldsImportName +\n            ' from \\'../../../' +\n            unitName +\n            '/graphql/type/_ViewerFields\\'',\n        )\n        viewerFieldsExports.push( '  ...' + viewerFieldsImportName + ',' )\n      }\n    }\n\n  let viewerFields = [ '// @flow', '' ]\n  viewerFields = viewerFields.concat( viewerFieldsImports )\n  viewerFields = viewerFields.concat([ '', 'export default {' ])\n  viewerFields = viewerFields.concat( viewerFieldsExports )\n  viewerFields = viewerFields.concat([ '}' ])\n\n  await ensureFileContent(\n    path.resolve( './units/_configuration/urb-base-server/graphql/_ViewerFields.js' ),\n    null,\n    prettierESLint({ text: viewerFields.join( '\\r\\n' ), ...prettierESLintOptions }),\n    true,\n  )\n}\n\nasync function getUnits() {\n  const units = ( await fs.readdir( './units/' ) ).filter(\n    fileName => fileName !== '.DS_Store' && fileName !== '_configuration',\n  )\n  return units\n}\n\nasync function main() {\n  const units = await getUnits()\n\n  const taskPromises = [\n    createPackageJson( units ),\n    createViewerFields( units ),\n    createSchemas( units ),\n    createMutations( units ),\n    buildUnits( units ),\n  ]\n\n  await Promise.all( taskPromises )\n}\n\nmain().then( () => console.log( 'Fin.' ) )\n"],"file":"buildUnits.js"}