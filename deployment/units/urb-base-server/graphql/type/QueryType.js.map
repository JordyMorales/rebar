{"version":3,"sources":["../../../../../units/urb-base-server/graphql/type/QueryType.js"],"names":["resolveNodeField","source","args","context","rootValue","objectManager","id","type","getOneObject","GraphQLObjectType","name","fields","node","NodeInterface","GraphQLNonNull","GraphQLID","resolve","Viewer","ViewerType","parent","getViewerUserId"],"mappings":";;AAEA;AACA;;AAEA,iD;;AAEA,0C,qJAPA;;AASA,SAASA,gBAAT,CAA2BC,MAA3B,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkD,EAAEC,WAAWC,aAAb,EAAlD,EAAgF;AAC9E;AACA;AACA;AACA,QAAM,EAAEC,EAAF,EAAMC,IAAN,KAAe,gCAAcL,KAAKI,EAAnB,CAArB;;AAEA;AACA;AACA,MAAKC,SAAS,QAAd,EAAyB,OAAOF,cAAcG,YAAd,CAA4B,MAA5B,EAAoC,EAAEF,IAAIA,EAAN,EAApC,CAAP,CAAzB;AACK,SAAOD,cAAcG,YAAd,CAA4BD,IAA5B,EAAkC,EAAED,IAAIA,EAAN,EAAlC,CAAP;AACN,C;;AAEc,IAAIG,0BAAJ,CAAsB;AACnCC,QAAM,OAD6B;AAEnCC,UAAQ,OAAO;AACbC,UAAM;AACJL,YAAMM,uBADF;AAEJX,YAAM;AACJI,YAAI,EAAEC,MAAM,IAAIO,uBAAJ,CAAoBC,kBAApB,CAAR,EADA,EAFF;;AAKJC,eAAShB,gBALL,EADO;;AAQbiB,YAAQ;AACNV,YAAMW,oBADA;AAENF,eAAS,CAAEG,MAAF,EAAUjB,IAAV,EAAgBC,OAAhB,EAAyB,EAAEC,WAAWC,aAAb,EAAzB;AACPA,oBAAcG,YAAd,CAA4B,MAA5B,EAAoC,EAAEF,IAAID,cAAce,eAAd,EAAN,EAApC,CAHI,EARK,EAAP,CAF2B,EAAtB,C","file":"QueryType.js","sourcesContent":["// @flow weak\n\nimport { fromGlobalId } from 'graphql-relay'\nimport { GraphQLID, GraphQLNonNull, GraphQLObjectType } from 'graphql'\n\nimport NodeInterface from '../NodeInterface'\n\nimport ViewerType from './ViewerType'\n\nfunction resolveNodeField( source, args, context, { rootValue: objectManager }) {\n  // the node field will receive a globally\n  // unique id, and here we convert that back\n  // to the local type and id\n  const { id, type } = fromGlobalId( args.id )\n\n  // map the local type and id into the\n  // actual data for the record\n  if ( type === 'Viewer' ) return objectManager.getOneObject( 'User', { id: id })\n  else return objectManager.getOneObject( type, { id: id })\n}\n\nexport default new GraphQLObjectType({\n  name: 'Query',\n  fields: () => ({\n    node: {\n      type: NodeInterface,\n      args: {\n        id: { type: new GraphQLNonNull( GraphQLID ) },\n      },\n      resolve: resolveNodeField,\n    },\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject( 'User', { id: objectManager.getViewerUserId() }),\n    },\n  }),\n})\n"]}