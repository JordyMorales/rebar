{"version":3,"sources":["../../../../units/urb-base-server/graphql/ObjectManager.js"],"names":["getObjectManager","User_0","Object","assign","uuidNull","id","UserToken2","User_DisplayName","entityDefinitions","setPersisters","Set","deletedRecord","deleted","re_artifact_id_Present","re_user_id_Present","ObjectManager","constructor","loadersSingle","loadersMultiple","changes","Viewer_User_id","request","response","siteInformation","artifact_id","registerEntity","entityName","EntityType","persister","Error","add","entityTypeSource","toString","match_artifact_id","match","match_user_id","isNotUserTable","EntityName","fieldName_artifact_id","fieldName_user_id","Persister","TriggersForAdd","TriggersForUpdate","TriggersForRemove","TriggersForUpdateShouldRetrieveCurrentRecord","RegisterTriggerForAdd","handler","push","RegisterTriggerForUpdate","shouldRetrieveCurrentRecord","RegisterTriggerForAddAndUpdate","RegisterTriggerForRemove","addUserIdAndOrSiteIdToFilterOrFields","entityDefinition","filterOrFields","hasOwnProperty","setViewerUserId","setRequest","req","res","setSiteInformation","getLoadersSingle","foundLoaders","getLoadersMultiple","clearLoadersMultiple","recordChange","fields","isDeletion","records","getViewerUserId","getRequest","getLoader","fieldName","multipleResults","entityType","loadersList","loader","filter","getObjectList","getOneObject","query","uuidEquals","Promise","resolve","loaderIdentifier","keys","sort","join","load","then","result","change","arrResults","ix","length","splice","invalidateLoaderCache","loaderFieldName","clear","executeTriggers","arrTriggers","oldFields","arrPromises","trigger","all","assignPrimaryKey","uuidRandom","ensure","keyFields","ensureFields","entity","ensuredFieldName","isMatchingValue","endsWith","ensureValue","uuidFromString","update","fieldsEnsured","remove","cursorForObjectInConnection","arr","obj","obj_id","uuidToString","arr_element_id","cursor","log","initializePersisters","runAsPartOfSetupDatabase","cb","initialize","objectManager"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAydsBA,gB,GAAAA,gB,CAvdtB,wC,uDACA,6CAEA,+F,yEACA,iG,mEACA,2F,uDACA,iFACA,6B,yCACA,+E,yIAEA;AACA,MAAMC,SAAS,mBACbC,OAAOC,MAAP,CAAe,0BAAY,2BAAiBC,QAAjB,EAAZ,CAAf,EAA0D,EACxDC,IAAI,2BAAiBD,QAAjB,EADoD,EAExDE,yCAFwD,EAGxDC,kBAAkB,WAHsC,EAA1D,CADa,CAAf,C,QAQSN,M,GAAAA,M,EAET;AAaA;AACA,MAAMO,oBAEF,EAFJ,C,CAIA;AACA,MAAMC,gBAAgB,IAAIC,GAAJ,EAAtB,C,CAEA;AACA,MAAMC,gBAAgB,EACpBC,SAAS,IADW,CAItB;AAJsB,CAAtB,CAKA,MAAMC,yBAAyB,6BAA/B,C,CAA6D;AAC7D,MAAMC,qBAAqB,0BAA3B,C,CAAsD;AAEvC,MAAMC,aAAN,CAAoB,CASjCC,cAAc,CACZ;AACA,SAAKC,aAAL,GAAqB,EAArB,CAFY,CAIZ;AACA,SAAKC,eAAL,GAAuB,EAAvB,CALY,CAOZ;AACA,SAAKC,OAAL,GAAe,EAAf,CARY,CAUZ;AACA,SAAKC,cAAL,GAAsB,iDAAtB,CAXY,CAaZ;AACA,SAAKC,OAAL,GAAe,IAAf,CACA,KAAKC,QAAL,GAAgB,IAAhB,CAfY,CAiBZ;AACA;AACA,SAAKC,eAAL,GAAuB,EACrBC,aAAa,8CADQ,EAAvB,CAGD,CAED,OAAOC,cAAP,CAAuBC,UAAvB,EAA2CC,UAA3C,EAA+DC,SAA/D,EAAsF,CACpF,IAAKF,cAAclB,iBAAnB,EAAuC,MAAM,IAAIqB,KAAJ,CAAW,gCAAgCH,UAA3C,CAAN,CAD6C,CAGpF;AACAC,eAAWD,UAAX,GAAwBA,UAAxB,CAJoF,CAMpF;AACA,QAAKE,aAAa,IAAlB,EAAyBA,uCAP2D,CASpF;AACAnB,kBAAcqB,GAAd,CAAmBF,SAAnB,EAEA,MAAMG,mBAAmBJ,WAAWK,QAAX,EAAzB,CACA,MAAMC,oBAAoBF,iBAAiBG,KAAjB,CAAwBrB,sBAAxB,CAA1B,CACA,MAAMsB,gBAAgBJ,iBAAiBG,KAAjB,CAAwBpB,kBAAxB,CAAtB,CAdoF,CAgBpF;AACA;AACA,UAAMsB,iBACJV,eAAe,MAAf,IAAyBA,eAAe,aAAxC,IAAyDA,eAAe,aAD1E,CAGAlB,kBAAkBkB,UAAlB,IAAgC,EAC9BW,YAAYX,UADkB,EAE9BC,YAAYA,UAFkB,EAG9BW,uBAAuBF,kBAAkBH,iBAAlB,GAAsCA,kBAAkB,CAAlB,CAAtC,GAA6D,IAHtD,EAI9BM,mBAAmBH,kBAAkBD,aAAlB,GAAkCA,cAAc,CAAd,CAAlC,GAAqD,IAJ1C,EAK9BK,WAAWZ,SALmB,EAM9Ba,gBAAgB,EANc,EAO9BC,mBAAmB,EAPW,EAQ9BC,mBAAmB,EARW,EAS9BC,8CAA8C,KAThB,EAAhC,CAWD,CAED,OAAOC,qBAAP,CAA8BnB,UAA9B,EAAkDoB,OAAlD,EAA4E,CAC1EtC,kBAAkBkB,UAAlB,EAA8Be,cAA9B,CAA6CM,IAA7C,CAAmDD,OAAnD,EACD,CAED,OAAOE,wBAAP,CACEtB,UADF,EAEEoB,OAFF,EAGEG,2BAHF,EAIQ,CACNzC,kBAAkBkB,UAAlB,EAA8BgB,iBAA9B,CAAgDK,IAAhD,CAAsDD,OAAtD,EAEA,IAAKG,2BAAL,EACEzC,kBAAkBkB,UAAlB,EAA8BkB,4CAA9B,GAA6E,IAA7E,CACH,CAED,OAAOM,8BAAP,CAAuCxB,UAAvC,EAA2DoB,OAA3D,EAAqF,CACnF/B,cAAc8B,qBAAd,CAAqCnB,UAArC,EAAiDoB,OAAjD,EACA/B,cAAciC,wBAAd,CAAwCtB,UAAxC,EAAoDoB,OAApD,EAA6D,KAA7D,EACD,CAED,OAAOK,wBAAP,CAAiCzB,UAAjC,EAAqDoB,OAArD,EAAoE,CAClEtC,kBAAkBkB,UAAlB,EAA8BiB,iBAA9B,CAAgDI,IAAhD,CAAsDD,OAAtD,EACD,CAEDM,qCAAsCC,gBAAtC,EAA0EC,cAA1E,EAAmG,CACjG,IAAKD,iBAAiBf,qBAAtB,EAA8C,CAC5C,IAAK,CAACgB,eAAeC,cAAf,CAA+BF,iBAAiBf,qBAAhD,CAAN,EACEgB,eAAeD,iBAAiBf,qBAAhC,IAAyD,KAAKf,eAAL,CAAqBC,WAA9E,CACH,CAED,IAAK6B,iBAAiBd,iBAAtB,EAA0C,CACxC,IAAK,CAACe,eAAeC,cAAf,CAA+BF,iBAAiBd,iBAAhD,CAAN,EACEe,eAAeD,iBAAiBd,iBAAhC,IAAqD,KAAKnB,cAA1D,CACH,CACF,CAEDoC,gBAAiBpC,cAAjB,EAAgD,CAC9C,KAAKA,cAAL,GAAsBA,cAAtB,CACD,CAEDqC,WAAYC,GAAZ,EAAsBC,GAAtB,EAAuC,CACrC,KAAKtC,OAAL,GAAeqC,GAAf,CACA,KAAKpC,QAAL,GAAgBqC,GAAhB,CACD,CAEDC,mBAAoBrC,eAApB,EAAoD,CAClD,KAAKA,eAAL,GAAuBA,eAAvB,CACD,CAEDsC,iBAAkBnC,UAAlB,EAAuC,CACrC,MAAMoC,eAAe,KAAK7C,aAAL,CAAmBS,UAAnB,CAArB,CAEA,IAAKoC,gBAAgB,IAArB,EAA4B,CAC1B,OAAOA,YAAP,CACD,CAFD,MAEO,CACL,KAAK7C,aAAL,CAAmBS,UAAnB,IAAiC,EAAjC,CACA,OAAO,KAAKT,aAAL,CAAmBS,UAAnB,CAAP,CACD,CACF,CAEDqC,mBAAoBrC,UAApB,EAAyC,CACvC,MAAMoC,eAAe,KAAK5C,eAAL,CAAqBQ,UAArB,CAArB,CAEA,IAAKoC,gBAAgB,IAArB,EAA4B,CAC1B,OAAOA,YAAP,CACD,CAFD,MAEO,CACL,KAAK5C,eAAL,CAAqBQ,UAArB,IAAmC,EAAnC,CACA,OAAO,KAAKR,eAAL,CAAqBQ,UAArB,CAAP,CACD,CACF,CAEDsC,qBAAsBtC,UAAtB,EAA2C,CACzC,KAAKR,eAAL,CAAqBQ,UAArB,IAAmC,EAAnC,CACD,CAEDuC,aAAcvC,UAAd,EAAkCwC,MAAlC,EAAkDC,UAAlD,EAAwE,CACtE,IAAIC,UAAU,KAAKjD,OAAL,CAAaO,UAAb,CAAd,CACA,IAAK0C,WAAW,IAAhB,EAAuBA,UAAU,KAAKjD,OAAL,CAAaO,UAAb,IAA2B,EAArC,CAEvB,MAAMrB,KAAK6D,OAAO7D,EAAlB,CAEA+D,QAAQ/D,EAAR,IAAc8D,aAAaxD,aAAb,GAA6BuD,MAA3C,CACD,CAEDG,kBAA0B,CACxB,IAAK,KAAKjD,cAAL,IAAuB,iDAA5B,EACE,MAAM,IAAIS,KAAJ,CAAW,iDAAX,CAAN,CAEF,OAAO,KAAKT,cAAZ,CACD,CAEDkD,aAAkB,CAChB,IAAK,KAAKjD,OAAL,IAAgB,IAArB,EAA4B,MAAM,IAAIQ,KAAJ,CAAW,0CAAX,CAAN,CAE5B,OAAO,KAAKR,OAAZ,CACD,CAEDkD,UAAW7C,UAAX,EAA+B8C,SAA/B,EAAkDC,eAAlD,EAA6E,CAC3E,IAAK,EAAG/C,cAAclB,iBAAjB,CAAL,EACE,MAAM,IAAIqB,KAAJ,CAAW,oCAAoCH,UAA/C,CAAN,CAEF,MAAM2B,mBAAmB7C,kBAAkBkB,UAAlB,CAAzB,CACA,MAAMgD,aAAarB,iBAAiB1B,UAApC,CAEA,IAAIgD,cAAcF,kBACd,KAAKV,kBAAL,CAAyBrC,UAAzB,CADc,GAEd,KAAKmC,gBAAL,CAAuBnC,UAAvB,CAFJ,CAGA,IAAIkD,SAASD,YAAYH,SAAZ,CAAb,CACA,IAAKI,UAAU,IAAf,EAAsB,CACpB,IAAKH,eAAL,EACEG,SAAS,yBAAgBC,UACvBxB,iBAAiBb,SAAjB,CAA2BsC,aAA3B,CAA0CpD,UAA1C,EAAsDgD,UAAtD,EAAkEG,MAAlE,CADO,CAAT,CADF,KAKED,SAAS,yBAAgBC,UACvBxB,iBAAiBb,SAAjB,CAA2BuC,YAA3B,CAAyCrD,UAAzC,EAAqDgD,UAArD,EAAiEG,MAAjE,CADO,CAAT,CAIFF,YAAYH,SAAZ,IAAyBI,MAAzB,CACD,CAED,OAAOA,MAAP,CACD,CAEDG,aAAcrD,UAAd,EAAkCsD,KAAlC,EAAiE,CAC/D;AACA,QAAKtD,eAAe,MAApB,EACE,IAAK,2BAAiBuD,UAAjB,CAA6B,2BAAiB7E,QAAjB,EAA7B,EAA0D4E,MAAM3E,EAAhE,CAAL,EACE,OAAO6E,QAAQC,OAAR,CAAiBlF,MAAjB,CAAP,CAJ2D,CAM/D;AACA,SAAKmD,oCAAL,CAA2C5C,kBAAkBkB,UAAlB,CAA3C,EAA0EsD,KAA1E,EAP+D,CAS/D;AACA,UAAMI,mBAAmBlF,OAAOmF,IAAP,CAAaL,KAAb,EACtBM,IADsB,GAEtBC,IAFsB,CAEhB,GAFgB,CAAzB,CAGA,MAAMX,SAAS,KAAKL,SAAL,CAAgB7C,UAAhB,EAA4B0D,gBAA5B,EAA8C,KAA9C,CAAf,CAEA,OAAOR,OAAOY,IAAP,CAAaR,KAAb,EAAqBS,IAArB,CAA2BC,UAAU,CAC1C,MAAMvE,UAAU,KAAKA,OAAL,CAAaO,UAAb,CAAhB,CACA,IAAKP,OAAL,EAAe,CACb;AACA,cAAMwE,SAASxE,QAAQuE,OAAOrF,EAAf,CAAf,CACA,IAAKsF,UAAU,IAAf,EAAsB,CACpB,IAAKA,WAAWhF,aAAhB,EAAgC+E,SAAS,IAAT,CAAhC,CACA;AADA,eAEKxF,OAAOC,MAAP,CAAeuF,MAAf,EAAuBC,MAAvB,EACN,CACF,CACD,OAAOD,MAAP,CACD,CAZM,CAAP,CAaD,CAEDZ,cAAepD,UAAf,EAAmCsD,KAAnC,EAAmD,CACjD;AACA,SAAK5B,oCAAL,CAA2C5C,kBAAkBkB,UAAlB,CAA3C,EAA0EsD,KAA1E,EAEA,MAAMI,mBAAmBlF,OAAOmF,IAAP,CAAaL,KAAb,EACtBM,IADsB,GAEtBC,IAFsB,CAEhB,GAFgB,CAAzB,CAGA,MAAMX,SAAS,KAAKL,SAAL,CAAgB7C,UAAhB,EAA4B0D,gBAA5B,EAA8C,IAA9C,CAAf,CAEA,OAAOR,OAAOY,IAAP,CAAaR,KAAb,EAAqBS,IAArB,CAA2BG,cAAc,CAC9C,MAAMzE,UAAU,KAAKA,OAAL,CAAaO,UAAb,CAAhB,CACA,IAAKP,OAAL,EAAe,CACb,KAAM,IAAI0E,KAAK,CAAf,EAAkBA,KAAKD,WAAWE,MAAlC,EAA0CD,IAA1C,EAAiD,CAC/C,MAAMF,SAASxE,QAAQyE,WAAWC,EAAX,EAAexF,EAAvB,CAAf,CACA,IAAKsF,UAAU,IAAf,EAAsB,CACpB,IAAKA,WAAWhF,aAAhB,EACE;AACAiF,yBAAWG,MAAX,CAAmBF,IAAnB,EAAyB,CAAzB,EAFF,CAGA;AAHA,iBAIK3F,OAAOC,MAAP,CAAeyF,WAAWC,EAAX,CAAf,EAA+BF,MAA/B,EACN,CACF,CACF,CACD,OAAOC,UAAP,CACD,CAfM,CAAP,CAgBD,CAEDI,sBAAuBtE,UAAvB,EAA2CwC,MAA3C,EAAyD,CACvD;AACA,SAAKF,oBAAL,CAA2BtC,UAA3B,EAEA,MAAMT,gBAAgB,KAAK4C,gBAAL,CAAuBnC,UAAvB,CAAtB,CACA,KAAM,IAAIuE,eAAV,IAA6BhF,aAA7B,EAA6C,CAC3C,IAAKgF,oBAAoB,IAAzB,EAAgChF,cAAcgF,eAAd,EAA+BC,KAA/B,CAAsChC,OAAO7D,EAA7C,EAAhC,KACK,OAAOY,cAAcgF,eAAd,CAAP,CACN,CACF,CAEDE,gBAAiBC,WAAjB,EAA+ClC,MAA/C,EAA+DmC,SAA/D,EAAoF,CAClF,MAAMC,cAAc,EAApB,CACA,KAAM,IAAIC,OAAV,IAAqBH,WAArB,EAAmC,CACjCE,YAAYvD,IAAZ,CAAkBwD,QAAS,IAAT,EAAerC,MAAf,EAAuBmC,SAAvB,CAAlB,EACD,CAED,OAAOnB,QAAQsB,GAAR,CAAaF,WAAb,CAAP,CACD,CAEDG,iBAAkB/E,UAAlB,EAAsCwC,MAAtC,EAAoD,CAClD,MAAMb,mBAAmB7C,kBAAkBkB,UAAlB,CAAzB,CAEA,IAAK2B,oBAAoB,IAAzB,EACE,MAAM,IAAIxB,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN,CAJgD,CAMlD;AACAwC,WAAO7D,EAAP,GAAYgD,iBAAiBb,SAAjB,CAA2BkE,UAA3B,EAAZ,CACD,CAED,MAAM5E,GAAN,CAAWJ,UAAX,EAA+BwC,MAA/B,EAAqD,CACnD,MAAMb,mBAAmB7C,kBAAkBkB,UAAlB,CAAzB,CACA,IAAK2B,oBAAoB,IAAzB,EACE,MAAM,IAAIxB,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN,CAHiD,CAKnD;AACA,SAAK0B,oCAAL,CAA2CC,gBAA3C,EAA6Da,MAA7D,EANmD,CAQnD;AACA,QAAK,CAACA,OAAO7D,EAAb,EAAkB6D,OAAO7D,EAAP,GAAYgD,iBAAiBb,SAAjB,CAA2BkE,UAA3B,EAAZ,CATiC,CAWnD;AACA,QAAKhF,eAAe,MAApB,EAA6B,KAAK8B,eAAL,CAAsBU,OAAO7D,EAAP,CAAU2B,QAAV,EAAtB,EAE7B,KAAKiC,YAAL,CAAmBvC,UAAnB,EAA+BwC,MAA/B,EAAuC,KAAvC,EACA,MAAM,KAAKiC,eAAL,CAAsB9C,iBAAiBZ,cAAvC,EAAuDyB,MAAvD,CAAN,CAEA,MAAMb,iBAAiBb,SAAjB,CAA2BV,GAA3B,CAAgCJ,UAAhC,EAA4CwC,MAA5C,EAAoDb,iBAAiB1B,UAArE,CAAN,CAEA,KAAKqE,qBAAL,CAA4BtE,UAA5B,EAAwCwC,MAAxC,EAEA,OAAOA,OAAO7D,EAAd,CACD,CAED,MAAMsG,MAAN,CAAcjF,UAAd,EAAkCkF,SAAlC,EAAqDC,YAArD,EAA6F,CAC3F,MAAMxD,mBAAmB7C,kBAAkBkB,UAAlB,CAAzB,CACA,IAAK2B,oBAAoB,IAAzB,EACE,MAAM,IAAIxB,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN,CAEF,MAAMoF,SAAS,MAAM,KAAK/B,YAAL,CAAmBrD,UAAnB,EAA+BkF,SAA/B,CAArB,CAEA,KAAM,IAAIG,gBAAV,IAA8B7G,OAAOmF,IAAP,CAAawB,YAAb,CAA9B,EAA4D,CAC1D,IAAIG,kBAAkB,KAAtB,CAEA,IAAKD,qBAAqB,IAArB,IAA6BA,iBAAiBE,QAAjB,CAA2B,KAA3B,CAAlC,EAAuE,CACrE,IAAIC,cAAcL,aAAaE,gBAAb,CAAlB,CACA,IAAK,OAAOG,WAAP,KAAuB,QAA5B,EACEA,cAAc7D,iBAAiBb,SAAjB,CAA2B2E,cAA3B,CAA2CD,WAA3C,CAAd,CAEFF,kBAAkB3D,iBAAiBb,SAAjB,CAA2ByC,UAA3B,CAChBiC,WADgB,EAEhB;AACAJ,eAAOC,gBAAP,CAHgB,CAAlB,CAKD,CAVD,MAUO,CACLC,kBACE;AACAH,qBAAaE,gBAAb,MAAmCD,OAAOC,gBAAP,CAFrC,CAGD,CAED,IAAK,CAACC,eAAN,EACE,MAAM,IAAInF,KAAJ,CACJ,8DACEkF,gBADF,GAEE,MAFF,GAGErF,UAJE,CAAN,CAMH,CACD,OAAOoF,MAAP,CACD,CAED,MAAMM,MAAN,CAAc1F,UAAd,EAAkCwC,MAAlC,EAAkE,CAChE,MAAMb,mBAAmB7C,kBAAkBkB,UAAlB,CAAzB,CACA,IAAK2B,oBAAoB,IAAzB,EACE,MAAM,IAAIxB,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN,CAH8D,CAKhE;AACA;AACA,UAAM2F,gBAAgB,EAAEhH,IAAI6D,OAAO7D,EAAb,EAAtB,CACA,KAAK+C,oCAAL,CAA2CC,gBAA3C,EAA6DgE,aAA7D,EACA,MAAM,KAAKV,MAAL,CAAajF,UAAb,EAAyB,EAAErB,IAAI6D,OAAO7D,EAAb,EAAzB,EAA4CgH,aAA5C,CAAN,CATgE,CAWhE;AACA,QAAIhB,YAAY,IAAhB,CACA,IAAKhD,iBAAiBT,4CAAtB,EAAqE,CACnEyD,YAAY,KAAKtB,YAAL,CAAmBrD,UAAnB,EAA+B,EACzCrB,IAAI6D,OAAO7D,EAD8B,EAA/B,CAAZ,CAGD,CACD,KAAK4D,YAAL,CAAmBvC,UAAnB,EAA+BwC,MAA/B,EAAuC,KAAvC,EACA,MAAM,KAAKiC,eAAL,CAAsB9C,iBAAiBX,iBAAvC,EAA0DwB,MAA1D,EAAkEmC,SAAlE,CAAN,CACA,MAAMhD,iBAAiBb,SAAjB,CAA2B4E,MAA3B,CAAmC1F,UAAnC,EAA+CwC,MAA/C,CAAN,CACA,KAAK8B,qBAAL,CAA4BtE,UAA5B,EAAwCwC,MAAxC,EACD,CAED,MAAMoD,MAAN,CAAc5F,UAAd,EAAkCwC,MAAlC,EAAkE,CAChE,MAAMb,mBAAmB7C,kBAAkBkB,UAAlB,CAAzB,CACA,IAAK2B,oBAAoB,IAAzB,EACE,MAAM,IAAIxB,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN,CAH8D,CAKhE;AACA;AACA,UAAM2F,gBAAgB,EAAEhH,IAAI6D,OAAO7D,EAAb,EAAtB,CACA,KAAK+C,oCAAL,CAA2CC,gBAA3C,EAA6DgE,aAA7D,EACA,MAAM,KAAKV,MAAL,CAAajF,UAAb,EAAyB,EAAErB,IAAI6D,OAAO7D,EAAb,EAAzB,EAA4CgH,aAA5C,CAAN,CAEA,KAAKpD,YAAL,CAAmBvC,UAAnB,EAA+BwC,MAA/B,EAAuC,IAAvC,EACA,MAAM,KAAKiC,eAAL,CAAsB9C,iBAAiBV,iBAAvC,EAA0DuB,MAA1D,CAAN,CACA,MAAMb,iBAAiBb,SAAjB,CAA2B8E,MAA3B,CAAmC5F,UAAnC,EAA+CwC,MAA/C,CAAN,CACA,KAAK8B,qBAAL,CAA4BtE,UAA5B,EAAwCwC,MAAxC,EACD,CAEDqD,4BAA6B7F,UAA7B,EAAiD8F,GAAjD,EAAqEC,GAArE,EAAmF,CACjF,MAAMpE,mBAAmB7C,kBAAkBkB,UAAlB,CAAzB,CADiF,CAGjF;AACA,UAAMgG,SAASrE,iBAAiBb,SAAjB,CAA2BmF,YAA3B,CAAyCF,IAAIpH,EAA7C,CAAf,CAJiF,CAMjF;AACA;AACA,SAAM,IAAIwF,KAAK,CAAf,EAAkBA,KAAK2B,IAAI1B,MAA3B,EAAmCD,IAAnC,EAA0C,CACxC,MAAM+B,iBAAiBvE,iBAAiBb,SAAjB,CAA2BmF,YAA3B,CAAyCH,IAAI3B,EAAJ,EAAQxF,EAAjD,CAAvB,CACA,IAAKuH,mBAAmBF,MAAxB,EAAiC,CAC/BF,IAAI3B,EAAJ,IAAU4B,GAAV,CACA,MACD,CACF,CACD,IAAII,SAAS,+CAA6BL,GAA7B,EAAkCC,GAAlC,CAAb,CACA,IAAKI,UAAU,IAAf,EACE,cAAIC,GAAJ,CACE,OADF,EAEE,0EAA0EpG,UAF5E,EAGE,EACE+F,GADF,EAEED,GAFF,EAHF,EAQF,OAAOK,MAAP,CACD,CAED,OAAOE,oBAAP,CAA6BC,wBAA7B,EAAgEC,EAAhE,EAAqF,CACnF,KAAM,IAAIrG,SAAV,IAAuBnB,aAAvB,EACEmB,UAAUsG,UAAV,CAAsBF,wBAAtB,EAAgD,MAAM,CACpDC,KACD,CAFD,EAGH,CA7ZgC,C,kBAAdlH,a,EAgarB;AACAA,cAAcU,cAAd,CAA8B,MAA9B,kB,CAEA;AACO,eAAezB,gBAAf,CAAiC0D,GAAjC,EAA8CC,GAA9C,EAAoF,CACzF;AACA,QAAMpC,kBAAkB,MAAM,sCAAoBmC,GAApB,EAAyBC,GAAzB,CAA9B,CAFyF,CAE5B;AAC7D,QAAMwE,gBAAgB,IAAIpH,aAAJ,EAAtB,CAHyF,CAG/C;AAE1CoH,gBAAc1E,UAAd,CAA0BC,GAA1B,EAA+BC,GAA/B,EALyF,CAKpD;AACrCwE,gBAAcvE,kBAAd,CAAkCrC,eAAlC,EACA,OAAO4G,aAAP,CACD","file":"ObjectManager.js","sourcesContent":["// @flow\n\nimport DataLoader from 'dataloader'\nimport { cursorForObjectInConnection } from 'graphql-relay'\n\nimport UserToken2Anonymous from '../../_configuration/urb-base-server/UserToken2Anonymous'\nimport defaultPersister from '../../_configuration/urb-base-server/graphql/defaultPersister'\nimport getNewUser from '../../_configuration/urb-base-server/graphql/model/getNewUser'\nimport { getSiteInformation } from '../../_configuration/urb-base-server/siteSettings'\nimport log from '../log'\nimport User from '../../_configuration/urb-base-server/graphql/model/User'\n\n// Anonymous user\nconst User_0 = new User(\n  Object.assign( getNewUser( defaultPersister.uuidNull() ), {\n    id: defaultPersister.uuidNull(),\n    UserToken2: UserToken2Anonymous,\n    User_DisplayName: 'Anonymous',\n  }),\n)\n\nexport { User_0 }\n\n// Type of entity definition\ntype EntityDefinition = {\n  EntityName: string,\n  EntityType: Object,\n  fieldName_artifact_id: ?string,\n  fieldName_user_id: ?string,\n  Persister: Object,\n  TriggersForAdd: Array<Function>,\n  TriggersForUpdate: Array<Function>,\n  TriggersForRemove: Array<Function>,\n  TriggersForUpdateShouldRetrieveCurrentRecord: boolean,\n}\n\n// Static set of entity definitions\nconst entityDefinitions: {\n  [string]: EntityDefinition,\n} = {}\n\n// Static array of object managers\nconst setPersisters = new Set()\n\n// Value for a change indicating that the record is deleted\nconst deletedRecord = {\n  deleted: true,\n}\n\n// Regular expressions for detecting use of artifact_id and user_id in GraphQL Object Type\nconst re_artifact_id_Present = /this\\.([\\w\\d]*artifact_id)/i // Notice it can be <TableName>_artifact_id or just artifact_id\nconst re_user_id_Present = /this\\.([\\w\\d]*_user_id)/i // Noice that it has to be <TableName>_user_id\n\nexport default class ObjectManager {\n  loadersSingle: Object\n  loadersMultiple: Object\n  Viewer_User_id: string\n  changes: Object\n  request: ?Object\n  response: ?Object\n  siteInformation: { artifact_id: string }\n\n  constructor() {\n    // Loaders for a single record, by entity name\n    this.loadersSingle = {}\n\n    // Loaders for a multiple record lists, by entity name\n    this.loadersMultiple = {}\n\n    // Changes made to records, by entity name\n    this.changes = {}\n\n    // UserID for the viewer. Could be unset if ObjectManager is used by system\n    this.Viewer_User_id = 'Object Manager: viewer user id has not been set'\n\n    // Request and response objects, if available\n    this.request = null\n    this.response = null\n\n    // Setting site information mostly to satify flow;\n    // also, in order to be able to better detect errors when not set\n    this.siteInformation = {\n      artifact_id: 'Object Manager: artifact_id has not been set',\n    }\n  }\n\n  static registerEntity( entityName: string, EntityType: Object, persister: any ): void {\n    if ( entityName in entityDefinitions ) throw new Error( 'Entity already registered: ' + entityName )\n\n    // In order to be able to access the name as a static property of the type\n    EntityType.entityName = entityName\n\n    // Determine persister - default, or otherwise\n    if ( persister == null ) persister = defaultPersister\n\n    // A set would retain only one copy of a persister\n    setPersisters.add( persister )\n\n    const entityTypeSource = EntityType.toString()\n    const match_artifact_id = entityTypeSource.match( re_artifact_id_Present )\n    const match_user_id = entityTypeSource.match( re_user_id_Present )\n\n    // For the User-related tables, there is no automatic support:\n    // User_id and artifact_id have to be explicitly specified\n    const isNotUserTable =\n      entityName !== 'User' && entityName !== 'UserAccount' && entityName !== 'UserSession'\n\n    entityDefinitions[entityName] = {\n      EntityName: entityName,\n      EntityType: EntityType,\n      fieldName_artifact_id: isNotUserTable && match_artifact_id ? match_artifact_id[1] : null,\n      fieldName_user_id: isNotUserTable && match_user_id ? match_user_id[1] : null,\n      Persister: persister,\n      TriggersForAdd: [],\n      TriggersForUpdate: [],\n      TriggersForRemove: [],\n      TriggersForUpdateShouldRetrieveCurrentRecord: false,\n    }\n  }\n\n  static RegisterTriggerForAdd( entityName: string, handler: Function ): void {\n    entityDefinitions[entityName].TriggersForAdd.push( handler )\n  }\n\n  static RegisterTriggerForUpdate(\n    entityName: string,\n    handler: Function,\n    shouldRetrieveCurrentRecord: boolean,\n  ): void {\n    entityDefinitions[entityName].TriggersForUpdate.push( handler )\n\n    if ( shouldRetrieveCurrentRecord )\n      entityDefinitions[entityName].TriggersForUpdateShouldRetrieveCurrentRecord = true\n  }\n\n  static RegisterTriggerForAddAndUpdate( entityName: string, handler: Function ): void {\n    ObjectManager.RegisterTriggerForAdd( entityName, handler )\n    ObjectManager.RegisterTriggerForUpdate( entityName, handler, false )\n  }\n\n  static RegisterTriggerForRemove( entityName: string, handler: any ) {\n    entityDefinitions[entityName].TriggersForRemove.push( handler )\n  }\n\n  addUserIdAndOrSiteIdToFilterOrFields( entityDefinition: EntityDefinition, filterOrFields: Object ) {\n    if ( entityDefinition.fieldName_artifact_id ) {\n      if ( !filterOrFields.hasOwnProperty( entityDefinition.fieldName_artifact_id ) )\n        filterOrFields[entityDefinition.fieldName_artifact_id] = this.siteInformation.artifact_id\n    }\n\n    if ( entityDefinition.fieldName_user_id ) {\n      if ( !filterOrFields.hasOwnProperty( entityDefinition.fieldName_user_id ) )\n        filterOrFields[entityDefinition.fieldName_user_id] = this.Viewer_User_id\n    }\n  }\n\n  setViewerUserId( Viewer_User_id: string ): void {\n    this.Viewer_User_id = Viewer_User_id\n  }\n\n  setRequest( req: any, res: any ): void {\n    this.request = req\n    this.response = res\n  }\n\n  setSiteInformation( siteInformation: Object ): void {\n    this.siteInformation = siteInformation\n  }\n\n  getLoadersSingle( entityName: string ) {\n    const foundLoaders = this.loadersSingle[entityName]\n\n    if ( foundLoaders != null ) {\n      return foundLoaders\n    } else {\n      this.loadersSingle[entityName] = {}\n      return this.loadersSingle[entityName]\n    }\n  }\n\n  getLoadersMultiple( entityName: string ) {\n    const foundLoaders = this.loadersMultiple[entityName]\n\n    if ( foundLoaders != null ) {\n      return foundLoaders\n    } else {\n      this.loadersMultiple[entityName] = {}\n      return this.loadersMultiple[entityName]\n    }\n  }\n\n  clearLoadersMultiple( entityName: string ) {\n    this.loadersMultiple[entityName] = {}\n  }\n\n  recordChange( entityName: string, fields: Object, isDeletion: boolean ) {\n    let records = this.changes[entityName]\n    if ( records == null ) records = this.changes[entityName] = {}\n\n    const id = fields.id\n\n    records[id] = isDeletion ? deletedRecord : fields\n  }\n\n  getViewerUserId(): string {\n    if ( this.Viewer_User_id == 'Object Manager: viewer user id has not been set' )\n      throw new Error( 'Object Manager: viewer user id has not been set' )\n\n    return this.Viewer_User_id\n  }\n\n  getRequest(): any {\n    if ( this.request == null ) throw new Error( 'Object Manager: request has not been set' )\n\n    return this.request\n  }\n\n  getLoader( entityName: string, fieldName: string, multipleResults: boolean ) {\n    if ( !( entityName in entityDefinitions ) )\n      throw new Error( 'Can not find entity type named ' + entityName )\n\n    const entityDefinition = entityDefinitions[entityName]\n    const entityType = entityDefinition.EntityType\n\n    let loadersList = multipleResults\n      ? this.getLoadersMultiple( entityName )\n      : this.getLoadersSingle( entityName )\n    let loader = loadersList[fieldName]\n    if ( loader == null ) {\n      if ( multipleResults )\n        loader = new DataLoader( filter =>\n          entityDefinition.Persister.getObjectList( entityName, entityType, filter ),\n        )\n      else\n        loader = new DataLoader( filter =>\n          entityDefinition.Persister.getOneObject( entityName, entityType, filter ),\n        )\n\n      loadersList[fieldName] = loader\n    }\n\n    return loader\n  }\n\n  getOneObject( entityName: string, query: Object ): Promise<User> {\n    // Special hack for anonymous users\n    if ( entityName === 'User' )\n      if ( defaultPersister.uuidEquals( defaultPersister.uuidNull(), query.id ) )\n        return Promise.resolve( User_0 )\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinitions[entityName], query )\n\n    // For all non-user, non 0 ids, load from data loader per protocol\n    const loaderIdentifier = Object.keys( query )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, false )\n\n    return loader.load( query ).then( result => {\n      const changes = this.changes[entityName]\n      if ( changes ) {\n        // $FlowIssue - by convention all entity objects are expected to have an id\n        const change = changes[result.id]\n        if ( change != null ) {\n          if ( change === deletedRecord ) result = null\n          // Object is not found, return null // Add or update\n          else Object.assign( result, change )\n        }\n      }\n      return result\n    })\n  }\n\n  getObjectList( entityName: string, query: Object ) {\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinitions[entityName], query )\n\n    const loaderIdentifier = Object.keys( query )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, true )\n\n    return loader.load( query ).then( arrResults => {\n      const changes = this.changes[entityName]\n      if ( changes ) {\n        for ( let ix = 0; ix < arrResults.length; ix++ ) {\n          const change = changes[arrResults[ix].id]\n          if ( change != null ) {\n            if ( change === deletedRecord )\n              // Reduce ix in order not to skip over a record\n              arrResults.splice( ix--, 1 )\n            // Add or update\n            else Object.assign( arrResults[ix], change )\n          }\n        }\n      }\n      return arrResults\n    })\n  }\n\n  invalidateLoaderCache( entityName: string, fields: any ) {\n    // At this moment there is no obvious way of knowing what to clear from lists, so delete them all\n    this.clearLoadersMultiple( entityName )\n\n    const loadersSingle = this.getLoadersSingle( entityName )\n    for ( let loaderFieldName in loadersSingle ) {\n      if ( loaderFieldName === 'id' ) loadersSingle[loaderFieldName].clear( fields.id )\n      else delete loadersSingle[loaderFieldName]\n    }\n  }\n\n  executeTriggers( arrTriggers: Array<Function>, fields: Object, oldFields: ?Object ) {\n    const arrPromises = []\n    for ( let trigger of arrTriggers ) {\n      arrPromises.push( trigger( this, fields, oldFields ) )\n    }\n\n    return Promise.all( arrPromises )\n  }\n\n  assignPrimaryKey( entityName: string, fields: any ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Generate primary key, overwrite if already present\n    fields.id = entityDefinition.Persister.uuidRandom()\n  }\n\n  async add( entityName: string, fields: Object ): any {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fields )\n\n    // Generate primary key, if not already present\n    if ( !fields.id ) fields.id = entityDefinition.Persister.uuidRandom()\n\n    // If this is a user ID\n    if ( entityName === 'User' ) this.setViewerUserId( fields.id.toString() )\n\n    this.recordChange( entityName, fields, false )\n    await this.executeTriggers( entityDefinition.TriggersForAdd, fields )\n\n    await entityDefinition.Persister.add( entityName, fields, entityDefinition.EntityType )\n\n    this.invalidateLoaderCache( entityName, fields )\n\n    return fields.id\n  }\n\n  async ensure( entityName: string, keyFields: Object, ensureFields: Object ): Promise<Object> {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    const entity = await this.getOneObject( entityName, keyFields )\n\n    for ( let ensuredFieldName of Object.keys( ensureFields ) ) {\n      let isMatchingValue = false\n\n      if ( ensuredFieldName === 'id' || ensuredFieldName.endsWith( '_id' ) ) {\n        let ensureValue = ensureFields[ensuredFieldName]\n        if ( typeof ensureValue === 'string' )\n          ensureValue = entityDefinition.Persister.uuidFromString( ensureValue )\n\n        isMatchingValue = entityDefinition.Persister.uuidEquals(\n          ensureValue,\n          // $FlowIssue by convention the field should be present\n          entity[ensuredFieldName],\n        )\n      } else {\n        isMatchingValue =\n          // $FlowIssue by convention the field should be present\n          ensureFields[ensuredFieldName] === entity[ensuredFieldName]\n      }\n\n      if ( !isMatchingValue )\n        throw new Error(\n          'Object Manager: Field value can not be ensured for field ' +\n            ensuredFieldName +\n            ' of ' +\n            entityName,\n        )\n    }\n    return entity\n  }\n\n  async update( entityName: string, fields: Object ): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Apply artifact_id, User_id security - ensure a copy of the fields has the correct\n    // artifact_id and user_id\n    const fieldsEnsured = { id: fields.id }\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fieldsEnsured )\n    await this.ensure( entityName, { id: fields.id }, fieldsEnsured )\n\n    // Should that be recorded somewhere? Could be another\n    let oldFields = null\n    if ( entityDefinition.TriggersForUpdateShouldRetrieveCurrentRecord ) {\n      oldFields = this.getOneObject( entityName, {\n        id: fields.id,\n      })\n    }\n    this.recordChange( entityName, fields, false )\n    await this.executeTriggers( entityDefinition.TriggersForUpdate, fields, oldFields )\n    await entityDefinition.Persister.update( entityName, fields )\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  async remove( entityName: string, fields: Object ): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Apply artifact_id, User_id security - ensure a copy of the fields has the correct\n    // artifact_id and user_id\n    const fieldsEnsured = { id: fields.id }\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fieldsEnsured )\n    await this.ensure( entityName, { id: fields.id }, fieldsEnsured )\n\n    this.recordChange( entityName, fields, true )\n    await this.executeTriggers( entityDefinition.TriggersForRemove, fields )\n    await entityDefinition.Persister.remove( entityName, fields )\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  cursorForObjectInConnection( entityName: string, arr: Array<Object>, obj: Object ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    // IDs can be both strings and Uuid. Check that first, and convert to String\n    const obj_id = entityDefinition.Persister.uuidToString( obj.id )\n\n    // Make sure that the object and its instance can be compared with ===\n    // assumed that the object has id field which is unique\n    for ( let ix = 0; ix < arr.length; ix++ ) {\n      const arr_element_id = entityDefinition.Persister.uuidToString( arr[ix].id )\n      if ( arr_element_id === obj_id ) {\n        arr[ix] = obj\n        break\n      }\n    }\n    let cursor = cursorForObjectInConnection( arr, obj )\n    if ( cursor == null )\n      log.log(\n        'error',\n        'Object Manager: Could not create cursor for object in connection for ' + entityName,\n        {\n          obj,\n          arr,\n        },\n      )\n    return cursor\n  }\n\n  static initializePersisters( runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n    for ( let persister of setPersisters )\n      persister.initialize( runAsPartOfSetupDatabase, () => {\n        cb()\n      })\n  }\n}\n\n// Register the user\nObjectManager.registerEntity( 'User', User )\n\n// Get an Object Manager with site information\nexport async function getObjectManager( req: Object, res: Object ): Promise<ObjectManager> {\n  // Set site information\n  const siteInformation = await getSiteInformation( req, res ) // Create individual object manager for each request\n  const objectManager = new ObjectManager() // Set request and response\n\n  objectManager.setRequest( req, res ) // Place maker configuration into object manager\n  objectManager.setSiteInformation( siteInformation )\n  return objectManager\n}\n"]}