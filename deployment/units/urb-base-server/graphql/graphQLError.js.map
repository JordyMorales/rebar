{"version":3,"sources":["../../../../units/urb-base-server/graphql/graphQLError.js"],"names":["setDefaultHandler","maskErrors","Processed","Symbol","IsUserError","UserError","Error","constructor","args","name","message","captureStackTrace","defaultHandler","err","log","error","stack","handlerFn","thing","fn","GraphQLSchema","maskSchema","GraphQLObjectType","maskType","maskField","field","resolveFn","resolve","out","call","Promise","e","_resolveFn","type","getFields","fields","fieldName","Object","hasOwnProperty","schema","types","getTypeMap","typeName"],"mappings":"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","file":"graphQLError.js","sourcesContent":["// This is a modified version of: https://github.com/kadirahq/graphql-errors/blob/master/lib/index.js\n\n//import uuid from 'uuid';\nimport { GraphQLObjectType, GraphQLSchema } from 'graphql'\n\nimport log from '../log'\n\n// Mark field/type/schema\nexport const Processed = Symbol()\n\n// Used to identify UserErrors\nexport const IsUserError = Symbol()\n\n// UserErrors will be sent to the user\nexport class UserError extends Error {\n  constructor( ...args ) {\n    super( ...args )\n    this.name = 'Error'\n    this.message = args[0]\n    this[IsUserError] = true\n    Error.captureStackTrace( this, 'Error' )\n  }\n}\n\n// Modifies errors before sending to the user\nexport let defaultHandler = function( err ) {\n  if ( err[IsUserError]) {\n    return err\n  }\n  // TODO: x1000 Consider having a unique ID for the errors, most probably move it to the log though, so that all modules can use it\n  // const errId = uuid.v4();\n  // err.message = `${err.message}: ${errId}`;\n  log.log( 'error', 'Resolve function failed', {\n    error: ( err && err.stack ) || err,\n  })\n  err.message = 'Internal Error'\n  return err\n}\n\n// Changes the default error handler function\nexport function setDefaultHandler( handlerFn ) {\n  defaultHandler = handlerFn\n}\n\n// Masks graphql schemas, types or individual fields\nexport function maskErrors( thing, fn = defaultHandler ) {\n  if ( thing instanceof GraphQLSchema ) {\n    maskSchema( thing, fn )\n  } else if ( thing instanceof GraphQLObjectType ) {\n    maskType( thing, fn )\n  } else {\n    maskField( thing, fn )\n  }\n}\n\nfunction maskField( field, fn ) {\n  const resolveFn = field.resolve\n  if ( field[Processed] || !resolveFn ) {\n    return\n  }\n\n  field[Processed] = true\n  field.resolve = async function( ...args ) {\n    try {\n      const out = resolveFn.call( this, ...args )\n      return await Promise.resolve( out )\n    } catch ( e ) {\n      throw fn( e )\n    }\n  }\n\n  // save the original resolve function\n  field.resolve._resolveFn = resolveFn\n}\n\nfunction maskType( type, fn ) {\n  if ( type[Processed] || !type.getFields ) {\n    return\n  }\n\n  const fields = type.getFields()\n  for ( const fieldName in fields ) {\n    if ( !Object.hasOwnProperty.call( fields, fieldName ) ) {\n      continue\n    }\n\n    maskField( fields[fieldName], fn )\n  }\n}\n\nfunction maskSchema( schema, fn ) {\n  const types = schema.getTypeMap()\n  for ( const typeName in types ) {\n    if ( !Object.hasOwnProperty.call( types, typeName ) ) {\n      continue\n    }\n\n    maskType( types[typeName], fn )\n  }\n}\n"]}