{"version":3,"sources":["../../../units/urb-base-server/MasterReader.js"],"names":["fs","fsWithCallbacks","promises","FileBase","constructor","arrRelativePath","relativePath","join","name","length","File","Directory","arrContents","MasterReader","basePath","directoriesByRelativePath","Map","fileContentsByRelativePath","skipFile","arrAllFiles","setSkipFile","initialize","baseDir","readDirectory","dir","set","dirContent","readdir","fileName","substr","stat","fileOrDirToAdd","isFile","file","concat","isDirectory","subDir","Error","JSON","stringify","push","readFile","currentContent","get","newContent","encoding","toString","getAllFiles","getAllFiledHelper","fileOrDirectory"],"mappings":"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","file":"MasterReader.js","sourcesContent":["// @flow\n\nimport fsWithCallbacks from 'fs'\n\nconst fs = fsWithCallbacks.promises\n\nclass FileBase {\n  arrRelativePath: Array<string>\n  relativePath: string\n  name: string\n\n  constructor( arrRelativePath: Array<string> ) {\n    this.arrRelativePath = arrRelativePath\n    this.relativePath = arrRelativePath.join( '/' )\n    this.name = arrRelativePath[arrRelativePath.length - 1]\n  }\n}\n\nexport class File extends FileBase {\n  contentAsString: ?string\n}\n\nexport class Directory extends FileBase {\n  arrContents: Array<FileBase>\n  arrAllFiles: Array<File>\n\n  constructor( arrRelativePath: Array<string> ) {\n    super( arrRelativePath )\n\n    this.arrContents = []\n  }\n}\n\nexport default class MasterReader {\n  arrAllFiles: Array<File>\n  baseDir: ?Directory\n  basePath: string\n  directoriesByRelativePath: Map<string, Directory>\n  fileContentsByRelativePath: Map<string, string>\n  skipFile: Function\n\n  constructor( basePath: string ) {\n    this.basePath = basePath\n\n    this.directoriesByRelativePath = new Map()\n    this.fileContentsByRelativePath = new Map()\n\n    this.skipFile = () => false\n    this.arrAllFiles = []\n  }\n\n  setSkipFile( skipFile: Function ) {\n    this.skipFile = skipFile\n  }\n\n  async initialize() {\n    // And read\n    this.baseDir = await this.readDirectory([])\n  }\n\n  async readDirectory( arrRelativePath: Array<string> ) {\n    const dir = new Directory( arrRelativePath )\n    this.directoriesByRelativePath.set( dir.relativePath, dir )\n\n    const dirContent = await fs.readdir( this.basePath + '/' + dir.relativePath )\n    for ( let fileName of dirContent ) {\n      // Skip DS store iles on mac\n      if ( fileName === '.DS_Store' ) continue\n\n      // Skip files according to passed function\n      if ( this.skipFile( fileName ) ) {\n        continue\n      }\n\n      // Skip . and .. directories\n      if ( fileName.substr( 0, 1 ) === '.' ) {\n        continue\n      }\n\n      const stat = await fs.stat( this.basePath + '/' + dir.relativePath + '/' + fileName )\n\n      let fileOrDirToAdd\n\n      if ( stat.isFile() ) {\n        const file = new File( arrRelativePath.concat( fileName ) )\n\n        fileOrDirToAdd = file\n      } else if ( stat.isDirectory() ) {\n        const subDir = await this.readDirectory( arrRelativePath.concat( fileName ) )\n\n        fileOrDirToAdd = subDir\n      } else\n        throw new Error(\n          'MasterReader: Neither file nor directory' + JSON.stringify( arrRelativePath ),\n        )\n\n      dir.arrContents.push( fileOrDirToAdd )\n    }\n\n    return dir\n  }\n\n  async readFile( fileName: string ): Promise<string> {\n    const currentContent = this.fileContentsByRelativePath.get( fileName )\n\n    if ( currentContent ) return currentContent\n\n    const newContent = ( await fs.readFile( this.basePath + '/' + fileName, {\n      encoding: 'utf8',\n    }) ).toString()\n    this.fileContentsByRelativePath.set( fileName, newContent )\n\n    return newContent\n  }\n\n  getAllFiles() {\n    if ( !this.baseDir ) throw new Error()\n\n    if ( this.arrAllFiles.length > 0 ) return this.arrAllFiles\n\n    this.getAllFiledHelper( this.baseDir )\n\n    return this.arrAllFiles\n  }\n\n  getAllFiledHelper( dir: Directory ) {\n    for ( let fileOrDirectory of dir.arrContents ) {\n      if ( fileOrDirectory instanceof Directory ) {\n        // Sub-dir\n        this.getAllFiledHelper( fileOrDirectory )\n      } else if ( fileOrDirectory instanceof File ) {\n        this.arrAllFiles.push( fileOrDirectory )\n      }\n    }\n  }\n}\n"]}