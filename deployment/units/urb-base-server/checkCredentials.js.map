{"version":3,"sources":["../../../units/urb-base-server/checkCredentials.js"],"names":["getUserAndSessionIDByUserToken1","verifyUserAuthToken","serveAuthenticationFailed","require","load","getSessionIdFromRequest","req","UserToken1","cookies","headers","usertoken1","length","decoded","jwt","decode","process","env","JWT_SECRET","defaultPersister","uuidFromString","session_id","err","objectManager","a_UserSession","getOneObject","id","UserSession_artifact_id","siteInformation","artifact_id","user_id","UserSession_User_id","uuidNull","a_User","User_artifact_id","setViewerUserId","User","UserSession","Error","JSON","stringify","Promise","reject","request_UserToken2","get","UserToken2","ip","UserToken2ServerRendering","USER_TOKEN_2_BYPASS_IP","resolve","httpError403FileName","path","__dirname","res","respondWithJSON","connection","remoteAddress","requestDetails","query","body","log","errorMessage","message","errorStack","stack","cookie","httpOnly","expires","Date","status","send","sendFile"],"mappings":"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","file":"checkCredentials.js","sourcesContent":["// @flow weak\n\nimport path from 'path'\n\nimport jwt from 'jwt-simple'\n\nimport defaultPersister from '../_configuration/urb-base-server/graphql/defaultPersister'\nimport UserToken2ServerRendering from '../_configuration/urb-base-server/UserToken2ServerRendering'\n\nimport log from './log'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nfunction getSessionIdFromRequest( req: Object ): ?string {\n  const UserToken1 = req.cookies.UserToken1 || req.headers.usertoken1\n  if ( UserToken1 )\n    try {\n      if ( UserToken1.length > 10 ) {\n        const decoded = jwt.decode( UserToken1, process.env.JWT_SECRET )\n        return defaultPersister.uuidFromString( decoded.session_id )\n      }\n    } catch ( err ) {\n      // Do nothing. This most probably means an expired session, or\n      // new session secret. Either way the user is consindered not logged in\n    }\n  return null // Anonymous, unless cookie is passed\n}\n\nexport async function getUserAndSessionIDByUserToken1( objectManager, req ) {\n  // Get session, and if session is present, user from session\n  const session_id = getSessionIdFromRequest( req )\n  let a_UserSession = null\n  if ( session_id )\n    a_UserSession = await objectManager.getOneObject( 'UserSession', {\n      id: session_id,\n      UserSession_artifact_id: objectManager.siteInformation.artifact_id,\n    })\n\n  const user_id = a_UserSession ? a_UserSession.UserSession_User_id : defaultPersister.uuidNull()\n\n  const a_User = await objectManager.getOneObject( 'User', {\n    id: user_id,\n    User_artifact_id: objectManager.siteInformation.artifact_id,\n  })\n\n  if ( a_User ) {\n    objectManager.setViewerUserId( user_id )\n    return { User: a_User, UserSession: a_UserSession }\n  } else {\n    throw new Error( 'User ' + JSON.stringify( user_id ) + ' not found' )\n  }\n}\n\nexport function verifyUserAuthToken( a_User, req ) {\n  if ( !a_User ) return Promise.reject( 'User not found' )\n  else {\n    const request_UserToken2 = req.get( 'UserToken2' )\n    if (\n      request_UserToken2 === a_User.UserToken2 ||\n      // A request coming from webapp will come from localhost and will bear the server's user token\n      ( req.ip === '127.0.0.1' && request_UserToken2 === UserToken2ServerRendering ) ||\n      // For use with GraphiQL\n      process.env.USER_TOKEN_2_BYPASS_IP === req.ip\n    )\n      return Promise.resolve( a_User.id )\n    else\n      return Promise.reject(\n        'Authentication token expected: ' + a_User.UserToken2 + ', provided:' + request_UserToken2,\n      )\n  }\n}\n\nconst httpError403FileName = path.resolve(\n  __dirname,\n  '../_configuration/urb-base-server/httpError/403.html',\n)\n\nexport function serveAuthenticationFailed( req, res, err, respondWithJSON ) {\n  // Collect information about the request\n  var ip = req.headers['x-real-ip'] || req.connection.remoteAddress\n  const requestDetails = {\n    headers: req.headers,\n    cookies: req.cookies,\n    ip: ip,\n    query: req.body,\n  }\n  log.log( 'warn', 'Checking credentials failed', {\n    errorMessage: err.message,\n    errorStack: err.stack,\n    requestDetails,\n  })\n  // Expire cookie. This is the only way to 'delete' a cookie\n  res.cookie( 'UserToken1', '', { httpOnly: true, expires: new Date( 1 ) })\n  if ( respondWithJSON ) res.status( 403 ).send( '{ \"error\": \"Authentication Failed\" }' )\n  else res.status( 403 ).sendFile( httpError403FileName )\n}\n"]}