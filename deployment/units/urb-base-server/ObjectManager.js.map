{"version":3,"sources":["../../../units/urb-base-server/ObjectManager.js"],"names":["getObjectManager","User_0","User","Object","assign","defaultPersister","uuidNull","id","UserToken2","UserToken2Anonymous","User_DisplayName","entityDefinitions","setPersisters","Set","deletedRecord","deleted","ObjectManager","constructor","loadersSingle","loadersMultiple","changes","Viewer_User_id","request","response","siteInformation","artifact_id","siteConfiguration","registerEntity","entityName","EntityType","persister","Error","add","entityDefinition","EntityName","fieldsWithSuffix","Persister","TriggersForAdd","TriggersForUpdate","TriggersForRemove","TriggersForUpdateShouldRetrieveCurrentRecord","example","suffix","fieldName","hasOwnProperty","RegisterTriggerForAdd","handler","push","RegisterTriggerForUpdate","shouldRetrieveCurrentRecord","RegisterTriggerForAddAndUpdate","RegisterTriggerForRemove","addUserIdAndOrSiteIdToFilterOrFields","filterOrFields","updatedCreatedAndModifiedFields","fields","isCreating","dtNow","Date","setViewerUserId","setRequest","req","res","setSiteInformation","getLoadersSingle","foundLoaders","getLoadersMultiple","clearLoadersMultiple","recordChange","isDeletion","records","getViewerUserId","getRequest","getLoader","multipleResults","entityType","loadersList","loader","DataLoader","filter","getObjectList","err","log","stack","getOneObject","query","uuidEquals","Promise","resolve","loaderIdentifier","keys","sort","join","load","then","result","change","arrResults","ix","length","splice","invalidateLoaderCache","loaderFieldName","clear","executeTriggers","arrTriggers","oldFields","arrPromises","trigger","all","assignPrimaryKey","uuidRandom","toString","update","remove","uuidFromString","uuidToString","cursorForObjectInConnection","arr","obj","obj_id","arr_element_id","cursor","initializePersisters","runAsPartOfSetupDatabase","cb","initialize","objectManager"],"mappingsgiBsBA,gB,GAAAA,gB,CA9hBtB,wC,uDACA,6CAEA,4F,yEACA,8F,mEACA,wF,uDACA,8EACA,4E,2CAEA,4B,uIAEA;AACA,MAAMC,SAAS,IAAIC,cAAJ,CACbC,OAAOC,MAAP,CAAe,0BAAYC,2BAAiBC,QAAjB,EAAZ,CAAf,EAA0D,EACxDC,IAAIF,2BAAiBC,QAAjB,EADoD,EAExDE,YAAYC,6BAF4C,EAGxDC,kBAAkB,WAHsC,EAA1D,CADa,CAAf,C,QAQST,M,GAAAA,M,EAET;AAYA;AACA,MAAMU,oBAEF,EAFJ,C,CAIA;AACA,MAAMC,gBAAgB,IAAIC,GAAJ,EAAtB,C,CAEA;AACA,MAAMC,gBAAgB,EACpBC,SAAS,IADW,EAAtB,CAIe,MAAMC,aAAN,CAAoB,CASjCC,cAAc,CACZ;AACA,SAAKC,aAAL,GAAqB,EAArB,CAFY,CAIZ;AACA,SAAKC,eAAL,GAAuB,EAAvB,CALY,CAOZ;AACA,SAAKC,OAAL,GAAe,EAAf,CARY,CAUZ;AACA,SAAKC,cAAL,GAAsB,iDAAtB,CAXY,CAaZ;AACA,SAAKC,OAAL,GAAe,IAAf,CACA,KAAKC,QAAL,GAAgB,IAAhB,CAfY,CAiBZ;AACA;AACA,SAAKC,eAAL,GAAuB,EACrBC,aAAa,8CADQ,EAErBC,mBAAmB,EAFE,EAAvB,CAID,CAED,OAAOC,cAAP,CAAuBC,UAAvB,EAA2CC,UAA3C,EAAiEC,SAAjE,EAAwF,CACtF,IAAKF,cAAcjB,iBAAnB,EAAuC,MAAM,IAAIoB,KAAJ,CAAW,gCAAgCH,UAA3C,CAAN,CAD+C,CAGtF;AACAC,eAAWD,UAAX,GAAwBA,UAAxB,CAJsF,CAMtF;AACA,QAAKE,aAAa,IAAlB,EAAyBA,YAAYzB,0BAAZ,CAP6D,CAStF;AACAO,kBAAcoB,GAAd,CAAmBF,SAAnB,EAEA,MAAMG,mBAAmB,EACvBC,YAAYN,UADW,EAEvBC,UAFuB,EAGvBM,kBAAkB,EAHK,EAIvBC,WAAWN,SAJY,EAKvBO,gBAAgB,EALO,EAMvBC,mBAAmB,EANI,EAOvBC,mBAAmB,EAPI,EAQvBC,8CAA8C,KARvB,CAWzB;AACA;AACA;AAbyB,KAAzB,CAcA,IAAKZ,eAAe,MAAf,IAAyBA,eAAe,aAAxC,IAAyDA,eAAe,aAA7E,EAA6F,CAC3F,MAAMa,UAAU,IAAIZ,UAAJ,CAAe,EAAf,CAAhB,CACA,KAAM,IAAIa,MAAV,IAAoB,CAClB,cADkB,EAElB,UAFkB,EAGlB,aAHkB,EAIlB,aAJkB,EAKlB,cALkB,EAMlB,cANkB,CAApB,EAOG,CACD,MAAMC,YAAYV,iBAAiBC,UAAjB,GAA8BQ,MAAhD,CADC,CAGD;AACA,YAAKD,QAAQG,cAAR,CAAwBD,SAAxB,CAAL,EAA2C,CACzCV,iBAAiBE,gBAAjB,CAAkCO,MAAlC,IAA4C,IAA5C,CACD,CACF,CACF,CAED/B,kBAAkBiB,UAAlB,IAAgCK,gBAAhC,CACD,CAED,OAAOY,qBAAP,CAA8BjB,UAA9B,EAAkDkB,OAAlD,EAA4E,CAC1EnC,kBAAkBiB,UAAlB,EAA8BS,cAA9B,CAA6CU,IAA7C,CAAmDD,OAAnD,EACD,CAED,OAAOE,wBAAP,CACEpB,UADF,EAEEkB,OAFF,EAGEG,2BAHF,EAIQ,CACNtC,kBAAkBiB,UAAlB,EAA8BU,iBAA9B,CAAgDS,IAAhD,CAAsDD,OAAtD,EAEA,IAAKG,2BAAL,EACEtC,kBAAkBiB,UAAlB,EAA8BY,4CAA9B,GAA6E,IAA7E,CACH,CAED,OAAOU,8BAAP,CAAuCtB,UAAvC,EAA2DkB,OAA3D,EAAqF,CACnF9B,cAAc6B,qBAAd,CAAqCjB,UAArC,EAAiDkB,OAAjD,EACA9B,cAAcgC,wBAAd,CAAwCpB,UAAxC,EAAoDkB,OAApD,EAA6D,KAA7D,EACD,CAED,OAAOK,wBAAP,CAAiCvB,UAAjC,EAAqDkB,OAArD,EAAoE,CAClEnC,kBAAkBiB,UAAlB,EAA8BW,iBAA9B,CAAgDQ,IAAhD,CAAsDD,OAAtD,EACD,CAxGgC,CA0GjC;AACAM,uCAAsCnB,gBAAtC,EAA0EoB,cAA1E,EAAmG,CACjG,KAAM,IAAIX,MAAV,IAAoB,CAAE,cAAF,EAAkB,UAAlB,CAApB,EAAoD,CAClD;AACA,UAAKT,iBAAiBE,gBAAjB,CAAkCO,MAAlC,CAAL,EAAgD,CAC9C,MAAMC,YAAYV,iBAAiBC,UAAjB,GAA8BQ,MAAhD,CAD8C,CAG9C;AACA,YAAK,CAACW,eAAeT,cAAf,CAA+BD,SAA/B,CAAN,EACEU,eAAeV,SAAf,IACED,WAAW,cAAX,GAA4B,KAAKlB,eAAL,CAAqBC,WAAjD,GAA+D,KAAKJ,cADtE,CAEH,CACF,CACF,CAvHgC,CAyHjC;AACAiC,kCACErB,gBADF,EAEEsB,MAFF,EAGEC,UAHF,EAIE,CACA,MAAMC,QAAQ,IAAIC,IAAJ,EAAd,CAEA,KAAM,IAAIhB,MAAV,IAAoBc,aAChB,CAAE,aAAF,EAAiB,aAAjB,EAAgC,cAAhC,EAAgD,cAAhD,CADgB,GAEhB,CAAE,cAAF,EAAkB,cAAlB,CAFJ,EAEwC,CACtC;AACA,UAAKvB,iBAAiBE,gBAAjB,CAAkCO,MAAlC,CAAL,EAAgD,CAC9C,MAAMC,YAAYV,iBAAiBC,UAAjB,GAA8BQ,MAAhD,CAD8C,CAG9C;AACA,YAAK,CAACa,OAAOX,cAAP,CAAuBD,SAAvB,CAAN,EACEY,OAAOZ,SAAP,IACED,WAAW,cAAX,IAA6BA,WAAW,aAAxC,GAAwD,KAAKrB,cAA7D,GAA8EoC,KADhF,CAEH,CACF,CACF,CAEDE,gBAAiBtC,cAAjB,EAAgD,CAC9C,KAAKA,cAAL,GAAsBA,cAAtB,CACD,CAEDuC,WAAYC,GAAZ,EAAsBC,GAAtB,EAAuC,CACrC,KAAKxC,OAAL,GAAeuC,GAAf,CACA,KAAKtC,QAAL,GAAgBuC,GAAhB,CACD,CAEDC,mBAAoBvC,eAApB,EAAoD,CAClD,KAAKA,eAAL,GAAuBA,eAAvB,CACD,CAEDwC,iBAAkBpC,UAAlB,EAAuC,CACrC,MAAMqC,eAAe,KAAK/C,aAAL,CAAmBU,UAAnB,CAArB,CAEA,IAAKqC,gBAAgB,IAArB,EAA4B,CAC1B,OAAOA,YAAP,CACD,CAFD,MAEO,CACL,KAAK/C,aAAL,CAAmBU,UAAnB,IAAiC,EAAjC,CACA,OAAO,KAAKV,aAAL,CAAmBU,UAAnB,CAAP,CACD,CACF,CAEDsC,mBAAoBtC,UAApB,EAAyC,CACvC,MAAMqC,eAAe,KAAK9C,eAAL,CAAqBS,UAArB,CAArB,CAEA,IAAKqC,gBAAgB,IAArB,EAA4B,CAC1B,OAAOA,YAAP,CACD,CAFD,MAEO,CACL,KAAK9C,eAAL,CAAqBS,UAArB,IAAmC,EAAnC,CACA,OAAO,KAAKT,eAAL,CAAqBS,UAArB,CAAP,CACD,CACF,CAEDuC,qBAAsBvC,UAAtB,EAA2C,CACzC,KAAKT,eAAL,CAAqBS,UAArB,IAAmC,EAAnC,CACD,CAEDwC,aAAcxC,UAAd,EAAkC2B,MAAlC,EAAkDc,UAAlD,EAAwE,CACtE,IAAIC,UAAU,KAAKlD,OAAL,CAAaQ,UAAb,CAAd,CACA,IAAK0C,WAAW,IAAhB,EAAuBA,UAAU,KAAKlD,OAAL,CAAaQ,UAAb,IAA2B,EAArC,CAEvB,MAAMrB,KAAKgD,OAAOhD,EAAlB,CAEA+D,QAAQ/D,EAAR,IAAc8D,aAAavD,aAAb,GAA6ByC,MAA3C,CACD,CAEDgB,kBAA0B,CACxB,IAAK,KAAKlD,cAAL,KAAwB,iDAA7B,EACE,MAAM,IAAIU,KAAJ,CAAW,iDAAX,CAAN,CAEF,OAAO,KAAKV,cAAZ,CACD,CAEDmD,aAAkB,CAChB,IAAK,KAAKlD,OAAL,IAAgB,IAArB,EAA4B,MAAM,IAAIS,KAAJ,CAAW,0CAAX,CAAN,CAE5B,OAAO,KAAKT,OAAZ,CACD,CAEDmD,UAAW7C,UAAX,EAA+Be,SAA/B,EAAkD+B,eAAlD,EAA6E,CAC3E,IAAK,EAAG9C,cAAcjB,iBAAjB,CAAL,EACE,MAAM,IAAIoB,KAAJ,CAAW,oCAAoCH,UAA/C,CAAN,CAEF,MAAMK,mBAAmBtB,kBAAkBiB,UAAlB,CAAzB,CACA,MAAM+C,aAAa1C,iBAAiBJ,UAApC,CAEA,IAAI+C,cAAcF,kBACd,KAAKR,kBAAL,CAAyBtC,UAAzB,CADc,GAEd,KAAKoC,gBAAL,CAAuBpC,UAAvB,CAFJ,CAIA,IAAIiD,SAASD,YAAYjC,SAAZ,CAAb,CACA,IAAKkC,UAAU,IAAf,EAAsB,CACpB,IAAKH,eAAL,EACEG,SAAS,IAAIC,oBAAJ,CAAgBC,UAAU,CACjC,IAAI,CACF,OAAO9C,iBAAiBG,SAAjB,CAA2B4C,aAA3B,CAA0CpD,UAA1C,EAAsD+C,UAAtD,EAAkEI,MAAlE,CAAP,CACD,CAFD,CAEE,OAAQE,GAAR,EAAc,CACdC,cAAIA,GAAJ,CAAS,OAAT,EAAkB,qDAAqDtD,UAAvE,EAAmF,EACjFe,SADiF,EAEjFsC,GAFiF,EAGjFE,OAAOF,IAAIE,KAHsE,EAAnF,EAKA,MAAMF,GAAN,CACD,CACF,CAXQ,CAAT,CADF,KAcEJ,SAAS,IAAIC,oBAAJ,CAAgBC,UAAU,CACjC,IAAI,CACF,OAAO9C,iBAAiBG,SAAjB,CAA2BgD,YAA3B,CAAyCxD,UAAzC,EAAqD+C,UAArD,EAAiEI,MAAjE,CAAP,CACD,CAFD,CAEE,OAAQE,GAAR,EAAc,CACdC,cAAIA,GAAJ,CAAS,OAAT,EAAkB,kDAAkDtD,UAApE,EAAgF,EAC9Ee,SAD8E,EAE9EsC,GAF8E,EAG9EE,OAAOF,IAAIE,KAHmE,EAAhF,EAKA,MAAMF,GAAN,CACD,CACF,CAXQ,CAAT,CAaFL,YAAYjC,SAAZ,IAAyBkC,MAAzB,CACD,CAED,OAAOA,MAAP,CACD,CAEDO,aAAcxD,UAAd,EAAkCyD,KAAlC,EAAiE,CAC/D;AACA,QAAKzD,eAAe,MAApB,EACE,IAAKvB,2BAAiBiF,UAAjB,CAA6BjF,2BAAiBC,QAAjB,EAA7B,EAA0D+E,MAAM9E,EAAhE,CAAL,EACE,OAAOgF,QAAQC,OAAR,CAAiBvF,MAAjB,CAAP,CAJ2D,CAM/D;AACA,SAAKmD,oCAAL,CAA2CzC,kBAAkBiB,UAAlB,CAA3C,EAA0EyD,KAA1E,EAP+D,CAS/D;AACA,UAAMI,mBAAmBtF,OAAOuF,IAAP,CAAaL,KAAb,EACtBM,IADsB,GAEtBC,IAFsB,CAEhB,GAFgB,CAAzB,CAGA,MAAMf,SAAS,KAAKJ,SAAL,CAAgB7C,UAAhB,EAA4B6D,gBAA5B,EAA8C,KAA9C,CAAf,CAEA,OAAOZ,OAAOgB,IAAP,CAAaR,KAAb,EAAqBS,IAArB,CAA2BC,UAAU,CAC1C,MAAM3E,UAAU,KAAKA,OAAL,CAAaQ,UAAb,CAAhB,CACA,IAAKR,OAAL,EAAe,CACb;AACA,cAAM4E,SAAS5E,QAAQ2E,OAAOxF,EAAf,CAAf,CAEA,IAAKyF,UAAU,IAAf,EAAsB,CACpB;AACA,cAAKA,WAAWlF,aAAhB,EAAgC,CAC9BiF,SAAS,IAAT,CACD,CAFD,MAEO,CACL;AACA5F,mBAAOC,MAAP,CAAe2F,MAAf,EAAuBC,MAAvB,EACD,CACF,CACF,CACD,OAAOD,MAAP,CACD,CAjBM,CAAP,CAkBD,CAEDf,cAAepD,UAAf,EAAmCyD,KAAnC,EAAmD,CACjD;AACA,SAAKjC,oCAAL,CAA2CzC,kBAAkBiB,UAAlB,CAA3C,EAA0EyD,KAA1E,EAEA,MAAMI,mBAAmBtF,OAAOuF,IAAP,CAAaL,KAAb,EACtBM,IADsB,GAEtBC,IAFsB,CAEhB,GAFgB,CAAzB,CAGA,MAAMf,SAAS,KAAKJ,SAAL,CAAgB7C,UAAhB,EAA4B6D,gBAA5B,EAA8C,IAA9C,CAAf,CAEA,OAAOZ,OAAOgB,IAAP,CAAaR,KAAb,EAAqBS,IAArB,CAA2BG,cAAc,CAC9C,MAAM7E,UAAU,KAAKA,OAAL,CAAaQ,UAAb,CAAhB,CACA,IAAKR,OAAL,EAAe,CACb,KAAM,IAAI8E,KAAK,CAAf,EAAkBA,KAAKD,WAAWE,MAAlC,EAA0CD,IAA1C,EAAiD,CAC/C,MAAMF,SAAS5E,QAAQ6E,WAAWC,EAAX,EAAe3F,EAAvB,CAAf,CACA,IAAKyF,UAAU,IAAf,EAAsB,CACpB,IAAKA,WAAWlF,aAAhB,EACE;AACAmF,yBAAWG,MAAX,CAAmBF,IAAnB,EAAyB,CAAzB,EAFF,CAGA;AAHA,iBAIK/F,OAAOC,MAAP,CAAe6F,WAAWC,EAAX,CAAf,EAA+BF,MAA/B,EACN,CACF,CACF,CACD,OAAOC,UAAP,CACD,CAfM,CAAP,CAgBD,CAEDI,sBAAuBzE,UAAvB,EAA2C2B,MAA3C,EAAyD,CACvD;AACA,SAAKY,oBAAL,CAA2BvC,UAA3B,EAEA,MAAMV,gBAAgB,KAAK8C,gBAAL,CAAuBpC,UAAvB,CAAtB,CACA,KAAM,IAAI0E,eAAV,IAA6BpF,aAA7B,EAA6C,CAC3C,IAAKoF,oBAAoB,IAAzB,EAAgCpF,cAAcoF,eAAd,EAA+BC,KAA/B,CAAsChD,OAAOhD,EAA7C,EAAhC,KACK,OAAOW,cAAcoF,eAAd,CAAP,CACN,CACF,CAEDE,gBAAiBC,WAAjB,EAA+ClD,MAA/C,EAA+DmD,SAA/D,EAAoF,CAClF,MAAMC,cAAc,EAApB,CACA,KAAM,IAAIC,OAAV,IAAqBH,WAArB,EAAmC,CACjCE,YAAY5D,IAAZ,CAAkB6D,QAAS,IAAT,EAAerD,MAAf,EAAuBmD,SAAvB,CAAlB,EACD,CAED,OAAOnB,QAAQsB,GAAR,CAAaF,WAAb,CAAP,CACD,CAEDG,iBAAkBlF,UAAlB,EAAsC2B,MAAtC,EAAoD,CAClD,MAAMtB,mBAAmBtB,kBAAkBiB,UAAlB,CAAzB,CAEA,IAAKK,oBAAoB,IAAzB,EACE,MAAM,IAAIF,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN,CAJgD,CAMlD;AACA2B,WAAOhD,EAAP,GAAY0B,iBAAiBG,SAAjB,CAA2B2E,UAA3B,EAAZ,CACD,CAED,MAAM/E,GAAN,CAAWJ,UAAX,EAA+B2B,MAA/B,EAAqD,CACnD,MAAMtB,mBAAmBtB,kBAAkBiB,UAAlB,CAAzB,CACA,IAAKK,oBAAoB,IAAzB,EACE,MAAM,IAAIF,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN,CAHiD,CAKnD;AACA,SAAKwB,oCAAL,CAA2CnB,gBAA3C,EAA6DsB,MAA7D,EANmD,CAQnD;AACA,SAAKD,+BAAL,CAAsCrB,gBAAtC,EAAwDsB,MAAxD,EAAgE,IAAhE,EATmD,CAWnD;AACA,QAAK,CAACA,OAAOhD,EAAb,EAAkBgD,OAAOhD,EAAP,GAAY0B,iBAAiBG,SAAjB,CAA2B2E,UAA3B,EAAZ,CAZiC,CAcnD;AACA,QAAKnF,eAAe,MAApB,EAA6B,KAAK+B,eAAL,CAAsBJ,OAAOhD,EAAP,CAAUyG,QAAV,EAAtB,EAE7B,KAAK5C,YAAL,CAAmBxC,UAAnB,EAA+B2B,MAA/B,EAAuC,KAAvC,EAEA,IAAI,CACF,MAAM,KAAKiD,eAAL,CAAsBvE,iBAAiBI,cAAvC,EAAuDkB,MAAvD,CAAN,CAEA,MAAMtB,iBAAiBG,SAAjB,CAA2BJ,GAA3B,CAAgCJ,UAAhC,EAA4C2B,MAA5C,EAAoDtB,iBAAiBJ,UAArE,CAAN,CACD,CAJD,CAIE,OAAQoD,GAAR,EAAc,CACdC,cAAIA,GAAJ,CAAS,OAAT,EAAkB,mCAAmCtD,UAArD,EAAiE,EAC/D2B,MAD+D,EAE/D0B,GAF+D,EAG/DE,OAAOF,IAAIE,KAHoD,EAAjE,EAKA,MAAMF,GAAN,CACD,CAED,KAAKoB,qBAAL,CAA4BzE,UAA5B,EAAwC2B,MAAxC,EAEA,OAAOA,OAAOhD,EAAd,CACD,CAED,MAAM0G,MAAN,CAAcrF,UAAd,EAAkC2B,MAAlC,EAAkE,CAChE,MAAMtB,mBAAmBtB,kBAAkBiB,UAAlB,CAAzB,CACA,IAAKK,oBAAoB,IAAzB,EACE,MAAM,IAAIF,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN,CAEF,IAAI,CACF;AACA,WAAKwB,oCAAL,CAA2CnB,gBAA3C,EAA6DsB,MAA7D,EAFE,CAIF;AACA,WAAKD,+BAAL,CAAsCrB,gBAAtC,EAAwDsB,MAAxD,EAAgE,KAAhE,EALE,CAOF;AACA,UAAImD,YAAY,IAAhB,CACA,IAAKzE,iBAAiBO,4CAAtB,EAAqE,CACnEkE,YAAY,KAAKtB,YAAL,CAAmBxD,UAAnB,EAA+B,EACzCrB,IAAIgD,OAAOhD,EAD8B,EAA/B,CAAZ,CAGD,CAED,KAAK6D,YAAL,CAAmBxC,UAAnB,EAA+B2B,MAA/B,EAAuC,KAAvC,EAEA,MAAM,KAAKiD,eAAL,CAAsBvE,iBAAiBK,iBAAvC,EAA0DiB,MAA1D,EAAkEmD,SAAlE,CAAN,CAEA,MAAMzE,iBAAiBG,SAAjB,CAA2B6E,MAA3B,CAAmCrF,UAAnC,EAA+C2B,MAA/C,CAAN,CACD,CApBD,CAoBE,OAAQ0B,GAAR,EAAc,CACdC,cAAIA,GAAJ,CAAS,OAAT,EAAkB,sCAAsCtD,UAAxD,EAAoE,EAClE2B,MADkE,EAElE0B,GAFkE,EAGlEE,OAAOF,IAAIE,KAHuD,EAApE,EAKA,MAAMF,GAAN,CACD,CAED,KAAKoB,qBAAL,CAA4BzE,UAA5B,EAAwC2B,MAAxC,EACD,CAED,MAAM2D,MAAN,CAActF,UAAd,EAAkC2B,MAAlC,EAAkE,CAChE,MAAMtB,mBAAmBtB,kBAAkBiB,UAAlB,CAAzB,CACA,IAAKK,oBAAoB,IAAzB,EACE,MAAM,IAAIF,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN,CAEF,IAAI,CACF;AACA,WAAKwB,oCAAL,CAA2CnB,gBAA3C,EAA6DsB,MAA7D,EAEA,KAAKa,YAAL,CAAmBxC,UAAnB,EAA+B2B,MAA/B,EAAuC,IAAvC,EAEA,MAAM,KAAKiD,eAAL,CAAsBvE,iBAAiBM,iBAAvC,EAA0DgB,MAA1D,CAAN,CAEA,MAAMtB,iBAAiBG,SAAjB,CAA2B8E,MAA3B,CAAmCtF,UAAnC,EAA+C2B,MAA/C,CAAN,CACD,CATD,CASE,OAAQ0B,GAAR,EAAc,CACdC,cAAIA,GAAJ,CAAS,OAAT,EAAkB,sCAAsCtD,UAAxD,EAAoE,EAClE2B,MADkE,EAElE0B,GAFkE,EAGlEE,OAAOF,IAAIE,KAHuD,EAApE,EAKA,MAAMF,GAAN,CACD,CAED,KAAKoB,qBAAL,CAA4BzE,UAA5B,EAAwC2B,MAAxC,EACD,CAED4D,eAAgBvF,UAAhB,EAAoCrB,EAApC,EAAiD,CAC/C,MAAM0B,mBAAmBtB,kBAAkBiB,UAAlB,CAAzB,CAEA,OAAOK,iBAAiBG,SAAjB,CAA2B+E,cAA3B,CAA2C5G,EAA3C,CAAP,CACD,CAED6G,aAAcxF,UAAd,EAAkCrB,EAAlC,EAA+C,CAC7C,MAAM0B,mBAAmBtB,kBAAkBiB,UAAlB,CAAzB,CAEA,OAAOK,iBAAiBG,SAAjB,CAA2BgF,YAA3B,CAAyC7G,EAAzC,CAAP,CACD,CAED8G,4BAA6BzF,UAA7B,EAAiD0F,GAAjD,EAAqEC,GAArE,EAAmF,CACjF,MAAMtF,mBAAmBtB,kBAAkBiB,UAAlB,CAAzB,CADiF,CAGjF;AACA,UAAM4F,SAASvF,iBAAiBG,SAAjB,CAA2BgF,YAA3B,CAAyCG,IAAIhH,EAA7C,CAAf,CAJiF,CAMjF;AACA;AACA,SAAM,IAAI2F,KAAK,CAAf,EAAkBA,KAAKoB,IAAInB,MAA3B,EAAmCD,IAAnC,EAA0C,CACxC,MAAMuB,iBAAiBxF,iBAAiBG,SAAjB,CAA2BgF,YAA3B,CAAyCE,IAAIpB,EAAJ,EAAQ3F,EAAjD,CAAvB,CACA,IAAKkH,mBAAmBD,MAAxB,EAAiC,CAC/BF,IAAIpB,EAAJ,IAAUqB,GAAV,CACA,MACD,CACF,CACD,IAAIG,SAAS,+CAA6BJ,GAA7B,EAAkCC,GAAlC,CAAb,CACA,IAAKG,UAAU,IAAf,EACExC,cAAIA,GAAJ,CACE,OADF,EAEE,0EAA0EtD,UAF5E,EAGE,EACE2F,GADF,EAEED,GAFF,EAHF,EAQF,OAAOI,MAAP,CACD,CAED,OAAOC,oBAAP,CAA6BC,wBAA7B,EAAgEC,EAAhE,EAAqF,CACnF,KAAM,IAAI/F,SAAV,IAAuBlB,aAAvB,EACEkB,UAAUgG,UAAV,CAAsBF,wBAAtB,EAAgD,MAAM,CACpDC,KACD,CAFD,EAGH,CAxegC,C,kBAAd7G,a,EA2erB;AACAA,cAAcW,cAAd,CAA8B,MAA9B,EAAsCzB,cAAtC,E,CAEA;AACO,eAAeF,gBAAf,CAAiC6D,GAAjC,EAA8CC,GAA9C,EAAoF,CACzF;AACA,QAAMtC,kBAAkB,MAAM,sCAAoBqC,GAApB,EAAyBC,GAAzB,CAA9B,CAFyF,CAE5B;AAC7D,QAAMiE,gBAAgB,IAAI/G,aAAJ,EAAtB,CAHyF,CAG/C;AAE1C+G,gBAAcnE,UAAd,CAA0BC,GAA1B,EAA+BC,GAA/B,EALyF,CAKpD;AACrCiE,gBAAchE,kBAAd,CAAkCvC,eAAlC,EACA,OAAOuG,aAAP,CACD","file":"ObjectManager.js","sourcesContent":["// @flow\n\nimport DataLoader from 'dataloader'\nimport { cursorForObjectInConnection } from 'graphql-relay'\n\nimport UserToken2Anonymous from '../_configuration/urb-base-server/UserToken2Anonymous'\nimport defaultPersister from '../_configuration/urb-base-server/graphql/defaultPersister'\nimport getNewUser from '../_configuration/urb-base-server/graphql/model/getNewUser'\nimport { getSiteInformation } from '../_configuration/urb-base-server/siteSettings'\nimport User from '../_configuration/urb-base-server/graphql/model/User'\n\nimport log from './log'\n\n// Anonymous user\nconst User_0 = new User(\n  Object.assign( getNewUser( defaultPersister.uuidNull() ), {\n    id: defaultPersister.uuidNull(),\n    UserToken2: UserToken2Anonymous,\n    User_DisplayName: 'Anonymous',\n  }),\n)\n\nexport { User_0 }\n\n// Type of entity definition\ntype EntityDefinition = {\n  EntityName: string,\n  EntityType: Function,\n  fieldsWithSuffix: { [string]: boolean },\n  Persister: Object,\n  TriggersForAdd: Array<Function>,\n  TriggersForUpdate: Array<Function>,\n  TriggersForRemove: Array<Function>,\n  TriggersForUpdateShouldRetrieveCurrentRecord: boolean,\n}\n\n// Static set of entity definitions\nconst entityDefinitions: {\n  [string]: EntityDefinition,\n} = {}\n\n// Static array of object managers\nconst setPersisters = new Set()\n\n// Value for a change indicating that the record is deleted\nconst deletedRecord = {\n  deleted: true,\n}\n\nexport default class ObjectManager {\n  loadersSingle: Object\n  loadersMultiple: Object\n  Viewer_User_id: string\n  changes: Object\n  request: ?Object\n  response: ?Object\n  siteInformation: { artifact_id: string, siteConfiguration: Object }\n\n  constructor() {\n    // Loaders for a single record, by entity name\n    this.loadersSingle = {}\n\n    // Loaders for a multiple record lists, by entity name\n    this.loadersMultiple = {}\n\n    // Changes made to records, by entity name\n    this.changes = {}\n\n    // UserID for the viewer. Could be unset if ObjectManager is used by system\n    this.Viewer_User_id = 'Object Manager: viewer user id has not been set'\n\n    // Request and response objects, if available\n    this.request = null\n    this.response = null\n\n    // Setting site information mostly to satify flow;\n    // also, in order to be able to better detect errors when not set\n    this.siteInformation = {\n      artifact_id: 'Object Manager: artifact_id has not been set',\n      siteConfiguration: {},\n    }\n  }\n\n  static registerEntity( entityName: string, EntityType: Function, persister: any ): void {\n    if ( entityName in entityDefinitions ) throw new Error( 'Entity already registered: ' + entityName )\n\n    // In order to be able to access the name as a static property of the type\n    EntityType.entityName = entityName\n\n    // Determine persister - default, or otherwise\n    if ( persister == null ) persister = defaultPersister\n\n    // A set would retain only one copy of a persister\n    setPersisters.add( persister )\n\n    const entityDefinition = {\n      EntityName: entityName,\n      EntityType,\n      fieldsWithSuffix: {},\n      Persister: persister,\n      TriggersForAdd: [],\n      TriggersForUpdate: [],\n      TriggersForRemove: [],\n      TriggersForUpdateShouldRetrieveCurrentRecord: false,\n    }\n\n    // Determine fields by fields with suffix\n    // For the User-related tables, there is no automatic support:\n    // User_id and artifact_id have to be explicitly specified\n    if ( entityName !== 'User' && entityName !== 'UserAccount' && entityName !== 'UserSession' ) {\n      const example = new EntityType({})\n      for ( let suffix of [\n        '_artifact_id',\n        '_user_id',\n        '_created_by',\n        '_created_on',\n        '_modified_on',\n        '_modified_by',\n      ]) {\n        const fieldName = entityDefinition.EntityName + suffix\n\n        // Does the object type have it?\n        if ( example.hasOwnProperty( fieldName ) ) {\n          entityDefinition.fieldsWithSuffix[suffix] = true\n        }\n      }\n    }\n\n    entityDefinitions[entityName] = entityDefinition\n  }\n\n  static RegisterTriggerForAdd( entityName: string, handler: Function ): void {\n    entityDefinitions[entityName].TriggersForAdd.push( handler )\n  }\n\n  static RegisterTriggerForUpdate(\n    entityName: string,\n    handler: Function,\n    shouldRetrieveCurrentRecord: boolean,\n  ): void {\n    entityDefinitions[entityName].TriggersForUpdate.push( handler )\n\n    if ( shouldRetrieveCurrentRecord )\n      entityDefinitions[entityName].TriggersForUpdateShouldRetrieveCurrentRecord = true\n  }\n\n  static RegisterTriggerForAddAndUpdate( entityName: string, handler: Function ): void {\n    ObjectManager.RegisterTriggerForAdd( entityName, handler )\n    ObjectManager.RegisterTriggerForUpdate( entityName, handler, false )\n  }\n\n  static RegisterTriggerForRemove( entityName: string, handler: any ) {\n    entityDefinitions[entityName].TriggersForRemove.push( handler )\n  }\n\n  // Apply artifact_id, User_id security\n  addUserIdAndOrSiteIdToFilterOrFields( entityDefinition: EntityDefinition, filterOrFields: Object ) {\n    for ( let suffix of [ '_artifact_id', '_user_id' ]) {\n      // Does the object type have it?\n      if ( entityDefinition.fieldsWithSuffix[suffix]) {\n        const fieldName = entityDefinition.EntityName + suffix\n\n        // Is the filter/fields collection missing it?\n        if ( !filterOrFields.hasOwnProperty( fieldName ) )\n          filterOrFields[fieldName] =\n            suffix === '_artifact_id' ? this.siteInformation.artifact_id : this.Viewer_User_id\n      }\n    }\n  }\n\n  // Update created and modified fields\n  updatedCreatedAndModifiedFields(\n    entityDefinition: EntityDefinition,\n    fields: Object,\n    isCreating: boolean,\n  ) {\n    const dtNow = new Date()\n\n    for ( let suffix of isCreating\n      ? [ '_created_by', '_created_on', '_modified_on', '_modified_by' ]\n      : [ '_modified_on', '_modified_by' ]) {\n      // Does the object type have it?\n      if ( entityDefinition.fieldsWithSuffix[suffix]) {\n        const fieldName = entityDefinition.EntityName + suffix\n\n        // Is the filter/fields collection missing it?\n        if ( !fields.hasOwnProperty( fieldName ) )\n          fields[fieldName] =\n            suffix === '_modified_by' || suffix === '_created_by' ? this.Viewer_User_id : dtNow\n      }\n    }\n  }\n\n  setViewerUserId( Viewer_User_id: string ): void {\n    this.Viewer_User_id = Viewer_User_id\n  }\n\n  setRequest( req: any, res: any ): void {\n    this.request = req\n    this.response = res\n  }\n\n  setSiteInformation( siteInformation: Object ): void {\n    this.siteInformation = siteInformation\n  }\n\n  getLoadersSingle( entityName: string ) {\n    const foundLoaders = this.loadersSingle[entityName]\n\n    if ( foundLoaders != null ) {\n      return foundLoaders\n    } else {\n      this.loadersSingle[entityName] = {}\n      return this.loadersSingle[entityName]\n    }\n  }\n\n  getLoadersMultiple( entityName: string ) {\n    const foundLoaders = this.loadersMultiple[entityName]\n\n    if ( foundLoaders != null ) {\n      return foundLoaders\n    } else {\n      this.loadersMultiple[entityName] = {}\n      return this.loadersMultiple[entityName]\n    }\n  }\n\n  clearLoadersMultiple( entityName: string ) {\n    this.loadersMultiple[entityName] = {}\n  }\n\n  recordChange( entityName: string, fields: Object, isDeletion: boolean ) {\n    let records = this.changes[entityName]\n    if ( records == null ) records = this.changes[entityName] = {}\n\n    const id = fields.id\n\n    records[id] = isDeletion ? deletedRecord : fields\n  }\n\n  getViewerUserId(): string {\n    if ( this.Viewer_User_id === 'Object Manager: viewer user id has not been set' )\n      throw new Error( 'Object Manager: viewer user id has not been set' )\n\n    return this.Viewer_User_id\n  }\n\n  getRequest(): any {\n    if ( this.request == null ) throw new Error( 'Object Manager: request has not been set' )\n\n    return this.request\n  }\n\n  getLoader( entityName: string, fieldName: string, multipleResults: boolean ) {\n    if ( !( entityName in entityDefinitions ) )\n      throw new Error( 'Can not find entity type named ' + entityName )\n\n    const entityDefinition = entityDefinitions[entityName]\n    const entityType = entityDefinition.EntityType\n\n    let loadersList = multipleResults\n      ? this.getLoadersMultiple( entityName )\n      : this.getLoadersSingle( entityName )\n\n    let loader = loadersList[fieldName]\n    if ( loader == null ) {\n      if ( multipleResults )\n        loader = new DataLoader( filter => {\n          try {\n            return entityDefinition.Persister.getObjectList( entityName, entityType, filter )\n          } catch ( err ) {\n            log.log( 'error', 'Object Manager: Could not load multiple results ' + entityName, {\n              fieldName,\n              err,\n              stack: err.stack,\n            })\n            throw err\n          }\n        })\n      else\n        loader = new DataLoader( filter => {\n          try {\n            return entityDefinition.Persister.getOneObject( entityName, entityType, filter )\n          } catch ( err ) {\n            log.log( 'error', 'Object Manager: Could not load single result ' + entityName, {\n              fieldName,\n              err,\n              stack: err.stack,\n            })\n            throw err\n          }\n        })\n\n      loadersList[fieldName] = loader\n    }\n\n    return loader\n  }\n\n  getOneObject( entityName: string, query: Object ): Promise<User> {\n    // Special hack for anonymous users\n    if ( entityName === 'User' )\n      if ( defaultPersister.uuidEquals( defaultPersister.uuidNull(), query.id ) )\n        return Promise.resolve( User_0 )\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinitions[entityName], query )\n\n    // For all non-user, non 0 ids, load from data loader per protocol\n    const loaderIdentifier = Object.keys( query )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, false )\n\n    return loader.load( query ).then( result => {\n      const changes = this.changes[entityName]\n      if ( changes ) {\n        // $AssureFlow - by convention all entity objects are expected to have an id\n        const change = changes[result.id]\n\n        if ( change != null ) {\n          // Object is not found, return null if deleted\n          if ( change === deletedRecord ) {\n            result = null\n          } else {\n            // Add or update\n            Object.assign( result, change )\n          }\n        }\n      }\n      return result\n    })\n  }\n\n  getObjectList( entityName: string, query: Object ) {\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinitions[entityName], query )\n\n    const loaderIdentifier = Object.keys( query )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, true )\n\n    return loader.load( query ).then( arrResults => {\n      const changes = this.changes[entityName]\n      if ( changes ) {\n        for ( let ix = 0; ix < arrResults.length; ix++ ) {\n          const change = changes[arrResults[ix].id]\n          if ( change != null ) {\n            if ( change === deletedRecord )\n              // Reduce ix in order not to skip over a record\n              arrResults.splice( ix--, 1 )\n            // Add or update\n            else Object.assign( arrResults[ix], change )\n          }\n        }\n      }\n      return arrResults\n    })\n  }\n\n  invalidateLoaderCache( entityName: string, fields: any ) {\n    // At this moment there is no obvious way of knowing what to clear from lists, so delete them all\n    this.clearLoadersMultiple( entityName )\n\n    const loadersSingle = this.getLoadersSingle( entityName )\n    for ( let loaderFieldName in loadersSingle ) {\n      if ( loaderFieldName === 'id' ) loadersSingle[loaderFieldName].clear( fields.id )\n      else delete loadersSingle[loaderFieldName]\n    }\n  }\n\n  executeTriggers( arrTriggers: Array<Function>, fields: Object, oldFields: ?Object ) {\n    const arrPromises = []\n    for ( let trigger of arrTriggers ) {\n      arrPromises.push( trigger( this, fields, oldFields ) )\n    }\n\n    return Promise.all( arrPromises )\n  }\n\n  assignPrimaryKey( entityName: string, fields: any ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Generate primary key, overwrite if already present\n    fields.id = entityDefinition.Persister.uuidRandom()\n  }\n\n  async add( entityName: string, fields: Object ): any {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fields )\n\n    // Update created and modified fields\n    this.updatedCreatedAndModifiedFields( entityDefinition, fields, true )\n\n    // Generate primary key, if not already present\n    if ( !fields.id ) fields.id = entityDefinition.Persister.uuidRandom()\n\n    // If this is a user ID\n    if ( entityName === 'User' ) this.setViewerUserId( fields.id.toString() )\n\n    this.recordChange( entityName, fields, false )\n\n    try {\n      await this.executeTriggers( entityDefinition.TriggersForAdd, fields )\n\n      await entityDefinition.Persister.add( entityName, fields, entityDefinition.EntityType )\n    } catch ( err ) {\n      log.log( 'error', 'Object Manager: Could not add ' + entityName, {\n        fields,\n        err,\n        stack: err.stack,\n      })\n      throw err\n    }\n\n    this.invalidateLoaderCache( entityName, fields )\n\n    return fields.id\n  }\n\n  async update( entityName: string, fields: Object ): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    try {\n      // Apply artifact_id, User_id security\n      this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fields )\n\n      // Update created and modified fields\n      this.updatedCreatedAndModifiedFields( entityDefinition, fields, false )\n\n      // Retrieve the current values, if triggers will be used\n      let oldFields = null\n      if ( entityDefinition.TriggersForUpdateShouldRetrieveCurrentRecord ) {\n        oldFields = this.getOneObject( entityName, {\n          id: fields.id,\n        })\n      }\n\n      this.recordChange( entityName, fields, false )\n\n      await this.executeTriggers( entityDefinition.TriggersForUpdate, fields, oldFields )\n\n      await entityDefinition.Persister.update( entityName, fields )\n    } catch ( err ) {\n      log.log( 'error', 'Object Manager: Could not update ' + entityName, {\n        fields,\n        err,\n        stack: err.stack,\n      })\n      throw err\n    }\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  async remove( entityName: string, fields: Object ): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    try {\n      // Apply artifact_id, User_id security\n      this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fields )\n\n      this.recordChange( entityName, fields, true )\n\n      await this.executeTriggers( entityDefinition.TriggersForRemove, fields )\n\n      await entityDefinition.Persister.remove( entityName, fields )\n    } catch ( err ) {\n      log.log( 'error', 'Object Manager: Could not remove ' + entityName, {\n        fields,\n        err,\n        stack: err.stack,\n      })\n      throw err\n    }\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  uuidFromString( entityName: string, id: string ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    return entityDefinition.Persister.uuidFromString( id )\n  }\n\n  uuidToString( entityName: string, id: Object ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    return entityDefinition.Persister.uuidToString( id )\n  }\n\n  cursorForObjectInConnection( entityName: string, arr: Array<Object>, obj: Object ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    // IDs can be both strings and Uuid. Check that first, and convert to String\n    const obj_id = entityDefinition.Persister.uuidToString( obj.id )\n\n    // Make sure that the object and its instance can be compared with ===\n    // assumed that the object has id field which is unique\n    for ( let ix = 0; ix < arr.length; ix++ ) {\n      const arr_element_id = entityDefinition.Persister.uuidToString( arr[ix].id )\n      if ( arr_element_id === obj_id ) {\n        arr[ix] = obj\n        break\n      }\n    }\n    let cursor = cursorForObjectInConnection( arr, obj )\n    if ( cursor == null )\n      log.log(\n        'error',\n        'Object Manager: Could not create cursor for object in connection for ' + entityName,\n        {\n          obj,\n          arr,\n        },\n      )\n    return cursor\n  }\n\n  static initializePersisters( runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n    for ( let persister of setPersisters )\n      persister.initialize( runAsPartOfSetupDatabase, () => {\n        cb()\n      })\n  }\n}\n\n// Register the user\nObjectManager.registerEntity( 'User', User )\n\n// Get an Object Manager with site information\nexport async function getObjectManager( req: Object, res: Object ): Promise<ObjectManager> {\n  // Set site information\n  const siteInformation = await getSiteInformation( req, res ) // Create individual object manager for each request\n  const objectManager = new ObjectManager() // Set request and response\n\n  objectManager.setRequest( req, res ) // Place maker configuration into object manager\n  objectManager.setSiteInformation( siteInformation )\n  return objectManager\n}\n"]}