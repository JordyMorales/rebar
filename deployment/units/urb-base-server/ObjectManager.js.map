{"version":3,"sources":["../../../units/urb-base-server/ObjectManager.js"],"names":["User_0","User","Object","assign","defaultPersister","uuidNull","id","UserToken2","UserToken2Anonymous","User_DisplayName","entityDefinitions","setPersisters","Set","deletedRecord","deleted","ObjectManager","constructor","loadersSingle","loadersMultiple","changes","Viewer_User_id","request","response","siteInformation","artifact_id","siteConfiguration","registerEntity","entityName","EntityType","persister","Error","add","entityDefinition","EntityName","fieldsWithSuffix","Persister","TriggersForAdd","TriggersForUpdate","TriggersForRemove","TriggersForUpdateShouldRetrieveCurrentRecord","example","suffix","fieldName","hasOwnProperty","RegisterTriggerForAdd","handler","push","RegisterTriggerForUpdate","shouldRetrieveCurrentRecord","RegisterTriggerForAddAndUpdate","RegisterTriggerForRemove","addUserIdAndOrSiteIdToFilterOrFields","filterOrFields","updatedCreatedAndModifiedFields","fields","isCreating","dtNow","Date","setViewerUserId","setRequest","req","res","setSiteInformation","getLoadersSingle","foundLoaders","getLoadersMultiple","clearLoadersMultiple","recordChange","isDeletion","records","getViewerUserId","getRequest","getLoader","multipleResults","entityType","loadersList","loader","DataLoader","filter","getObjectList","err","log","stack","getOneObject","query","uuidEquals","Promise","resolve","loaderIdentifier","keys","sort","join","load","then","result","change","arrResults","ix","length","splice","invalidateLoaderCache","loaderFieldName","clear","executeTriggers","arrTriggers","oldFields","arrPromises","trigger","all","assignPrimaryKey","uuidRandom","toString","update","remove","uuidFromString","uuidToString","cursorForObjectInConnection","arr","obj","obj_id","arr_element_id","cursor","initializePersisters","runAsPartOfSetupDatabase","cb","initialize","getObjectManager","objectManager"],"mappings":";;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oD;;AAEA;AACA,MAAMA,MAAM,GAAG,IAAIC,aAAJ;AACbC,MAAM,CAACC,MAAP,CAAe,yBAAYC,0BAAiBC,QAAjB,EAAZ,CAAf,EAA0D;AACxDC,EAAAA,EAAE,EAAEF,0BAAiBC,QAAjB,EADoD;AAExDE,EAAAA,UAAU,EAAEC,4BAF4C;AAGxDC,EAAAA,gBAAgB,EAAE,WAHsC,EAA1D,CADa,CAAf,C;;;;;;;;;;;;;;;;;;AAsBA;AACA,MAAMC,iBAEL;;AAAG,EAFJ;;AAIA;AACA,MAAMC,aAAa,GAAG,IAAIC,GAAJ,EAAtB;;AAEA;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,OAAO,EAAE,IADW,EAAtB;;;AAIe,MAAMC,aAAN,CAAoB;;;;;;;;;AASjCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,aAAL,GAAqB,EAArB;;AAEA;AACA,SAAKC,eAAL,GAAuB,EAAvB;;AAEA;AACA,SAAKC,OAAL,GAAe,EAAf;;AAEA;AACA,SAAKC,cAAL,GAAsB,iDAAtB;;AAEA;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,QAAL,GAAgB,IAAhB;;AAEA;AACA;AACA,SAAKC,eAAL,GAAuB;AACrBC,MAAAA,WAAW,EAAE,8CADQ;AAErBC,MAAAA,iBAAiB,EAAE,EAFE,EAAvB;;AAID;;AAED,SAAOC,cAAP,CAAuBC,UAAvB,EAA2CC,UAA3C,EAAiEC,SAAjE,EAAwF;AACtF,QAAKF,UAAU,IAAIjB,iBAAnB,EAAuC,MAAM,IAAIoB,KAAJ,CAAW,gCAAgCH,UAA3C,CAAN;;AAEvC;AACAC,IAAAA,UAAU,CAACD,UAAX,GAAwBA,UAAxB;;AAEA;AACA,QAAKE,SAAS,IAAI,IAAlB,EAAyBA,SAAS,GAAGzB,yBAAZ;;AAEzB;AACAO,IAAAA,aAAa,CAACoB,GAAd,CAAmBF,SAAnB;;AAEA,UAAMG,gBAAgB,GAAG;AACvBC,MAAAA,UAAU,EAAEN,UADW;AAEvBC,MAAAA,UAFuB;AAGvBM,MAAAA,gBAAgB,EAAE,EAHK;AAIvBC,MAAAA,SAAS,EAAEN,SAJY;AAKvBO,MAAAA,cAAc,EAAE,EALO;AAMvBC,MAAAA,iBAAiB,EAAE,EANI;AAOvBC,MAAAA,iBAAiB,EAAE,EAPI;AAQvBC,MAAAA,4CAA4C,EAAE;;;AAGhD;AACA;AACA;AAbyB,KAAzB,CAcA,IAAKZ,UAAU,KAAK,MAAf,IAAyBA,UAAU,KAAK,aAAxC,IAAyDA,UAAU,KAAK,aAA7E,EAA6F;AAC3F,YAAMa,OAAO,GAAG,IAAIZ,UAAJ,CAAe,EAAf,CAAhB;AACA,WAAM,IAAIa,MAAV,IAAoB;AAClB,oBADkB;AAElB,gBAFkB;AAGlB,mBAHkB;AAIlB,mBAJkB;AAKlB,oBALkB;AAMlB,oBANkB,CAApB;AAOG;AACD,cAAMC,SAAS,GAAGV,gBAAgB,CAACC,UAAjB,GAA8BQ,MAAhD;;AAEA;AACA,YAAKD,OAAO,CAACG,cAAR,CAAwBD,SAAxB,CAAL,EAA2C;AACzCV,UAAAA,gBAAgB,CAACE,gBAAjB,CAAkCO,MAAlC,IAA4C,IAA5C;AACD;AACF;AACF;;AAED/B,IAAAA,iBAAiB,CAACiB,UAAD,CAAjB,GAAgCK,gBAAhC;AACD;;AAED,SAAOY,qBAAP,CAA8BjB,UAA9B,EAAkDkB,OAAlD,EAA4E;AAC1EnC,IAAAA,iBAAiB,CAACiB,UAAD,CAAjB,CAA8BS,cAA9B,CAA6CU,IAA7C,CAAmDD,OAAnD;AACD;;AAED,SAAOE,wBAAP;AACEpB,EAAAA,UADF;AAEEkB,EAAAA,OAFF;AAGEG,EAAAA,2BAHF;AAIQ;AACNtC,IAAAA,iBAAiB,CAACiB,UAAD,CAAjB,CAA8BU,iBAA9B,CAAgDS,IAAhD,CAAsDD,OAAtD;;AAEA,QAAKG,2BAAL;AACEtC,IAAAA,iBAAiB,CAACiB,UAAD,CAAjB,CAA8BY,4CAA9B,GAA6E,IAA7E;AACH;;AAED,SAAOU,8BAAP,CAAuCtB,UAAvC,EAA2DkB,OAA3D,EAAqF;AACnF9B,IAAAA,aAAa,CAAC6B,qBAAd,CAAqCjB,UAArC,EAAiDkB,OAAjD;AACA9B,IAAAA,aAAa,CAACgC,wBAAd,CAAwCpB,UAAxC,EAAoDkB,OAApD,EAA6D,KAA7D;AACD;;AAED,SAAOK,wBAAP,CAAiCvB,UAAjC,EAAqDkB,OAArD,EAAoE;AAClEnC,IAAAA,iBAAiB,CAACiB,UAAD,CAAjB,CAA8BW,iBAA9B,CAAgDQ,IAAhD,CAAsDD,OAAtD;AACD;;AAED;AACAM,EAAAA,oCAAoC,CAAEnB,gBAAF,EAAsCoB,cAAtC,EAA+D;AACjG,SAAM,IAAIX,MAAV,IAAoB,CAAE,cAAF,EAAkB,UAAlB,CAApB,EAAoD;AAClD;AACA,UAAKT,gBAAgB,CAACE,gBAAjB,CAAkCO,MAAlC,CAAL,EAAgD;AAC9C,cAAMC,SAAS,GAAGV,gBAAgB,CAACC,UAAjB,GAA8BQ,MAAhD;;AAEA;AACA,YAAK,CAACW,cAAc,CAACT,cAAf,CAA+BD,SAA/B,CAAN;AACEU,QAAAA,cAAc,CAACV,SAAD,CAAd;AACED,QAAAA,MAAM,KAAK,cAAX,GAA4B,KAAKlB,eAAL,CAAqBC,WAAjD,GAA+D,KAAKJ,cADtE;AAEH;AACF;AACF;;AAED;AACAiC,EAAAA,+BAA+B;AAC7BrB,EAAAA,gBAD6B;AAE7BsB,EAAAA,MAF6B;AAG7BC,EAAAA,UAH6B;AAI7B;AACA,UAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;;AAEA,SAAM,IAAIhB,MAAV,IAAoBc,UAAU;AAC1B,KAAE,aAAF,EAAiB,aAAjB,EAAgC,cAAhC,EAAgD,cAAhD,CAD0B;AAE1B,KAAE,cAAF,EAAkB,cAAlB,CAFJ,EAEwC;AACtC;AACA,UAAKvB,gBAAgB,CAACE,gBAAjB,CAAkCO,MAAlC,CAAL,EAAgD;AAC9C,cAAMC,SAAS,GAAGV,gBAAgB,CAACC,UAAjB,GAA8BQ,MAAhD;;AAEA;AACA,YAAK,CAACa,MAAM,CAACX,cAAP,CAAuBD,SAAvB,CAAN;AACEY,QAAAA,MAAM,CAACZ,SAAD,CAAN;AACED,QAAAA,MAAM,KAAK,cAAX,IAA6BA,MAAM,KAAK,aAAxC,GAAwD,KAAKrB,cAA7D,GAA8EoC,KADhF;AAEH;AACF;AACF;;AAEDE,EAAAA,eAAe,CAAEtC,cAAF,EAAiC;AAC9C,SAAKA,cAAL,GAAsBA,cAAtB;AACD;;AAEDuC,EAAAA,UAAU,CAAEC,GAAF,EAAYC,GAAZ,EAA6B;AACrC,SAAKxC,OAAL,GAAeuC,GAAf;AACA,SAAKtC,QAAL,GAAgBuC,GAAhB;AACD;;AAEDC,EAAAA,kBAAkB,CAAEvC,eAAF,EAAkC;AAClD,SAAKA,eAAL,GAAuBA,eAAvB;AACD;;AAEDwC,EAAAA,gBAAgB,CAAEpC,UAAF,EAAuB;AACrC,UAAMqC,YAAY,GAAG,KAAK/C,aAAL,CAAmBU,UAAnB,CAArB;;AAEA,QAAKqC,YAAY,IAAI,IAArB,EAA4B;AAC1B,aAAOA,YAAP;AACD,KAFD,MAEO;AACL,WAAK/C,aAAL,CAAmBU,UAAnB,IAAiC,EAAjC;AACA,aAAO,KAAKV,aAAL,CAAmBU,UAAnB,CAAP;AACD;AACF;;AAEDsC,EAAAA,kBAAkB,CAAEtC,UAAF,EAAuB;AACvC,UAAMqC,YAAY,GAAG,KAAK9C,eAAL,CAAqBS,UAArB,CAArB;;AAEA,QAAKqC,YAAY,IAAI,IAArB,EAA4B;AAC1B,aAAOA,YAAP;AACD,KAFD,MAEO;AACL,WAAK9C,eAAL,CAAqBS,UAArB,IAAmC,EAAnC;AACA,aAAO,KAAKT,eAAL,CAAqBS,UAArB,CAAP;AACD;AACF;;AAEDuC,EAAAA,oBAAoB,CAAEvC,UAAF,EAAuB;AACzC,SAAKT,eAAL,CAAqBS,UAArB,IAAmC,EAAnC;AACD;;AAEDwC,EAAAA,YAAY,CAAExC,UAAF,EAAsB2B,MAAtB,EAAsCc,UAAtC,EAA4D;AACtE,QAAIC,OAAO,GAAG,KAAKlD,OAAL,CAAaQ,UAAb,CAAd;AACA,QAAK0C,OAAO,IAAI,IAAhB,EAAuBA,OAAO,GAAG,KAAKlD,OAAL,CAAaQ,UAAb,IAA2B,EAArC;;AAEvB,UAAMrB,EAAE,GAAGgD,MAAM,CAAChD,EAAlB;;AAEA+D,IAAAA,OAAO,CAAC/D,EAAD,CAAP,GAAc8D,UAAU,GAAGvD,aAAH,GAAmByC,MAA3C;AACD;;AAEDgB,EAAAA,eAAe,GAAW;AACxB,QAAK,KAAKlD,cAAL,KAAwB,iDAA7B;AACE,UAAM,IAAIU,KAAJ,CAAW,iDAAX,CAAN;;AAEF,WAAO,KAAKV,cAAZ;AACD;;AAEDmD,EAAAA,UAAU,GAAQ;AAChB,QAAK,KAAKlD,OAAL,IAAgB,IAArB,EAA4B,MAAM,IAAIS,KAAJ,CAAW,0CAAX,CAAN;;AAE5B,WAAO,KAAKT,OAAZ;AACD;;AAEDmD,EAAAA,SAAS,CAAE7C,UAAF,EAAsBe,SAAtB,EAAyC+B,eAAzC,EAAoE;AAC3E,QAAK,EAAG9C,UAAU,IAAIjB,iBAAjB,CAAL;AACE,UAAM,IAAIoB,KAAJ,CAAW,oCAAoCH,UAA/C,CAAN;;AAEF,UAAMK,gBAAgB,GAAGtB,iBAAiB,CAACiB,UAAD,CAA1C;AACA,UAAM+C,UAAU,GAAG1C,gBAAgB,CAACJ,UAApC;;AAEA,QAAI+C,WAAW,GAAGF,eAAe;AAC7B,SAAKR,kBAAL,CAAyBtC,UAAzB,CAD6B;AAE7B,SAAKoC,gBAAL,CAAuBpC,UAAvB,CAFJ;;AAIA,QAAIiD,MAAM,GAAGD,WAAW,CAACjC,SAAD,CAAxB;AACA,QAAKkC,MAAM,IAAI,IAAf,EAAsB;AACpB,UAAKH,eAAL;AACEG,MAAAA,MAAM,GAAG,IAAIC,mBAAJ,CAAgBC,MAAM,IAAI;AACjC,YAAI;AACF,iBAAO9C,gBAAgB,CAACG,SAAjB,CAA2B4C,aAA3B,CAA0CpD,UAA1C,EAAsD+C,UAAtD,EAAkEI,MAAlE,CAAP;AACD,SAFD,CAEE,OAAQE,GAAR,EAAc;AACdC,uBAAIA,GAAJ,CAAS,OAAT,EAAkB,qDAAqDtD,UAAvE,EAAmF;AACjFe,YAAAA,SADiF;AAEjFsC,YAAAA,GAFiF;AAGjFE,YAAAA,KAAK,EAAEF,GAAG,CAACE,KAHsE,EAAnF;;AAKA,gBAAMF,GAAN;AACD;AACF,OAXQ,CAAT,CADF;;AAcEJ,MAAAA,MAAM,GAAG,IAAIC,mBAAJ,CAAgBC,MAAM,IAAI;AACjC,YAAI;AACF,iBAAO9C,gBAAgB,CAACG,SAAjB,CAA2BgD,YAA3B,CAAyCxD,UAAzC,EAAqD+C,UAArD,EAAiEI,MAAjE,CAAP;AACD,SAFD,CAEE,OAAQE,GAAR,EAAc;AACdC,uBAAIA,GAAJ,CAAS,OAAT,EAAkB,kDAAkDtD,UAApE,EAAgF;AAC9Ee,YAAAA,SAD8E;AAE9EsC,YAAAA,GAF8E;AAG9EE,YAAAA,KAAK,EAAEF,GAAG,CAACE,KAHmE,EAAhF;;AAKA,gBAAMF,GAAN;AACD;AACF,OAXQ,CAAT;;AAaFL,MAAAA,WAAW,CAACjC,SAAD,CAAX,GAAyBkC,MAAzB;AACD;;AAED,WAAOA,MAAP;AACD;;AAEDO,EAAAA,YAAY,CAAExD,UAAF,EAAsByD,KAAtB,EAAqD;AAC/D;AACA,QAAKzD,UAAU,KAAK,MAApB;AACE,QAAKvB,0BAAiBiF,UAAjB,CAA6BjF,0BAAiBC,QAAjB,EAA7B,EAA0D+E,KAAK,CAAC9E,EAAhE,CAAL;AACE,WAAOgF,OAAO,CAACC,OAAR,CAAiBvF,MAAjB,CAAP;;AAEJ;AACA,SAAKmD,oCAAL,CAA2CzC,iBAAiB,CAACiB,UAAD,CAA5D,EAA0EyD,KAA1E;;AAEA;AACA,UAAMI,gBAAgB,GAAGtF,MAAM,CAACuF,IAAP,CAAaL,KAAb;AACtBM,IAAAA,IADsB;AAEtBC,IAAAA,IAFsB,CAEhB,GAFgB,CAAzB;AAGA,UAAMf,MAAM,GAAG,KAAKJ,SAAL,CAAgB7C,UAAhB,EAA4B6D,gBAA5B,EAA8C,KAA9C,CAAf;;AAEA,WAAOZ,MAAM,CAACgB,IAAP,CAAaR,KAAb,EAAqBS,IAArB,CAA2BC,MAAM,IAAI;AAC1C,YAAM3E,OAAO,GAAG,KAAKA,OAAL,CAAaQ,UAAb,CAAhB;AACA,UAAKR,OAAL,EAAe;AACb;AACA,cAAM4E,MAAM,GAAG5E,OAAO,CAAC2E,MAAM,CAACxF,EAAR,CAAtB;;AAEA,YAAKyF,MAAM,IAAI,IAAf,EAAsB;AACpB;AACA,cAAKA,MAAM,KAAKlF,aAAhB,EAAgC;AAC9BiF,YAAAA,MAAM,GAAG,IAAT;AACD,WAFD,MAEO;AACL;AACA5F,YAAAA,MAAM,CAACC,MAAP,CAAe2F,MAAf,EAAuBC,MAAvB;AACD;AACF;AACF;AACD,aAAOD,MAAP;AACD,KAjBM,CAAP;AAkBD;;AAEDf,EAAAA,aAAa,CAAEpD,UAAF,EAAsByD,KAAtB,EAAsC;AACjD;AACA,SAAKjC,oCAAL,CAA2CzC,iBAAiB,CAACiB,UAAD,CAA5D,EAA0EyD,KAA1E;;AAEA,UAAMI,gBAAgB,GAAGtF,MAAM,CAACuF,IAAP,CAAaL,KAAb;AACtBM,IAAAA,IADsB;AAEtBC,IAAAA,IAFsB,CAEhB,GAFgB,CAAzB;AAGA,UAAMf,MAAM,GAAG,KAAKJ,SAAL,CAAgB7C,UAAhB,EAA4B6D,gBAA5B,EAA8C,IAA9C,CAAf;;AAEA,WAAOZ,MAAM,CAACgB,IAAP,CAAaR,KAAb,EAAqBS,IAArB,CAA2BG,UAAU,IAAI;AAC9C,YAAM7E,OAAO,GAAG,KAAKA,OAAL,CAAaQ,UAAb,CAAhB;AACA,UAAKR,OAAL,EAAe;AACb,aAAM,IAAI8E,EAAE,GAAG,CAAf,EAAkBA,EAAE,GAAGD,UAAU,CAACE,MAAlC,EAA0CD,EAAE,EAA5C,EAAiD;AAC/C,gBAAMF,MAAM,GAAG5E,OAAO,CAAC6E,UAAU,CAACC,EAAD,CAAV,CAAe3F,EAAhB,CAAtB;AACA,cAAKyF,MAAM,IAAI,IAAf,EAAsB;AACpB,gBAAKA,MAAM,KAAKlF,aAAhB;AACE;AACAmF,cAAAA,UAAU,CAACG,MAAX,CAAmBF,EAAE,EAArB,EAAyB,CAAzB;AACF;AAHA,iBAIK/F,MAAM,CAACC,MAAP,CAAe6F,UAAU,CAACC,EAAD,CAAzB,EAA+BF,MAA/B;AACN;AACF;AACF;AACD,aAAOC,UAAP;AACD,KAfM,CAAP;AAgBD;;AAEDI,EAAAA,qBAAqB,CAAEzE,UAAF,EAAsB2B,MAAtB,EAAoC;AACvD;AACA,SAAKY,oBAAL,CAA2BvC,UAA3B;;AAEA,UAAMV,aAAa,GAAG,KAAK8C,gBAAL,CAAuBpC,UAAvB,CAAtB;AACA,SAAM,IAAI0E,eAAV,IAA6BpF,aAA7B,EAA6C;AAC3C,UAAKoF,eAAe,KAAK,IAAzB,EAAgCpF,aAAa,CAACoF,eAAD,CAAb,CAA+BC,KAA/B,CAAsChD,MAAM,CAAChD,EAA7C,EAAhC;AACK,aAAOW,aAAa,CAACoF,eAAD,CAApB;AACN;AACF;;AAEDE,EAAAA,eAAe,CAAEC,WAAF,EAAgClD,MAAhC,EAAgDmD,SAAhD,EAAqE;AAClF,UAAMC,WAAW,GAAG,EAApB;AACA,SAAM,IAAIC,OAAV,IAAqBH,WAArB,EAAmC;AACjCE,MAAAA,WAAW,CAAC5D,IAAZ,CAAkB6D,OAAO,CAAE,IAAF,EAAQrD,MAAR,EAAgBmD,SAAhB,CAAzB;AACD;;AAED,WAAOnB,OAAO,CAACsB,GAAR,CAAaF,WAAb,CAAP;AACD;;AAEDG,EAAAA,gBAAgB,CAAElF,UAAF,EAAsB2B,MAAtB,EAAoC;AAClD,UAAMtB,gBAAgB,GAAGtB,iBAAiB,CAACiB,UAAD,CAA1C;;AAEA,QAAKK,gBAAgB,IAAI,IAAzB;AACE,UAAM,IAAIF,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN;;AAEF;AACA2B,IAAAA,MAAM,CAAChD,EAAP,GAAY0B,gBAAgB,CAACG,SAAjB,CAA2B2E,UAA3B,EAAZ;AACD;;AAED,QAAM/E,GAAN,CAAWJ,UAAX,EAA+B2B,MAA/B,EAAqD;AACnD,UAAMtB,gBAAgB,GAAGtB,iBAAiB,CAACiB,UAAD,CAA1C;AACA,QAAKK,gBAAgB,IAAI,IAAzB;AACE,UAAM,IAAIF,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN;;AAEF;AACA,SAAKwB,oCAAL,CAA2CnB,gBAA3C,EAA6DsB,MAA7D;;AAEA;AACA,SAAKD,+BAAL,CAAsCrB,gBAAtC,EAAwDsB,MAAxD,EAAgE,IAAhE;;AAEA;AACA,QAAK,CAACA,MAAM,CAAChD,EAAb,EAAkBgD,MAAM,CAAChD,EAAP,GAAY0B,gBAAgB,CAACG,SAAjB,CAA2B2E,UAA3B,EAAZ;;AAElB;AACA,QAAKnF,UAAU,KAAK,MAApB,EAA6B,KAAK+B,eAAL,CAAsBJ,MAAM,CAAChD,EAAP,CAAUyG,QAAV,EAAtB;;AAE7B,SAAK5C,YAAL,CAAmBxC,UAAnB,EAA+B2B,MAA/B,EAAuC,KAAvC;;AAEA,QAAI;AACF,YAAM,KAAKiD,eAAL,CAAsBvE,gBAAgB,CAACI,cAAvC,EAAuDkB,MAAvD,CAAN;;AAEA,YAAMtB,gBAAgB,CAACG,SAAjB,CAA2BJ,GAA3B,CAAgCJ,UAAhC,EAA4C2B,MAA5C,EAAoDtB,gBAAgB,CAACJ,UAArE,CAAN;AACD,KAJD,CAIE,OAAQoD,GAAR,EAAc;AACdC,mBAAIA,GAAJ,CAAS,OAAT,EAAkB,mCAAmCtD,UAArD,EAAiE;AAC/D2B,QAAAA,MAD+D;AAE/D0B,QAAAA,GAF+D;AAG/DE,QAAAA,KAAK,EAAEF,GAAG,CAACE,KAHoD,EAAjE;;AAKA,YAAMF,GAAN;AACD;;AAED,SAAKoB,qBAAL,CAA4BzE,UAA5B,EAAwC2B,MAAxC;;AAEA,WAAOA,MAAM,CAAChD,EAAd;AACD;;AAED,QAAM0G,MAAN,CAAcrF,UAAd,EAAkC2B,MAAlC,EAAkE;AAChE,UAAMtB,gBAAgB,GAAGtB,iBAAiB,CAACiB,UAAD,CAA1C;AACA,QAAKK,gBAAgB,IAAI,IAAzB;AACE,UAAM,IAAIF,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN;;AAEF,QAAI;AACF;AACA,WAAKwB,oCAAL,CAA2CnB,gBAA3C,EAA6DsB,MAA7D;;AAEA;AACA,WAAKD,+BAAL,CAAsCrB,gBAAtC,EAAwDsB,MAAxD,EAAgE,KAAhE;;AAEA;AACA,UAAImD,SAAS,GAAG,IAAhB;AACA,UAAKzE,gBAAgB,CAACO,4CAAtB,EAAqE;AACnEkE,QAAAA,SAAS,GAAG,KAAKtB,YAAL,CAAmBxD,UAAnB,EAA+B;AACzCrB,UAAAA,EAAE,EAAEgD,MAAM,CAAChD,EAD8B,EAA/B,CAAZ;;AAGD;;AAED,WAAK6D,YAAL,CAAmBxC,UAAnB,EAA+B2B,MAA/B,EAAuC,KAAvC;;AAEA,YAAM,KAAKiD,eAAL,CAAsBvE,gBAAgB,CAACK,iBAAvC,EAA0DiB,MAA1D,EAAkEmD,SAAlE,CAAN;;AAEA,YAAMzE,gBAAgB,CAACG,SAAjB,CAA2B6E,MAA3B,CAAmCrF,UAAnC,EAA+C2B,MAA/C,CAAN;AACD,KApBD,CAoBE,OAAQ0B,GAAR,EAAc;AACdC,mBAAIA,GAAJ,CAAS,OAAT,EAAkB,sCAAsCtD,UAAxD,EAAoE;AAClE2B,QAAAA,MADkE;AAElE0B,QAAAA,GAFkE;AAGlEE,QAAAA,KAAK,EAAEF,GAAG,CAACE,KAHuD,EAApE;;AAKA,YAAMF,GAAN;AACD;;AAED,SAAKoB,qBAAL,CAA4BzE,UAA5B,EAAwC2B,MAAxC;AACD;;AAED,QAAM2D,MAAN,CAActF,UAAd,EAAkC2B,MAAlC,EAAkE;AAChE,UAAMtB,gBAAgB,GAAGtB,iBAAiB,CAACiB,UAAD,CAA1C;AACA,QAAKK,gBAAgB,IAAI,IAAzB;AACE,UAAM,IAAIF,KAAJ,CAAW,2CAA2CH,UAAtD,CAAN;;AAEF,QAAI;AACF;AACA,WAAKwB,oCAAL,CAA2CnB,gBAA3C,EAA6DsB,MAA7D;;AAEA,WAAKa,YAAL,CAAmBxC,UAAnB,EAA+B2B,MAA/B,EAAuC,IAAvC;;AAEA,YAAM,KAAKiD,eAAL,CAAsBvE,gBAAgB,CAACM,iBAAvC,EAA0DgB,MAA1D,CAAN;;AAEA,YAAMtB,gBAAgB,CAACG,SAAjB,CAA2B8E,MAA3B,CAAmCtF,UAAnC,EAA+C2B,MAA/C,CAAN;AACD,KATD,CASE,OAAQ0B,GAAR,EAAc;AACdC,mBAAIA,GAAJ,CAAS,OAAT,EAAkB,sCAAsCtD,UAAxD,EAAoE;AAClE2B,QAAAA,MADkE;AAElE0B,QAAAA,GAFkE;AAGlEE,QAAAA,KAAK,EAAEF,GAAG,CAACE,KAHuD,EAApE;;AAKA,YAAMF,GAAN;AACD;;AAED,SAAKoB,qBAAL,CAA4BzE,UAA5B,EAAwC2B,MAAxC;AACD;;AAED4D,EAAAA,cAAc,CAAEvF,UAAF,EAAsBrB,EAAtB,EAAmC;AAC/C,UAAM0B,gBAAgB,GAAGtB,iBAAiB,CAACiB,UAAD,CAA1C;;AAEA,WAAOK,gBAAgB,CAACG,SAAjB,CAA2B+E,cAA3B,CAA2C5G,EAA3C,CAAP;AACD;;AAED6G,EAAAA,YAAY,CAAExF,UAAF,EAAsBrB,EAAtB,EAAmC;AAC7C,UAAM0B,gBAAgB,GAAGtB,iBAAiB,CAACiB,UAAD,CAA1C;;AAEA,WAAOK,gBAAgB,CAACG,SAAjB,CAA2BgF,YAA3B,CAAyC7G,EAAzC,CAAP;AACD;;AAED8G,EAAAA,2BAA2B,CAAEzF,UAAF,EAAsB0F,GAAtB,EAA0CC,GAA1C,EAAwD;AACjF,UAAMtF,gBAAgB,GAAGtB,iBAAiB,CAACiB,UAAD,CAA1C;;AAEA;AACA,UAAM4F,MAAM,GAAGvF,gBAAgB,CAACG,SAAjB,CAA2BgF,YAA3B,CAAyCG,GAAG,CAAChH,EAA7C,CAAf;;AAEA;AACA;AACA,SAAM,IAAI2F,EAAE,GAAG,CAAf,EAAkBA,EAAE,GAAGoB,GAAG,CAACnB,MAA3B,EAAmCD,EAAE,EAArC,EAA0C;AACxC,YAAMuB,cAAc,GAAGxF,gBAAgB,CAACG,SAAjB,CAA2BgF,YAA3B,CAAyCE,GAAG,CAACpB,EAAD,CAAH,CAAQ3F,EAAjD,CAAvB;AACA,UAAKkH,cAAc,KAAKD,MAAxB,EAAiC;AAC/BF,QAAAA,GAAG,CAACpB,EAAD,CAAH,GAAUqB,GAAV;AACA;AACD;AACF;AACD,QAAIG,MAAM,GAAG,+CAA6BJ,GAA7B,EAAkCC,GAAlC,CAAb;AACA,QAAKG,MAAM,IAAI,IAAf;AACExC,iBAAIA,GAAJ;AACE,WADF;AAEE,8EAA0EtD,UAF5E;AAGE;AACE2F,MAAAA,GADF;AAEED,MAAAA,GAFF,EAHF;;;AAQF,WAAOI,MAAP;AACD;;AAED,SAAOC,oBAAP,CAA6BC,wBAA7B,EAAgEC,EAAhE,EAAqF;AACnF,SAAM,IAAI/F,SAAV,IAAuBlB,aAAvB;AACEkB,IAAAA,SAAS,CAACgG,UAAV,CAAsBF,wBAAtB,EAAgD,MAAM;AACpDC,MAAAA,EAAE;AACH,KAFD;AAGH,GAxegC;;;AA2enC;gCACA7G,aAAa,CAACW,cAAd,CAA8B,MAA9B,EAAsCzB,aAAtC;;AAEA;AACO,eAAe6H,gBAAf,CAAiClE,GAAjC,EAA8CC,GAA9C,EAAoF;AACzF;AACA,QAAMtC,eAAe,GAAG,MAAM,sCAAoBqC,GAApB,EAAyBC,GAAzB,CAA9B,CAFyF,CAE5B;AAC7D,QAAMkE,aAAa,GAAG,IAAIhH,aAAJ,EAAtB,CAHyF,CAG/C;;AAE1CgH,EAAAA,aAAa,CAACpE,UAAd,CAA0BC,GAA1B,EAA+BC,GAA/B,EALyF,CAKpD;AACrCkE,EAAAA,aAAa,CAACjE,kBAAd,CAAkCvC,eAAlC;AACA,SAAOwG,aAAP;AACD","sourcesContent":["// @flow\n\nimport DataLoader from 'dataloader'\nimport { cursorForObjectInConnection } from 'graphql-relay'\n\nimport UserToken2Anonymous from '../_configuration/urb-base-server/UserToken2Anonymous'\nimport defaultPersister from '../_configuration/urb-base-server/graphql/defaultPersister'\nimport getNewUser from '../_configuration/urb-base-server/graphql/model/getNewUser'\nimport { getSiteInformation } from '../_configuration/urb-base-server/siteSettings'\nimport User from '../_configuration/urb-base-server/graphql/model/User'\n\nimport log from './log'\n\n// Anonymous user\nconst User_0 = new User(\n  Object.assign( getNewUser( defaultPersister.uuidNull() ), {\n    id: defaultPersister.uuidNull(),\n    UserToken2: UserToken2Anonymous,\n    User_DisplayName: 'Anonymous',\n  }),\n)\n\nexport { User_0 }\n\n// Type of entity definition\ntype EntityDefinition = {\n  EntityName: string,\n  EntityType: Function,\n  fieldsWithSuffix: { [string]: boolean },\n  Persister: Object,\n  TriggersForAdd: Array<Function>,\n  TriggersForUpdate: Array<Function>,\n  TriggersForRemove: Array<Function>,\n  TriggersForUpdateShouldRetrieveCurrentRecord: boolean,\n}\n\n// Static set of entity definitions\nconst entityDefinitions: {\n  [string]: EntityDefinition,\n} = {}\n\n// Static array of object managers\nconst setPersisters = new Set()\n\n// Value for a change indicating that the record is deleted\nconst deletedRecord = {\n  deleted: true,\n}\n\nexport default class ObjectManager {\n  loadersSingle: Object\n  loadersMultiple: Object\n  Viewer_User_id: string\n  changes: Object\n  request: ?Object\n  response: ?Object\n  siteInformation: { artifact_id: string, siteConfiguration: Object }\n\n  constructor() {\n    // Loaders for a single record, by entity name\n    this.loadersSingle = {}\n\n    // Loaders for a multiple record lists, by entity name\n    this.loadersMultiple = {}\n\n    // Changes made to records, by entity name\n    this.changes = {}\n\n    // UserID for the viewer. Could be unset if ObjectManager is used by system\n    this.Viewer_User_id = 'Object Manager: viewer user id has not been set'\n\n    // Request and response objects, if available\n    this.request = null\n    this.response = null\n\n    // Setting site information mostly to satify flow;\n    // also, in order to be able to better detect errors when not set\n    this.siteInformation = {\n      artifact_id: 'Object Manager: artifact_id has not been set',\n      siteConfiguration: {},\n    }\n  }\n\n  static registerEntity( entityName: string, EntityType: Function, persister: any ): void {\n    if ( entityName in entityDefinitions ) throw new Error( 'Entity already registered: ' + entityName )\n\n    // In order to be able to access the name as a static property of the type\n    EntityType.entityName = entityName\n\n    // Determine persister - default, or otherwise\n    if ( persister == null ) persister = defaultPersister\n\n    // A set would retain only one copy of a persister\n    setPersisters.add( persister )\n\n    const entityDefinition = {\n      EntityName: entityName,\n      EntityType,\n      fieldsWithSuffix: {},\n      Persister: persister,\n      TriggersForAdd: [],\n      TriggersForUpdate: [],\n      TriggersForRemove: [],\n      TriggersForUpdateShouldRetrieveCurrentRecord: false,\n    }\n\n    // Determine fields by fields with suffix\n    // For the User-related tables, there is no automatic support:\n    // User_id and artifact_id have to be explicitly specified\n    if ( entityName !== 'User' && entityName !== 'UserAccount' && entityName !== 'UserSession' ) {\n      const example = new EntityType({})\n      for ( let suffix of [\n        '_artifact_id',\n        '_user_id',\n        '_created_by',\n        '_created_on',\n        '_modified_on',\n        '_modified_by',\n      ]) {\n        const fieldName = entityDefinition.EntityName + suffix\n\n        // Does the object type have it?\n        if ( example.hasOwnProperty( fieldName ) ) {\n          entityDefinition.fieldsWithSuffix[suffix] = true\n        }\n      }\n    }\n\n    entityDefinitions[entityName] = entityDefinition\n  }\n\n  static RegisterTriggerForAdd( entityName: string, handler: Function ): void {\n    entityDefinitions[entityName].TriggersForAdd.push( handler )\n  }\n\n  static RegisterTriggerForUpdate(\n    entityName: string,\n    handler: Function,\n    shouldRetrieveCurrentRecord: boolean,\n  ): void {\n    entityDefinitions[entityName].TriggersForUpdate.push( handler )\n\n    if ( shouldRetrieveCurrentRecord )\n      entityDefinitions[entityName].TriggersForUpdateShouldRetrieveCurrentRecord = true\n  }\n\n  static RegisterTriggerForAddAndUpdate( entityName: string, handler: Function ): void {\n    ObjectManager.RegisterTriggerForAdd( entityName, handler )\n    ObjectManager.RegisterTriggerForUpdate( entityName, handler, false )\n  }\n\n  static RegisterTriggerForRemove( entityName: string, handler: any ) {\n    entityDefinitions[entityName].TriggersForRemove.push( handler )\n  }\n\n  // Apply artifact_id, User_id security\n  addUserIdAndOrSiteIdToFilterOrFields( entityDefinition: EntityDefinition, filterOrFields: Object ) {\n    for ( let suffix of [ '_artifact_id', '_user_id' ]) {\n      // Does the object type have it?\n      if ( entityDefinition.fieldsWithSuffix[suffix]) {\n        const fieldName = entityDefinition.EntityName + suffix\n\n        // Is the filter/fields collection missing it?\n        if ( !filterOrFields.hasOwnProperty( fieldName ) )\n          filterOrFields[fieldName] =\n            suffix === '_artifact_id' ? this.siteInformation.artifact_id : this.Viewer_User_id\n      }\n    }\n  }\n\n  // Update created and modified fields\n  updatedCreatedAndModifiedFields(\n    entityDefinition: EntityDefinition,\n    fields: Object,\n    isCreating: boolean,\n  ) {\n    const dtNow = new Date()\n\n    for ( let suffix of isCreating\n      ? [ '_created_by', '_created_on', '_modified_on', '_modified_by' ]\n      : [ '_modified_on', '_modified_by' ]) {\n      // Does the object type have it?\n      if ( entityDefinition.fieldsWithSuffix[suffix]) {\n        const fieldName = entityDefinition.EntityName + suffix\n\n        // Is the filter/fields collection missing it?\n        if ( !fields.hasOwnProperty( fieldName ) )\n          fields[fieldName] =\n            suffix === '_modified_by' || suffix === '_created_by' ? this.Viewer_User_id : dtNow\n      }\n    }\n  }\n\n  setViewerUserId( Viewer_User_id: string ): void {\n    this.Viewer_User_id = Viewer_User_id\n  }\n\n  setRequest( req: any, res: any ): void {\n    this.request = req\n    this.response = res\n  }\n\n  setSiteInformation( siteInformation: Object ): void {\n    this.siteInformation = siteInformation\n  }\n\n  getLoadersSingle( entityName: string ) {\n    const foundLoaders = this.loadersSingle[entityName]\n\n    if ( foundLoaders != null ) {\n      return foundLoaders\n    } else {\n      this.loadersSingle[entityName] = {}\n      return this.loadersSingle[entityName]\n    }\n  }\n\n  getLoadersMultiple( entityName: string ) {\n    const foundLoaders = this.loadersMultiple[entityName]\n\n    if ( foundLoaders != null ) {\n      return foundLoaders\n    } else {\n      this.loadersMultiple[entityName] = {}\n      return this.loadersMultiple[entityName]\n    }\n  }\n\n  clearLoadersMultiple( entityName: string ) {\n    this.loadersMultiple[entityName] = {}\n  }\n\n  recordChange( entityName: string, fields: Object, isDeletion: boolean ) {\n    let records = this.changes[entityName]\n    if ( records == null ) records = this.changes[entityName] = {}\n\n    const id = fields.id\n\n    records[id] = isDeletion ? deletedRecord : fields\n  }\n\n  getViewerUserId(): string {\n    if ( this.Viewer_User_id === 'Object Manager: viewer user id has not been set' )\n      throw new Error( 'Object Manager: viewer user id has not been set' )\n\n    return this.Viewer_User_id\n  }\n\n  getRequest(): any {\n    if ( this.request == null ) throw new Error( 'Object Manager: request has not been set' )\n\n    return this.request\n  }\n\n  getLoader( entityName: string, fieldName: string, multipleResults: boolean ) {\n    if ( !( entityName in entityDefinitions ) )\n      throw new Error( 'Can not find entity type named ' + entityName )\n\n    const entityDefinition = entityDefinitions[entityName]\n    const entityType = entityDefinition.EntityType\n\n    let loadersList = multipleResults\n      ? this.getLoadersMultiple( entityName )\n      : this.getLoadersSingle( entityName )\n\n    let loader = loadersList[fieldName]\n    if ( loader == null ) {\n      if ( multipleResults )\n        loader = new DataLoader( filter => {\n          try {\n            return entityDefinition.Persister.getObjectList( entityName, entityType, filter )\n          } catch ( err ) {\n            log.log( 'error', 'Object Manager: Could not load multiple results ' + entityName, {\n              fieldName,\n              err,\n              stack: err.stack,\n            })\n            throw err\n          }\n        })\n      else\n        loader = new DataLoader( filter => {\n          try {\n            return entityDefinition.Persister.getOneObject( entityName, entityType, filter )\n          } catch ( err ) {\n            log.log( 'error', 'Object Manager: Could not load single result ' + entityName, {\n              fieldName,\n              err,\n              stack: err.stack,\n            })\n            throw err\n          }\n        })\n\n      loadersList[fieldName] = loader\n    }\n\n    return loader\n  }\n\n  getOneObject( entityName: string, query: Object ): Promise<User> {\n    // Special hack for anonymous users\n    if ( entityName === 'User' )\n      if ( defaultPersister.uuidEquals( defaultPersister.uuidNull(), query.id ) )\n        return Promise.resolve( User_0 )\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinitions[entityName], query )\n\n    // For all non-user, non 0 ids, load from data loader per protocol\n    const loaderIdentifier = Object.keys( query )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, false )\n\n    return loader.load( query ).then( result => {\n      const changes = this.changes[entityName]\n      if ( changes ) {\n        // $AssureFlow - by convention all entity objects are expected to have an id\n        const change = changes[result.id]\n\n        if ( change != null ) {\n          // Object is not found, return null if deleted\n          if ( change === deletedRecord ) {\n            result = null\n          } else {\n            // Add or update\n            Object.assign( result, change )\n          }\n        }\n      }\n      return result\n    })\n  }\n\n  getObjectList( entityName: string, query: Object ) {\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinitions[entityName], query )\n\n    const loaderIdentifier = Object.keys( query )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, true )\n\n    return loader.load( query ).then( arrResults => {\n      const changes = this.changes[entityName]\n      if ( changes ) {\n        for ( let ix = 0; ix < arrResults.length; ix++ ) {\n          const change = changes[arrResults[ix].id]\n          if ( change != null ) {\n            if ( change === deletedRecord )\n              // Reduce ix in order not to skip over a record\n              arrResults.splice( ix--, 1 )\n            // Add or update\n            else Object.assign( arrResults[ix], change )\n          }\n        }\n      }\n      return arrResults\n    })\n  }\n\n  invalidateLoaderCache( entityName: string, fields: any ) {\n    // At this moment there is no obvious way of knowing what to clear from lists, so delete them all\n    this.clearLoadersMultiple( entityName )\n\n    const loadersSingle = this.getLoadersSingle( entityName )\n    for ( let loaderFieldName in loadersSingle ) {\n      if ( loaderFieldName === 'id' ) loadersSingle[loaderFieldName].clear( fields.id )\n      else delete loadersSingle[loaderFieldName]\n    }\n  }\n\n  executeTriggers( arrTriggers: Array<Function>, fields: Object, oldFields: ?Object ) {\n    const arrPromises = []\n    for ( let trigger of arrTriggers ) {\n      arrPromises.push( trigger( this, fields, oldFields ) )\n    }\n\n    return Promise.all( arrPromises )\n  }\n\n  assignPrimaryKey( entityName: string, fields: any ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Generate primary key, overwrite if already present\n    fields.id = entityDefinition.Persister.uuidRandom()\n  }\n\n  async add( entityName: string, fields: Object ): any {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fields )\n\n    // Update created and modified fields\n    this.updatedCreatedAndModifiedFields( entityDefinition, fields, true )\n\n    // Generate primary key, if not already present\n    if ( !fields.id ) fields.id = entityDefinition.Persister.uuidRandom()\n\n    // If this is a user ID\n    if ( entityName === 'User' ) this.setViewerUserId( fields.id.toString() )\n\n    this.recordChange( entityName, fields, false )\n\n    try {\n      await this.executeTriggers( entityDefinition.TriggersForAdd, fields )\n\n      await entityDefinition.Persister.add( entityName, fields, entityDefinition.EntityType )\n    } catch ( err ) {\n      log.log( 'error', 'Object Manager: Could not add ' + entityName, {\n        fields,\n        err,\n        stack: err.stack,\n      })\n      throw err\n    }\n\n    this.invalidateLoaderCache( entityName, fields )\n\n    return fields.id\n  }\n\n  async update( entityName: string, fields: Object ): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    try {\n      // Apply artifact_id, User_id security\n      this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fields )\n\n      // Update created and modified fields\n      this.updatedCreatedAndModifiedFields( entityDefinition, fields, false )\n\n      // Retrieve the current values, if triggers will be used\n      let oldFields = null\n      if ( entityDefinition.TriggersForUpdateShouldRetrieveCurrentRecord ) {\n        oldFields = this.getOneObject( entityName, {\n          id: fields.id,\n        })\n      }\n\n      this.recordChange( entityName, fields, false )\n\n      await this.executeTriggers( entityDefinition.TriggersForUpdate, fields, oldFields )\n\n      await entityDefinition.Persister.update( entityName, fields )\n    } catch ( err ) {\n      log.log( 'error', 'Object Manager: Could not update ' + entityName, {\n        fields,\n        err,\n        stack: err.stack,\n      })\n      throw err\n    }\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  async remove( entityName: string, fields: Object ): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n    if ( entityDefinition == null )\n      throw new Error( 'Object Manager: Cound not find entity ' + entityName )\n\n    try {\n      // Apply artifact_id, User_id security\n      this.addUserIdAndOrSiteIdToFilterOrFields( entityDefinition, fields )\n\n      this.recordChange( entityName, fields, true )\n\n      await this.executeTriggers( entityDefinition.TriggersForRemove, fields )\n\n      await entityDefinition.Persister.remove( entityName, fields )\n    } catch ( err ) {\n      log.log( 'error', 'Object Manager: Could not remove ' + entityName, {\n        fields,\n        err,\n        stack: err.stack,\n      })\n      throw err\n    }\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  uuidFromString( entityName: string, id: string ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    return entityDefinition.Persister.uuidFromString( id )\n  }\n\n  uuidToString( entityName: string, id: Object ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    return entityDefinition.Persister.uuidToString( id )\n  }\n\n  cursorForObjectInConnection( entityName: string, arr: Array<Object>, obj: Object ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    // IDs can be both strings and Uuid. Check that first, and convert to String\n    const obj_id = entityDefinition.Persister.uuidToString( obj.id )\n\n    // Make sure that the object and its instance can be compared with ===\n    // assumed that the object has id field which is unique\n    for ( let ix = 0; ix < arr.length; ix++ ) {\n      const arr_element_id = entityDefinition.Persister.uuidToString( arr[ix].id )\n      if ( arr_element_id === obj_id ) {\n        arr[ix] = obj\n        break\n      }\n    }\n    let cursor = cursorForObjectInConnection( arr, obj )\n    if ( cursor == null )\n      log.log(\n        'error',\n        'Object Manager: Could not create cursor for object in connection for ' + entityName,\n        {\n          obj,\n          arr,\n        },\n      )\n    return cursor\n  }\n\n  static initializePersisters( runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n    for ( let persister of setPersisters )\n      persister.initialize( runAsPartOfSetupDatabase, () => {\n        cb()\n      })\n  }\n}\n\n// Register the user\nObjectManager.registerEntity( 'User', User )\n\n// Get an Object Manager with site information\nexport async function getObjectManager( req: Object, res: Object ): Promise<ObjectManager> {\n  // Set site information\n  const siteInformation = await getSiteInformation( req, res ) // Create individual object manager for each request\n  const objectManager = new ObjectManager() // Set request and response\n\n  objectManager.setRequest( req, res ) // Place maker configuration into object manager\n  objectManager.setSiteInformation( siteInformation )\n  return objectManager\n}\n"],"file":"ObjectManager.js"}