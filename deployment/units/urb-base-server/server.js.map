{"version":3,"sources":["../../../units/urb-base-server/server.js"],"names":["require","load","port","process","env","PORT","Error","host","HOST","log","name","version","NODE_ENV","PUBLIC_URL","process_title","title","process_pid","pid","local_ip","server","use","req","res","next","setHeader","set","graphql","serverAuth","serverHealthz","express","static","path","resolve","__dirname","maxAge","serverWebApp","ObjectManager","initializePersisters","listen","startDevelopmentServer","localIPDevelopmentServer"],"mappings":";;;AAGA;;AAEA,4B;;AAEA,kC;AACA,0C;AACA,6C;;AAEA;AACA,+D;AACA,sF;;AAEA,0C;AACA,0C;AACA,gD;AACA,gD;AACA,4B;AACA,wD;;AAEA;;AAEA;AAN4C;AAhB5C;AAuBAA,QAAS,QAAT,EAAoBC,IAApB,G,CARsC;AAFA;AAYtC,MAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAzB,CACA,IAAKH,QAAQ,IAAR,IAAgB,OAAOA,IAAP,KAAgB,QAArC,EACE,MAAM,IAAII,KAAJ,CAAW,4EAAX,CAAN;;AAEF,MAAMC,OAAOJ,QAAQC,GAAR,CAAYI,IAAzB;AACA,IAAKD,QAAQ,IAAR,IAAgB,OAAOA,IAAP,KAAgB,QAArC;AACE,MAAM,IAAID,KAAJ,CAAW,4EAAX,CAAN,C,CAAgG;;AAElGG,cAAIA,GAAJ,CAAS,MAAT,EAAiB,sBAAjB,EAAyC;AACvCC,QAAMA,aADiC;AAEvCC,WAASA,gBAF8B;AAGvCC,YAAUT,QAAQC,GAAR,CAAYQ,QAHiB;AAIvCJ,QAAML,QAAQC,GAAR,CAAYI,IAJqB;AAKvCH,QAAMF,QAAQC,GAAR,CAAYC,IALqB;AAMvCQ,cAAYV,QAAQC,GAAR,CAAYS,UANe;AAOvCC,iBAAeX,QAAQY,KAPgB;AAQvCC,eAAab,QAAQc,GARkB;AASvCC,YAAU,2BAT6B,EAAzC;;;AAYA;AACA,MAAMC,SAAS,wBAAf;;AAEA;AACAA,OAAOC,GAAP,CAAY,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA2B;AACrC;AACAD,MAAIE,SAAJ,CAAe,6BAAf,EAA8CrB,QAAQC,GAAR,CAAYS,UAA1D;;AAEA;AACAS,MAAIE,SAAJ,CAAe,8BAAf,EAA+C,wCAA/C;;AAEA;AACAF,MAAIE,SAAJ,CAAe,8BAAf,EAA+C,+BAA/C;;AAEA;AACA;AACAF,MAAIE,SAAJ,CAAe,kCAAf,EAAmD,IAAnD;;AAEA;AACAD;AACD,CAhBD,E,CAgBG;;AAEHJ,OAAOM,GAAP,CAAY,aAAZ,EAA2B,UAA3B;AACAN,OAAOM,GAAP,CAAY,cAAZ,EAA4B,KAA5B;AACAN,OAAOC,GAAP,CAAY,4BAAZ;AACAD,OAAOC,GAAP,CAAY,6BAAZ,E,CAA6B;;AAE7BD,OAAOC,GAAP,CAAY,UAAZ,EAAwBM,uBAAxB,E,CAAkC;AAClCP,OAAOC,GAAP,CAAY,OAAZ,EAAqBO,oBAArB,E,CAAkC;AAClCR,OAAOC,GAAP,CAAY,UAAZ,EAAwBQ,uBAAxB,E,CAAwC;AACxCT,OAAOC,GAAP;AACES,kBAAQC,MAAR,CAAgBC,eAAKC,OAAL,CAAcC,YAAY,kDAA1B,CAAhB,EAAgG;AAC9FC,UAAQ,MAAM,KADgF,CACzE;AADyE,CAAhG,CADF;;;AAMA;AACA,gCAAkBf,MAAlB,E,CAA2B;AAC3BA,OAAOC,GAAP,CAAYe,sBAAZ,E,CAA2B;;AAE3BC,wBAAcC,oBAAd,CAAoC,KAApC,EAA2C,MAAM;AAC/C;AACA;AACA,MAAKlC,QAAQC,GAAR,CAAYQ,QAAZ,KAAyB,YAA9B,EAA6C;AAC3C;AACAO,WAAOmB,MAAP,CAAepC,IAAf,EAAqBK,IAArB;AACD,GAHD,MAGO;AACL;AACAgC,2BAAwBrC,IAAxB,EAA8B,WAA9B;AACA;AACA,QAAKK,SAAS,WAAd,EAA4BgC,uBAAwBrC,IAAxB,EAA8BK,IAA9B;AAC7B;AACF,CAZD;;AAcA,SAASgC,sBAAT,CAAiCrC,IAAjC,EAAuCK,IAAvC,EAA8C;AAC5C,QAAMiC,2BAA2B,wBAAjC;AACAA,2BAAyBpB,GAAzB,CAA8BD,MAA9B;AACAqB,2BAAyBF,MAAzB,CAAiCpC,IAAjC,EAAuCK,IAAvC;AACD","file":"server.js","sourcesContent":["// @flow\n\n// In order to use ES7 async/await\nimport 'babel-polyfill'\n\nimport path from 'path'\n\nimport express from 'express'\nimport compression from 'compression'\nimport cookieParser from 'cookie-parser'\n\nimport { name, version } from '../_configuration/package'\nimport serverWebApp from '../urb-base-webapp/serverWebApp'\nimport serverExtensions from '../_configuration/urb-base-server/serverExtensions'\n\nimport serverAuth from './serverAuth' // Authentication server\nimport getLocalIP from './getLocalIP'\nimport graphql from './serverGraphQL' // GraphQL server\nimport serverHealthz from './serverHealthz' // Health check endpoint server\nimport log from './log'\nimport ObjectManager from './graphql/ObjectManager'\n\n//\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst port = process.env.PORT\nif ( port == null || typeof port !== 'string' )\n  throw new Error( 'urb-base-server/server.js requires the environment variable PORT to be set' )\n\nconst host = process.env.HOST\nif ( host == null || typeof host !== 'string' )\n  throw new Error( 'urb-base-server/server.js requires the environment variable HOST to be set' ) // Log startup information\n\nlog.log( 'info', 'Starting application', {\n  name: name,\n  version: version,\n  NODE_ENV: process.env.NODE_ENV,\n  HOST: process.env.HOST,\n  PORT: process.env.PORT,\n  PUBLIC_URL: process.env.PUBLIC_URL,\n  process_title: process.title,\n  process_pid: process.pid,\n  local_ip: getLocalIP(),\n})\n\n// Main router\nconst server = express()\n\n// Add headers\nserver.use( function( req, res, next ) {\n  // Website you wish to allow to connect\n  res.setHeader( 'Access-Control-Allow-Origin', process.env.PUBLIC_URL )\n\n  // Request methods you wish to allow\n  res.setHeader( 'Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE' )\n\n  // Request headers you wish to allow\n  res.setHeader( 'Access-Control-Allow-Headers', 'X-Requested-With,content-type' )\n\n  // Set to true if you need the website to include cookies in the requests sent\n  // to the API (e.g. in case you use sessions)\n  res.setHeader( 'Access-Control-Allow-Credentials', true )\n\n  // Pass to next layer of middleware\n  next()\n}) // Configure main router\n\nserver.set( 'trust proxy', 'loopback' )\nserver.set( 'x-powered-by', false )\nserver.use( compression() )\nserver.use( cookieParser() ) // GraphQL server requires this\n\nserver.use( '/graphql', graphql ) // Authentication server\nserver.use( '/auth', serverAuth ) // Health check endpoint\nserver.use( '/healthz', serverHealthz ) // Static public files server\nserver.use(\n  express.static( path.resolve( __dirname + '/../_configuration/urb-base-server/public_files/' ), {\n    maxAge: 365 * 86400, // one year\n  }),\n)\n\n// Add extensions - custom routes\nserverExtensions( server ) // Application with routes\nserver.use( serverWebApp ) // Set up all persisters\n\nObjectManager.initializePersisters( false, () => {\n  // Serve - work differently in development and production. In production only the\n  // specified host serves\n  if ( process.env.NODE_ENV === 'production' ) {\n    // Production - serve as told\n    server.listen( port, host )\n  } else {\n    // Development server - localhost. Always run on localhost\n    startDevelopmentServer( port, '127.0.0.1' )\n    // Development server - on a specific IP, if different from localhost\n    if ( host !== '127.0.0.1' ) startDevelopmentServer( port, host )\n  }\n})\n\nfunction startDevelopmentServer( port, host ) {\n  const localIPDevelopmentServer = express()\n  localIPDevelopmentServer.use( server )\n  localIPDevelopmentServer.listen( port, host )\n}\n"]}