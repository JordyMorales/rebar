{"version":3,"sources":["../../../units/urb-base-server/MasterWriter.js"],"names":["fs","fsWithCallbacks","promises","MasterWriter","constructor","basePath","logToConsole","directories","Map","arrPromises","ensureRelativePathExistsHelper","filePath","has","mkdir","path","resolve","err","code","set","ensureRelativePathExists","destinationRelative","arrPath","split","pathAccumulated","ix","length","copyFile","sourceAbsolute","push","writeFile","fileContent","executeQueue","Promise","all"],"mappings":";;AAEA;AACA;;AAEA,gF;;AAEA,MAAMA,EAAE,GAAGC,YAAgBC,QAA3B;;AAEe,MAAMC,YAAN,CAAmB;;;;AAIhC;;;AAGAC,EAAAA,WAAW,CAAEC,QAAF,EAAoBC,YAApB,EAA4C;AACrD,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,YAAL,GAAoBA,YAApB;;AAEA,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACD;;AAED,QAAMC,8BAAN,CAAsCC,QAAtC,EAAyD;AACvD,QAAK,CAAC,KAAKJ,WAAL,CAAiBK,GAAjB,CAAsBD,QAAtB,CAAN,EAAyC;AACvC,UAAI;AACF,cAAMX,EAAE,CAACa,KAAH,CAAUC,cAAKC,OAAL,CAAc,KAAKV,QAAnB,EAA6BM,QAA7B,CAAV,CAAN;AACD,OAFD,CAEE,OAAQK,GAAR,EAAc;AACd,YAAKA,GAAG,CAACC,IAAJ,KAAa,QAAlB,EAA6B,MAAMD,GAAN;AAC9B;;AAED,WAAKT,WAAL,CAAiBW,GAAjB,CAAsBP,QAAtB,EAAgC,IAAhC;AACD;AACF;;AAED,QAAMQ,wBAAN,CAAgCC,mBAAhC,EAA8D;AAC5D,UAAMC,OAAO,GAAGD,mBAAmB,CAACE,KAApB,CAA2B,GAA3B,CAAhB;;AAEA,SAAM,IAAIC,eAAe,GAAG,EAAtB,EAA0BC,EAAE,GAAG,CAArC,EAAwCA,EAAE,GAAGH,OAAO,CAACI,MAArD,EAA6DD,EAAE,EAA/D,EAAoE;AAClE,YAAM,KAAKd,8BAAL,CAAqCa,eAArC,CAAN;AACAA,MAAAA,eAAe,IAAIF,OAAO,CAACG,EAAD,CAAP,GAAc,GAAjC;AACD;AACF;;AAED,QAAME,QAAN,CAAgBC,cAAhB,EAAwCP,mBAAxC,EAAsE;AACpE,UAAM,KAAKD,wBAAL,CAA+BC,mBAA/B,CAAN;;AAEA,SAAKX,WAAL,CAAiBmB,IAAjB,CAAuB5B,EAAE,CAAC0B,QAAH,CAAaC,cAAb,EAA6B,KAAKtB,QAAL,GAAgB,GAAhB,GAAsBe,mBAAnD,CAAvB;AACD;;AAED,QAAMS,SAAN,CAAiBT,mBAAjB,EAA8CU,WAA9C,EAAoE;AAClE,UAAM,KAAKX,wBAAL,CAA+BC,mBAA/B,CAAN;;AAEA,SAAKX,WAAL,CAAiBmB,IAAjB;AACE;AACE,SAAKvB,QAAL,GAAgB,GAAhB,GAAsBe,mBADxB;AAEE,QAFF;AAGEU,IAAAA,WAHF;AAIE,SAAKxB,YAJP,CADF;;;AAQD;;AAED,QAAMyB,YAAN,GAAqB;AACnB,UAAMC,OAAO,CAACC,GAAR,CAAa,KAAKxB,WAAlB,CAAN;AACA,SAAKA,WAAL,GAAmB,EAAnB;AACD,GA1D+B,C","sourcesContent":["// @flow\n\nimport fsWithCallbacks from 'fs'\nimport path from 'path'\n\nimport ensureFileContent from './ensureFileContent'\n\nconst fs = fsWithCallbacks.promises\n\nexport default class MasterWriter {\n  basePath: string\n  logToConsole: boolean\n  directories: Map<string, boolean>\n  // $AssureFlow\n  arrPromises: Array<Promise>\n\n  constructor( basePath: string, logToConsole: boolean ) {\n    this.basePath = basePath\n    this.logToConsole = logToConsole\n\n    this.directories = new Map()\n    this.arrPromises = []\n  }\n\n  async ensureRelativePathExistsHelper( filePath: string ) {\n    if ( !this.directories.has( filePath ) ) {\n      try {\n        await fs.mkdir( path.resolve( this.basePath, filePath ) )\n      } catch ( err ) {\n        if ( err.code !== 'EEXIST' ) throw err\n      }\n\n      this.directories.set( filePath, true )\n    }\n  }\n\n  async ensureRelativePathExists( destinationRelative: string ) {\n    const arrPath = destinationRelative.split( '/' )\n\n    for ( let pathAccumulated = '', ix = 0; ix < arrPath.length; ix++ ) {\n      await this.ensureRelativePathExistsHelper( pathAccumulated )\n      pathAccumulated += arrPath[ix] + '/'\n    }\n  }\n\n  async copyFile( sourceAbsolute: string, destinationRelative: string ) {\n    await this.ensureRelativePathExists( destinationRelative )\n\n    this.arrPromises.push( fs.copyFile( sourceAbsolute, this.basePath + '/' + destinationRelative ) )\n  }\n\n  async writeFile( destinationRelative: string, fileContent: string ) {\n    await this.ensureRelativePathExists( destinationRelative )\n\n    this.arrPromises.push(\n      ensureFileContent(\n        this.basePath + '/' + destinationRelative,\n        null,\n        fileContent,\n        this.logToConsole,\n      ),\n    )\n  }\n\n  async executeQueue() {\n    await Promise.all( this.arrPromises )\n    this.arrPromises = []\n  }\n}\n"],"file":"MasterWriter.js"}