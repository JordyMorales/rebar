{"version":3,"sources":["../../../../units/urb-base-webapp/components/AppWrapperBase.jsx"],"names":["AppWrapperBase","React","Component","constructor","props","context","handle_onResize","rbCtx","viewportDimensions","getWrapperRbCtx","ViewportDimensions","siteConfiguration","componentDidMount","getChildContext","createMUITheme","render","children","childContextTypes","PropTypes","object"],"mappings":";;AAEA,6E;;AAEA,uC;AACA,8B;AACA,0D;;AAEA,mE;;AAEe,MAAMA,cAAN,SAA6BC,gBAAMC;;;;AAI/C;;;;;;;AAODC,cAAaC,KAAb,EAA4BC,OAA5B,EAA8C;AAC5C,UAAOD,KAAP,EAAcC,OAAd;;AAEA;;AAEA;AAL4C;;;;;;;;;;;;;;;;;;;;;;;;;;AAgC9CC,mBAhC8C,GAgC5B,MAAM;AACtB,WAAKC,KAAL,CAAWC,kBAAX,CAA8BF,eAA9B;AACD,KAlC6C,CAM5C,KAAKC,KAAL,GAAa,KAAKE,eAAL,EAAb,CAEA,KAAKF,KAAL,CAAWC,kBAAX,GAAgC,IAAIE,4BAAJ,EAAhC,CACA,KAAKH,KAAL,CAAWI,iBAAX,GAA+BP,MAAMO,iBAArC,CACD,CAEDC,oBAAoB,CAClB,KAAKN,eAAL,GADkB,CACK;AACxB,GAEDO,kBAAkB,CAChB,OAAO,EACLN,OAAO,KAAKA,KADP,EAAP,CAGD,CA3BA,CA6BD;AACAO,mBAAiB,CACf,OAAO,IAAP,CACD,CAhCA,CAkCD;AACAL,oBAA0B,CACxB,OAAO,EAAP,CACD,CAMDM,SAAS,CACP;AACA,SAAKV,OAAL,GAAe,KAAKQ,eAAL,EAAf;;AAEA;AACE,oCAAC,4BAAD,IAAe,QAAO,QAAtB,EAA+B,UAAU,KAAKP,eAA9C;AACE,sCAAC,0BAAD,IAAkB,OAAO,KAAKQ,cAAL,EAAzB,IAAiD,KAAKV,KAAL,CAAWY,QAA5D,CADF,CADF;;;AAKD,GApDA,C,kBAJkBhB,c,CAAAA,c,CAOZiB,iB,GAAoB,EACzBV,OAAOW,oBAAUC,MADQ,E","file":"AppWrapperBase.js","sourcesContent":["// @flow\n\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'\n\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport EventListener from 'react-event-listener'\n\nimport ViewportDimensions from '../scripts/ViewportDimensions'\n\nexport default class AppWrapperBase extends React.Component<{\n  siteConfiguration: Object,\n  children: any,\n  url: string,\n}> {\n  rbCtx: Object\n\n  static childContextTypes = {\n    rbCtx: PropTypes.object,\n  }\n\n  constructor( props: Object, context: Object ) {\n    super( props, context )\n\n    // TODO x0100 If a property for innerWidth is provided, use it for the initial request\n\n    // Descendants can add other items to rbCtx through getWrapperRbCtx\n    this.rbCtx = this.getWrapperRbCtx()\n\n    this.rbCtx.viewportDimensions = new ViewportDimensions()\n    this.rbCtx.siteConfiguration = props.siteConfiguration\n  }\n\n  componentDidMount() {\n    this.handle_onResize() // Will populate the data structures for dimensions with current values\n  }\n\n  getChildContext() {\n    return {\n      rbCtx: this.rbCtx,\n    }\n  }\n\n  // This should be overridden in AppDrawer\n  createMUITheme() {\n    return null\n  }\n\n  // Can be overrideen in AppDrawer\n  getWrapperRbCtx(): Object {\n    return {}\n  }\n\n  handle_onResize = () => {\n    this.rbCtx.viewportDimensions.handle_onResize()\n  }\n\n  render() {\n    // Hacky hacky here ....\n    this.context = this.getChildContext()\n\n    return (\n      <EventListener target=\"window\" onResize={this.handle_onResize}>\n        <MuiThemeProvider theme={this.createMUITheme()}>{this.props.children}</MuiThemeProvider>\n      </EventListener>\n    )\n  }\n}\n"]}