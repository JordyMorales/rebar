{"version":3,"sources":["../../../../units/urb-base-webapp/scripts/withViewportDimensions.js"],"names":["withViewportDimensions","WrappedComponent","dimensions","React","Component","constructor","props","context","viewportDimensions","rbCtx","state","dimension","get","componentWillUnmount","removeComponent","render","Object","assign","contextTypes","PropTypes","object","isRequired","_handle_ViewportDimensionChange","setState"],"mappings":";;;;;;;AAOwBA,sB,CALxB,uC,qDACA,8B,0IAIe,SAASA,sBAAT;AACbC,gBADa;AAEbC,UAFa;AAGb;AACA;AACA,0BAAO,cAAcC,gBAAMC,SAApB,CAA8C;;;;;AAKnDC,gBAAaC,KAAb,EAA4BC,OAA5B,EAA8C;AAC5C,YAAOD,KAAP,EAAcC,OAAd,EAD4C;;AAG5C,YAAM,EAAEC,kBAAF,KAAyBD,QAAQE,KAAvC;;AAEA,YAAMC,QAAQ,EAAd;;AAEA,WAAM,IAAIC,SAAV,IAAuBT,UAAvB,EAAoCQ,MAAMC,SAAN,IAAmBH,mBAAmBI,GAAnB,CAAwB,IAAxB,EAA8BD,SAA9B,CAAnB;;AAEpC,WAAKD,KAAL,GAAaA,KAAb;AACD;;AAED;AACA;AACA;AACA;;AAEAG,2BAAuB;AACrB,YAAM,EAAEL,kBAAF,KAAyB,KAAKD,OAAL,CAAaE,KAA5C;;AAEAD,yBAAmBM,eAAnB,CAAoC,IAApC;AACD;;;;;;;;;;;;AAYDC,aAAS;AACP,YAAMT,QAAQU,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKP,KAAvB,EAA8B,KAAKJ,KAAnC,CAAd;;AAEA,aAAO,8BAAC,gBAAD,EAAsBA,KAAtB,CAAP;AACD,KA1CkD,CAArD,SACSY,YADT,GACwB,EACpBT,OAAOU,oBAAUC,MAAV,CAAiBC,UADJ,EADxB,uCA4BEC,+BA5BF,GA4BoC,MAAM,CACtC,MAAM,EAAEd,kBAAF,KAAyB,KAAKD,OAAL,CAAaE,KAA5C,CAEA,MAAMC,QAAQ,EAAd,CAEA,KAAM,IAAIC,SAAV,IAAuBT,UAAvB,EAAoCQ,MAAMC,SAAN,IAAmBH,mBAAmBI,GAAnB,CAAwB,IAAxB,EAA8BD,SAA9B,CAAnB,CAEpC,KAAKY,QAAL,CAAeb,KAAf,EACD,CApCH;;AA4CD","file":"withViewportDimensions.js","sourcesContent":["// @flow\n\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nimport type { ViewportDimensionType } from './ViewportDimensionType'\n\nexport default function withViewportDimensions(\n  WrappedComponent: Object,\n  dimensions: Array<ViewportDimensionType>,\n) {\n  // ...and returns another component...\n  return class extends React.Component<Object, Object> {\n    static contextTypes = {\n      rbCtx: PropTypes.object.isRequired,\n    }\n\n    constructor( props: Object, context: Object ) {\n      super( props, context )\n\n      const { viewportDimensions } = context.rbCtx\n\n      const state = {}\n\n      for ( let dimension of dimensions ) state[dimension] = viewportDimensions.get( this, dimension )\n\n      this.state = state\n    }\n\n    // componentDidMount() {\n    //   // ... that takes care of the subscription...\n    //   DataSource.addChangeListener( this.handleChange )\n    // }\n\n    componentWillUnmount() {\n      const { viewportDimensions } = this.context.rbCtx\n\n      viewportDimensions.removeComponent( this )\n    }\n\n    _handle_ViewportDimensionChange = () => {\n      const { viewportDimensions } = this.context.rbCtx\n\n      const state = {}\n\n      for ( let dimension of dimensions ) state[dimension] = viewportDimensions.get( this, dimension )\n\n      this.setState( state )\n    }\n\n    render() {\n      const props = Object.assign({}, this.state, this.props )\n\n      return <WrappedComponent {...props} />\n    }\n  }\n}\n"]}