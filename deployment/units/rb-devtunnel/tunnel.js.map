{"version":3,"sources":["../../../units/rb-devtunnel/tunnel.js"],"names":["spawn","require","http","httpProxy","createDevHostProxy","headers","proxyPort","serverPort","proxy","createProxyServer","on","proxyReq","req","res","options","headerName","setHeader","server","createServer","web","target","console","log","JSON","stringify","listen","establishTunnel","domainName","applicationPort","child","stdout","data","stderr","error","code","setTimeout","startProxiesAndTunnels","tunnels","applications","proxyPortsStartAt","proxyPortOffset","application","local","pub","public","subdomain"],"mappings":"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","sourcesContent":["const { spawn } = require( 'child_process' )\nconst http = require( 'http' )\n\nconst httpProxy = require( 'http-proxy' )\n\nfunction createDevHostProxy( headers, proxyPort, serverPort ) {\n  var proxy = httpProxy.createProxyServer({})\n\n  // Add headers\n  proxy.on( 'proxyReq', function( proxyReq, req, res, options ) {\n    for ( let headerName in headers ) proxyReq.setHeader( headerName, headers[headerName])\n  })\n\n  var server = http.createServer( function( req, res ) {\n    // Forward to server port\n    proxy.web( req, res, {\n      target: 'http://127.0.0.1:' + serverPort,\n    })\n  })\n\n  // Listen at proxy port\n  console.log( serverPort + ' -> ' + proxyPort + ' ' + JSON.stringify( headers ) )\n  server.listen( proxyPort )\n}\n\nfunction establishTunnel( domainName, proxyPort, applicationPort ) {\n  console.log(\n    'Establishing ' +\n      domainName +\n      '.localtunnel.me - > :' +\n      proxyPort +\n      ' (bound to :' +\n      applicationPort +\n      ')',\n  )\n\n  const child = spawn( './node_modules/.bin/lt', [\n    '--port',\n    '' + proxyPort,\n    '--subdomain',\n    domainName,\n  ])\n\n  child.stdout.on( 'data', data => {\n    console.log( '' + data )\n  })\n\n  child.stderr.on( 'data', data => {\n    console.error( '' + data )\n  })\n\n  child.on( 'exit', code => {\n    if ( code !== 0 ) {\n      console.error(\n        'lighttunnel for port ' + proxyPort + ' exited with ' + code + ', restarting ...',\n      )\n      setTimeout( () => establishTunnel( domainName, proxyPort ) )\n    }\n  })\n}\n\nfunction startProxiesAndTunnels( tunnels ) {\n  const { applications, proxyPortsStartAt } = tunnels\n\n  let proxyPortOffset = 0\n  for ( let application of applications ) {\n    const { applicationPort } = application.local\n\n    for ( let pub of application.public ) {\n      createDevHostProxy( pub.headers, proxyPortsStartAt + proxyPortOffset, applicationPort )\n      establishTunnel( pub.subdomain, proxyPortsStartAt + proxyPortOffset, applicationPort )\n\n      proxyPortOffset++\n    }\n  }\n}\n\nconst tunnels = require( '../_configuration/rb-devtunnel/tunnels.json' )\n\nstartProxiesAndTunnels( tunnels )\n"],"file":"tunnel.js"}