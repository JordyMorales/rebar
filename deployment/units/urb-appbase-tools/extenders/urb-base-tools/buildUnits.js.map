{"version":3,"sources":["../../../../../units/urb-appbase-tools/extenders/urb-base-tools/buildUnits.js"],"names":["fs","fsWithCallbacks","promises","prettierESLintOptions","eslintConfig","eslintRC","prettierOptions","packageJSON","prettier","reRemoveComments","RegExp","createGraphQLSchema","units","result","schema","introspectionQuery","errors","Error","JSON","stringify","printedSchema","replace","taskPromises","path","resolve","Promise","all","createRouteFile","fileName","imports","exports","routesAppFrame","concat","text","join","createRoutes","routesAppFrameImports","routesRootImports","routesAppFrameExports","routesRootExports","unitName","endsWith","routesDir","routeFileNames","readdir","routeFileName","startsWith","route","substring","length","push","buildUnits"],"mappings":"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","file":"buildUnits.js","sourcesContent":["// @flow\n\nimport fsWithCallbacks from 'fs'\nimport path from 'path'\n\nimport { graphql } from 'graphql'\nimport { introspectionQuery, printSchema } from 'graphql/utilities'\nimport prettierESLint from 'prettier-eslint'\n\nimport ensureFileContent from '../../../urb-base-server/ensureFileContent'\n// $AssureFlow Not sure why it gives an error. The file does exist\nimport eslintRC from '../../../../.eslintrc.json'\nimport fsExists from '../../../urb-base-server/fsExists'\nimport packageJSON from '../../../../package.json'\nimport schema from '../../../urb-appbase-server/graphql/schema'\n\nconst fs = fsWithCallbacks.promises\n\nconst prettierESLintOptions = { eslintConfig: eslintRC, prettierOptions: packageJSON.prettier }\n\n// TODO x0500 It is a complete mystery to me why the comments are encased in \"\"\" but the relay\n// compiler does not like them. Either way, this sanitizes the schema and removes the comment.\nconst reRemoveComments = new RegExp( '\"\"\"[^\"]*\"\"\"', 'g' )\n\nasync function createGraphQLSchema( units: Array<string> ) {\n  const result = await graphql( schema, introspectionQuery )\n  if ( result.errors )\n    throw new Error( 'Failed introspecting schema: ' + JSON.stringify( result.errors, null, 2 ) )\n\n  const printedSchema = printSchema( schema ).replace( reRemoveComments, '#' )\n\n  const taskPromises = [\n    ensureFileContent(\n      path.resolve( './units/_configuration/urb-base-server/graphql/schema.json' ),\n      null,\n      JSON.stringify( result, null, 2 ),\n      true,\n    ),\n    ensureFileContent( path.resolve( 'schema.graphql' ), null, printedSchema, true ),\n  ]\n\n  await Promise.all( taskPromises )\n}\n\nasync function createRouteFile( fileName: string, imports: Array<string>, exports: Array<string> ) {\n  let routesAppFrame = [ '// @flow', '' ]\n  routesAppFrame = routesAppFrame.concat( imports )\n  routesAppFrame = routesAppFrame.concat([ '', 'export default [' ])\n  routesAppFrame = routesAppFrame.concat( exports )\n  routesAppFrame = routesAppFrame.concat([ ']' ])\n\n  await ensureFileContent(\n    fileName,\n    null,\n    prettierESLint({ text: routesAppFrame.join( '\\r\\n' ), ...prettierESLintOptions }),\n    true,\n  )\n}\n\nasync function createRoutes( units: Array<string> ) {\n  const routesAppFrameImports = []\n  const routesRootImports = []\n  const routesAppFrameExports = []\n  const routesRootExports = []\n\n  for ( let unitName of units )\n    if ( unitName.endsWith( '-webapp' ) ) {\n      const routesDir = path.resolve( './units', unitName )\n      if ( await fsExists( routesDir ) ) {\n        const routeFileNames = await fs.readdir( routesDir )\n\n        for ( let routeFileName of routeFileNames ) {\n          if ( routeFileName.endsWith( '.jsx' ) )\n            if ( routeFileName.startsWith( 'routeAppFrame' ) ) {\n              const route = routeFileName.substring( 0, routeFileName.length - 4 )\n              routesAppFrameImports.push(\n                'import ' + route + ' from \\'../../' + unitName + '/' + route + '\\'',\n              )\n              routesAppFrameExports.push( '  ' + route + ',' )\n            } else if ( routeFileName.startsWith( 'routeRoot' ) ) {\n              const route = routeFileName.substring( 0, routeFileName.length - 4 )\n              routesRootImports.push(\n                'import ' + route + ' from \\'../../' + unitName + '/' + route + '\\'',\n              )\n              routesRootExports.push( '  ' + route + ',' )\n            }\n        }\n      }\n    }\n\n  await Promise.all([\n    createRouteFile(\n      path.resolve( './units/_configuration/urb-appbase-webapp/routesAppFrame.js' ),\n      routesAppFrameImports,\n      routesAppFrameExports,\n    ),\n    createRouteFile(\n      path.resolve( './units/_configuration/urb-appbase-webapp/routesRoot.js' ),\n      routesRootImports,\n      routesRootExports,\n    ),\n  ])\n}\n\nexport default ( async function buildUnits( units: Array<string> ) {\n  const taskPromises = [ createGraphQLSchema( units ), createRoutes( units ) ]\n\n  await Promise.all( taskPromises )\n})\n"]}