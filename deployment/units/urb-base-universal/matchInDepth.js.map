{"version":3,"sources":["../../../units/urb-base-universal/matchInDepth.js"],"names":["matchInDepth","payload","condition","ix","payloadValue","conditionValue","midMarker_notNull","midMarker_isNull","typeOfValue","typeOfCondition","inCondition","midMarker_in","bMatchFound","inConditionOption"],"mappings":";;;;AAIwBA,Y,CAFxB,4DAEe,SAASA,YAAT,CAAuBC,OAAvB,EAAqCC,SAArC,EAAsD;AACnE,OAAM,IAAIC,EAAV,IAAgBD,SAAhB,EAA4B;AAC1B,UAAME,eAAeH,QAAQE,EAAR,CAArB;AACA,UAAME,iBAAiBH,UAAUC,EAAV,CAAvB;;AAEA,QAAKE,mBAAmBC,sCAAxB,EAA4C;AAC1C,UAAKF,gBAAgB,IAArB,EAA4B;AAC1B,eAAO,KAAP;AACD,OAFD,MAEO;AACL;AACD;AACF;AACD,QAAKC,mBAAmBE,qCAAxB,EAA2C;AACzC,UAAKH,gBAAgB,IAArB,EAA4B;AAC1B,eAAO,KAAP;AACD,OAFD,MAEO;AACL;AACD;AACF;;AAED,UAAMI,cAAc,OAAOJ,YAA3B;AACA,UAAMK,kBAAkB,OAAOJ,cAA/B;;AAEA,QAAKI,oBAAoB,QAAzB,EAAoC;AAClC,YAAMC,cAAcL,eAAeM,iCAAf,CAApB;;AAEA,UAAKD,WAAL,EAAmB;AACjB;AACA,YAAIE,cAAc,KAAlB;AACA,aAAM,IAAIC,iBAAV,IAA+BH,WAA/B,EAA6C;AAC3C,cAAKV,aAAcI,YAAd,EAA4BS,iBAA5B,CAAL,EAAuD;AACrDD,0BAAc,IAAd;AACA;AACD;AACF;;AAED,YAAK,CAACA,WAAN,EAAoB;AAClB,iBAAO,KAAP;AACD;AACF;AACD;AAdA,WAeK;AACH,cAAKJ,gBAAgBC,eAArB,EAAuC;AACrC,mBAAO,KAAP;AACD;AACD,cAAK,CAACT,aAAcI,YAAd,EAA4BC,cAA5B,CAAN,EAAqD;AACnD,mBAAO,KAAP;AACD;AACF;AACF,KA1BD,MA0BO;AACL,UAAKD,iBAAiBC,cAAtB,EAAuC;AACrC,eAAO,KAAP;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD","file":"matchInDepth.js","sourcesContent":["// @flow\n\nimport { midMarker_notNull, midMarker_isNull, midMarker_in } from './matchInDepthMarkers'\n\nexport default function matchInDepth( payload: any, condition: any ) {\n  for ( let ix in condition ) {\n    const payloadValue = payload[ix]\n    const conditionValue = condition[ix]\n\n    if ( conditionValue === midMarker_notNull ) {\n      if ( payloadValue == null ) {\n        return false\n      } else {\n        continue\n      }\n    }\n    if ( conditionValue === midMarker_isNull ) {\n      if ( payloadValue != null ) {\n        return false\n      } else {\n        continue\n      }\n    }\n\n    const typeOfValue = typeof payloadValue\n    const typeOfCondition = typeof conditionValue\n\n    if ( typeOfCondition === 'object' ) {\n      const inCondition = conditionValue[midMarker_in]\n\n      if ( inCondition ) {\n        // In condition - match until one match is found\n        let bMatchFound = false\n        for ( let inConditionOption of inCondition ) {\n          if ( matchInDepth( payloadValue, inConditionOption ) ) {\n            bMatchFound = true\n            break\n          }\n        }\n\n        if ( !bMatchFound ) {\n          return false\n        }\n      }\n      // Regular object - match recursively, if the object is of the same type\n      else {\n        if ( typeOfValue !== typeOfCondition ) {\n          return false\n        }\n        if ( !matchInDepth( payloadValue, conditionValue ) ) {\n          return false\n        }\n      }\n    } else {\n      if ( payloadValue !== conditionValue ) {\n        return false\n      }\n    }\n  }\n\n  return true\n}\n"]}