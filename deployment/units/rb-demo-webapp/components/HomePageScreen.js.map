{"version":3,"sources":["../../../../units/rb-demo-webapp/components/HomePageScreen.jsx"],"names":["styles","card","minWidth","HomePageScreen","React","Component","render","classes","props","siteConfiguration","data","name","value","webapp","rebarDemo","version","OSType","OSHostName","OSFreeMem","api","googleMapsJavascriptAPI","map","n"],"mappings":";;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,+H;;AAEA,MAAMA,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,GADN,EADO,EAAf;;;;AAMA,MAAMC,cAAN,SAA6BC,eAAMC;;;AAGhC;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM,EAAEC,OAAF,KAAc,KAAKC,KAAzB;;AAEA;AACE,mCAAC,iCAAD,CAA0B,QAA1B;AACGC,MAAAA,iBAAiB,IAAI;AACpB,cAAMC,IAAI,GAAG;AACX;AACEC,UAAAA,IAAI,EAAE,eADR;AAEE;AACAC,UAAAA,KAAK,EAAEH,iBAAiB,CAACI,MAAlB,CAAyBC,SAAzB,CAAmCC,OAH5C,EADW;;AAMX;AACEJ,UAAAA,IAAI,EAAE,WADR;AAEE;AACAC,UAAAA,KAAK,EAAEH,iBAAiB,CAACI,MAAlB,CAAyBC,SAAzB,CAAmCE,MAH5C,EANW;;AAWX;AACEL,UAAAA,IAAI,EAAE,kBADR;AAEE;AACAC,UAAAA,KAAK,EAAEH,iBAAiB,CAACI,MAAlB,CAAyBC,SAAzB,CAAmCG,UAH5C,EAXW;;AAgBX;AACEN,UAAAA,IAAI,EAAE,oBADR;AAEE;AACAC,UAAAA,KAAK,EAAEH,iBAAiB,CAACI,MAAlB,CAAyBC,SAAzB,CAAmCI,SAH5C,EAhBW;;AAqBX;AACEP,UAAAA,IAAI,EAAE,qBADR;AAEE;AACAC,UAAAA,KAAK,EAAEH,iBAAiB,CAACI,MAAlB,CAAyBM,GAAzB,CAA6BC,uBAHtC,EArBW,CAAb;;;;AA4BA;AACE,uCAAC,8BAAD;AACE,uCAAC,aAAD,IAAM,SAAS,EAAEb,OAAO,CAACN,IAAzB;AACE,uCAAC,mBAAD,IAAY,KAAK,EAAC,YAAlB,GADF;AAEE,uCAAC,oBAAD;AACE,uCAAC,mBAAD,IAAY,SAAS,EAAC,GAAtB;AACM,8CAAG,IAAI,EAAC,wCAAR,YADN;;;;;;;;;;AAWE,kDAXF;AAYE,kDAZF,CADF;;AAeE,uCAAC,mBAAD,IAAY,SAAS,EAAC,IAAtB;AACE;AACE,oEADF,0IADF;;;AAKE;AACE,+DADF,4QALF,CAfF,CAFF,CADF;;;;;;;;AAgCE,kDAhCF;AAiCE,uCAAC,aAAD,IAAM,SAAS,EAAEM,OAAO,CAACN,IAAzB;AACE,uCAAC,mBAAD,IAAY,KAAK,EAAC,oBAAlB,GADF;AAEE,uCAAC,oBAAD;AACE,uCAAC,mBAAD,IAAY,SAAS,EAAC,GAAtB;AACkC,aADlC;AAEE,kGAFF,MADF;;AAKE,uCAAC,cAAD;AACE,uCAAC,kBAAD;AACE,uCAAC,iBAAD;AACE,uCAAC,kBAAD,mBADF;AAEE,uCAAC,kBAAD,IAAW,OAAO,MAAlB,YAFF,CADF,CADF;;;AAOE,uCAAC,kBAAD;AACGS,UAAAA,IAAI,CAACW,GAAL,CAAUC,CAAC,IAAI;AACd;AACE,2CAAC,iBAAD,IAAU,GAAG,EAAEA,CAAC,CAACX,IAAjB;AACE,2CAAC,kBAAD,QAAYW,CAAC,CAACX,IAAd,CADF;AAEE,2CAAC,kBAAD,IAAW,OAAO,MAAlB,IAAoBW,CAAC,CAACV,KAAtB,CAFF,CADF;;;AAMD,WAPA,CADH,CAPF,CALF,CAFF,CAjCF,CADF;;;;;;;AA+DD,OA7FH,CADF;;;AAiGD,GArGA,C;;;AAwGY;AACb,wBAAYZ,MAAZ,EAAsBG,cAAtB,CADa,6F","sourcesContent":["// @flow\n\nimport Card from '@material-ui/core/Card'\n\nimport CardContent from '@material-ui/core/CardContent'\n\nimport CardHeader from '@material-ui/core/CardHeader'\n\nimport { withStyles } from '@material-ui/core/styles'\n\nimport Table from '@material-ui/core/Table'\n\nimport TableBody from '@material-ui/core/TableBody'\n\nimport TableCell from '@material-ui/core/TableCell'\n\nimport TableHead from '@material-ui/core/TableHead'\n\nimport TableRow from '@material-ui/core/TableRow'\n\nimport Typography from '@material-ui/core/Typography'\n\nimport React from 'react'\nimport { createFragmentContainer, graphql } from 'react-relay'\n\nimport ResponsiveContentArea from '../../rb-appbase-webapp/components/ResponsiveContentArea'\nimport SiteConfigurationContext from '../../rb-appbase-webapp/components/SiteConfigurationContext'\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n}\n\nclass HomePageScreen extends React.Component<{\n  classes: Object,\n  Viewer: Object,\n}> {\n  render() {\n    const { classes } = this.props\n\n    return (\n      <SiteConfigurationContext.Consumer>\n        {siteConfiguration => {\n          const data = [\n            {\n              name: 'Rebar Version',\n              // $AssureFlow\n              value: siteConfiguration.webapp.rebarDemo.version,\n            },\n            {\n              name: 'Server OS',\n              // $AssureFlow\n              value: siteConfiguration.webapp.rebarDemo.OSType,\n            },\n            {\n              name: 'Server Host Name',\n              // $AssureFlow\n              value: siteConfiguration.webapp.rebarDemo.OSHostName,\n            },\n            {\n              name: 'Server Free Memory',\n              // $AssureFlow\n              value: siteConfiguration.webapp.rebarDemo.OSFreeMem,\n            },\n            {\n              name: 'Google Maps API Key',\n              // $AssureFlow\n              value: siteConfiguration.webapp.api.googleMapsJavascriptAPI,\n            },\n          ]\n\n          return (\n            <ResponsiveContentArea>\n              <Card className={classes.card}>\n                <CardHeader title=\"Rebar Demo\" />\n                <CardContent>\n                  <Typography component=\"p\">\n                    The <a href=\"https://github.com/MachineAcuity/rebar\">Rebar</a> is and open\n                    source project representing basic foundation of the solutions we provide. It\n                    fully utilizes the react stack, and Node.js and Cassandra on the back end. It\n                    can be used both as boilerplate, as well as an educational tool with multiple\n                    examples available. Basic user account management including account creation,\n                    password strength indicator and user profile is also included. The boilerplate\n                    is optimized for supportability and update-ability. It allows us to update the\n                    multiple projects based on the boilerplate with minimum effort, providing new\n                    features, improvements and bug fixes. This is achieved through the following two\n                    approaches:\n                    <br />\n                    <br />\n                  </Typography>\n                  <Typography component=\"ul\">\n                    <li>\n                      <b>Configurability</b> - All the configuration files, which include settings,\n                      CQL, JSON, snippets of JavaScript and JSX are separated from the common code.\n                    </li>\n                    <li>\n                      <b>Modularity</b> - The applications built upon the boilerplate are separated\n                      into semi-independent units, which contain the necessary front-end, back end,\n                      relay, CQL, etc. code. The parameters and settings for those units are stored\n                      in the configuration folder for eacy updating.\n                    </li>\n                  </Typography>\n                </CardContent>\n              </Card>\n              <br />\n              <Card className={classes.card}>\n                <CardHeader title=\"Site Configuration\" />\n                <CardContent>\n                  <Typography component=\"p\">\n                    These settings are derived from{' '}\n                    <b>_configuration/rb-base-server/siteSettings.js</b>.\n                  </Typography>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Property</TableCell>\n                        <TableCell numeric>Value</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {data.map( n => {\n                        return (\n                          <TableRow key={n.name}>\n                            <TableCell>{n.name}</TableCell>\n                            <TableCell numeric>{n.value}</TableCell>\n                          </TableRow>\n                        )\n                      })}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </ResponsiveContentArea>\n          )\n        }}\n      </SiteConfigurationContext.Consumer>\n    )\n  }\n}\n\nexport default createFragmentContainer(\n  withStyles( styles )( HomePageScreen ),\n  graphql`\n    fragment HomePageScreen_Viewer on Viewer {\n      id\n    }\n  `,\n)\n"],"file":"HomePageScreen.js"}