{"version":3,"sources":["../../../../units/urb-example-todo-webapp/components/ToDoList.jsx"],"names":["styles","theme","root","width","maxWidth","background","palette","paper","ToDoList","React","Component","_handle_onClick_MarkAll","event","checked","relay","Viewer","props","variables","context","ToDo_Complete","ToDoListUpdateMarkAllMutation","commit","environment","ToDos","status","_handle_onChange","tabsValue","url","router","push","renderTabs","render","ToDo_TotalCount","ToDo_CompletedCount","edges","map","node","id","contextTypes","PropTypes","object"],"mappings":";;AAEA,4C;AACA,gD;AACA;AACA,wC;AACA;AACA,uC;AACA,8B;AACA;AACA,wC;;AAEA,kH;;AAEA,sC;;AAEA,MAAMA,SAASC,UAAU;AACvBC,QAAM;AACJC,WAAO,MADH;AAEJC,cAAU,GAFN;AAGJC,gBAAYJ,MAAMK,OAAN,CAAcD,UAAd,CAAyBE,KAHjC,EADiB,EAAV,CAAf;;;;AAQA,MAAMC,QAAN,SAAuBC,gBAAMC;;;;;;AAM3B;;;;;;AAMAC,2BANA,GAM0B,CAAEC,KAAF,EAASC,OAAT,KAAsB;AAC9C,YAAM,EAAEC,KAAF,EAASC,MAAT,KAAoB,KAAKC,KAA/B;AACA,YAAM,EAAEC,SAAF,KAAgB,KAAKC,OAAL,CAAaJ,KAAnC;AACA,YAAMK,gBAAgBN,OAAtB;;AAEAO,8CAA8BC,MAA9B;AACEP,YAAMQ,WADR;AAEEP,YAFF;AAGEA,aAAOQ,KAHT;AAIEJ,mBAJF;AAKEF,gBAAUO,MALZ;;AAOD,KAlBD;;AAoBAC,oBApBA,GAoBmB,CAAEb,KAAF,EAASc,SAAT,KAAwB;AACzC,YAAMC,MAAMD,cAAc,CAAd,GAAkB,iBAAlB,GAAsCA,cAAc,CAAd,GAAkB,cAAlB,GAAmC,OAArF;AACA,WAAKR,OAAL,CAAaU,MAAb,CAAoBC,IAApB,CAA0BF,GAA1B;AACD,KAvBD;;AAyBAG,eAAa;AACX,UAAMN,SAAS,KAAKN,OAAL,CAAaJ,KAAb,CAAmBG,SAAnB,CAA6BO,MAA5C;AACA,UAAME,YAAYF,WAAW,QAAX,GAAsB,CAAtB,GAA0BA,WAAW,WAAX,GAAyB,CAAzB,GAA6B,CAAzE;;AAEA;AACE,oCAAC,gBAAD,IAAQ,UAAS,QAAjB;AACE,sCAAC,cAAD,IAAM,OAAOE,SAAb,EAAwB,UAAU,KAAKD,gBAAvC;AACE,wCAAC,SAAD,IAAK,OAAM,KAAX,GADF;AAEE,wCAAC,SAAD,IAAK,OAAM,QAAX,GAFF;AAGE,wCAAC,SAAD,IAAK,OAAM,WAAX,GAHF,CADF,CADF;;;;AASD;;AAEDM,WAAS;AACP,UAAM,EAAEhB,MAAF,KAAa,KAAKC,KAAxB;AACA,UAAM,EAAEO,KAAF,EAASS,eAAT,EAA0BC,mBAA1B,KAAkDlB,MAAxD;;AAEA,QAAK,CAACiB,eAAN,EAAwB;AACtB,aAAO,IAAP;AACD;;AAED;AACE;AACG,aAAKF,UAAL,EADH;AAEE,sCAAC,eAAD,IAAW,SAAX;AACE,wCAAC,sBAAD;AACE;AACE,0CAAC,kBAAD;AACE,uBAASE,oBAAoBC,mBAD/B;AAEE,wBAAU,KAAKtB,uBAFjB,GAFJ;;;AAOE,mBAAM,sBAPR,GADF,CAFF;;;AAaE,sCAAC,cAAD;AACGY,gBAAMW,KAAN,CAAYC,GAAZ,CAAiB,CAAC,EAAEC,IAAF,EAAD,KAAc,8BAAC,kBAAD,IAAU,KAAKA,KAAKC,EAApB,EAAwB,QAAQtB,MAAhC,EAAwC,MAAMqB,IAA9C,GAA/B,CADH,CAbF,CADF;;;;AAmBD,GAnED,CANI5B,Q,CAOG8B,Y,GAAe,EACpBxB,OAAOyB,oBAAUC,MADG,EAEpBZ,QAAQW,oBAAUC,MAFE,E;;;AAqET;AACb,wBAAYxC,MAAZ,EAAsBQ,QAAtB,CADa,uF","file":"ToDoList.js","sourcesContent":["// @flow\n\nimport AppBar from 'material-ui/AppBar'\nimport Checkbox from 'material-ui/Checkbox'\nimport { FormGroup, FormControlLabel } from 'material-ui/Form'\nimport List from 'material-ui/List'\nimport { withStyles } from 'material-ui/styles'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { createFragmentContainer, graphql } from 'react-relay'\nimport Tabs, { Tab } from 'material-ui/Tabs'\n\nimport ToDoListUpdateMarkAllMutation from '../../urb-example-todo-client/relay/ToDoListUpdateMarkAllMutation'\n\nimport ToDoItem from './ToDoItem'\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    background: theme.palette.background.paper,\n  },\n})\n\nclass ToDoList extends React.Component<\n  {\n    Viewer: Object,\n    relay: Object,\n  },\n  null,\n> {\n  static contextTypes = {\n    relay: PropTypes.object,\n    router: PropTypes.object,\n  }\n\n  _handle_onClick_MarkAll = ( event, checked ) => {\n    const { relay, Viewer } = this.props\n    const { variables } = this.context.relay\n    const ToDo_Complete = checked\n\n    ToDoListUpdateMarkAllMutation.commit(\n      relay.environment,\n      Viewer,\n      Viewer.ToDos,\n      ToDo_Complete,\n      variables.status,\n    )\n  }\n\n  _handle_onChange = ( event, tabsValue ) => {\n    const url = tabsValue === 2 ? '/todo/completed' : tabsValue === 1 ? '/todo/active' : '/todo'\n    this.context.router.push( url )\n  }\n\n  renderTabs() {\n    const status = this.context.relay.variables.status\n    const tabsValue = status === 'active' ? 1 : status === 'completed' ? 2 : 0\n\n    return (\n      <AppBar position=\"static\">\n        <Tabs value={tabsValue} onChange={this._handle_onChange}>\n          <Tab label=\"All\" />\n          <Tab label=\"Active\" />\n          <Tab label=\"Completed\" />\n        </Tabs>\n      </AppBar>\n    )\n  }\n\n  render() {\n    const { Viewer } = this.props\n    const { ToDos, ToDo_TotalCount, ToDo_CompletedCount } = Viewer\n\n    if ( !ToDo_TotalCount ) {\n      return null\n    }\n\n    return (\n      <div>\n        {this.renderTabs()}\n        <FormGroup row>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={ToDo_TotalCount === ToDo_CompletedCount}\n                onChange={this._handle_onClick_MarkAll}\n              />\n            }\n            label=\"Mark all as complete\"\n          />\n        </FormGroup>\n        <List>\n          {ToDos.edges.map( ({ node }) => <ToDoItem key={node.id} Viewer={Viewer} ToDo={node} /> )}\n        </List>\n      </div>\n    )\n  }\n}\n\nexport default createFragmentContainer(\n  withStyles( styles )( ToDoList ),\n  graphql`\n    fragment ToDoList_Viewer on Viewer {\n      ToDos(status: $status, first: 2147483647) @connection(key: \"ToDoList_ToDos\") {\n        edges {\n          node {\n            id\n            ToDo_Complete\n            ...ToDoItem_ToDo\n          }\n        }\n      }\n      id\n      ToDo_TotalCount\n      ToDo_CompletedCount\n      ...ToDoItem_Viewer\n    }\n  `,\n)\n"]}